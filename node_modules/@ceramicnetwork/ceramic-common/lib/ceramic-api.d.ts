import { DID, DIDProvider } from 'dids';
import { Doctype, DoctypeHandler, DocOpts, DocParams } from "./doctype";
import DocID from '@ceramicnetwork/docid';
export interface PinApi {
    add(docId: DocID): Promise<void>;
    rm(docId: DocID): Promise<void>;
    ls(docId?: DocID): Promise<AsyncIterable<string>>;
}
export type { DIDProvider } from 'dids';
export interface CeramicApi {
    pin: PinApi;
    did?: DID;
    addDoctypeHandler<T extends Doctype>(doctypeHandler: DoctypeHandler<T>): void;
    findDoctypeHandler<T extends Doctype>(doctype: string): DoctypeHandler<T>;
    createDocument<T extends Doctype>(doctype: string, params: DocParams, opts?: DocOpts): Promise<T>;
    createDocumentFromGenesis<T extends Doctype>(genesis: any, opts?: DocOpts): Promise<T>;
    loadDocument<T extends Doctype>(docId: DocID | string, opts?: DocOpts): Promise<T>;
    loadDocumentRecords(docId: DocID | string): Promise<Array<Record<string, any>>>;
    listVersions(docId: DocID | string): Promise<string[]>;
    applyRecord<T extends Doctype>(docId: DocID | string, record: Record<string, unknown>, opts?: DocOpts): Promise<T>;
    setDIDProvider(provider: DIDProvider): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=ceramic-api.d.ts.map