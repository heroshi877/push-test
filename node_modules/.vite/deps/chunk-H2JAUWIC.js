import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  init
} from "./chunk-SODDL76Z.js";
import {
  require_lodash,
  require_lodash2
} from "./chunk-Y7WOIE7I.js";
import {
  require_joi_browser_min
} from "./chunk-JOA72Z5J.js";
import {
  require_eventemitter3
} from "./chunk-PSN4PERT.js";
import {
  require_react
} from "./chunk-DTW63AUM.js";
import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/@web3-onboard/react/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js
var require_use_sync_external_store_shim_production_min = __commonJS({
  "node_modules/@web3-onboard/react/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js"(exports) {
    "use strict";
    var import_dist40 = __toESM(require_dist());
    var import_dist41 = __toESM(require_dist2());
    var import_dist42 = __toESM(require_dist3());
    var e = require_react();
    function h(a, b) {
      return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
    }
    var k = "function" === typeof Object.is ? Object.is : h;
    var l = e.useState;
    var m = e.useEffect;
    var n = e.useLayoutEffect;
    var p = e.useDebugValue;
    function q(a, b) {
      var d = b(), f = l({ inst: { value: d, getSnapshot: b } }), c = f[0].inst, g = f[1];
      n(function() {
        c.value = d;
        c.getSnapshot = b;
        r(c) && g({ inst: c });
      }, [a, d, b]);
      m(function() {
        r(c) && g({ inst: c });
        return a(function() {
          r(c) && g({ inst: c });
        });
      }, [a]);
      p(d);
      return d;
    }
    function r(a) {
      var b = a.getSnapshot;
      a = a.value;
      try {
        var d = b();
        return !k(a, d);
      } catch (f) {
        return true;
      }
    }
    function t(a, b) {
      return b();
    }
    var u = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? t : q;
    exports.useSyncExternalStore = void 0 !== e.useSyncExternalStore ? e.useSyncExternalStore : u;
  }
});

// node_modules/@web3-onboard/react/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/@web3-onboard/react/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    var import_dist40 = __toESM(require_dist());
    var import_dist41 = __toESM(require_dist2());
    var import_dist42 = __toESM(require_dist3());
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React2 = require_react();
        var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useState3 = React2.useState, useEffect = React2.useEffect, useLayoutEffect = React2.useLayoutEffect, useDebugValue = React2.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React2.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState3({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe, value, getSnapshot]);
          useEffect(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            };
            return subscribe(handleStoreChange);
          }, [subscribe]);
          useDebugValue(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore2;
        var useSyncExternalStore$2 = React2.useSyncExternalStore !== void 0 ? React2.useSyncExternalStore : shim;
        exports.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/@web3-onboard/react/node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/@web3-onboard/react/node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    var import_dist40 = __toESM(require_dist());
    var import_dist41 = __toESM(require_dist2());
    var import_dist42 = __toESM(require_dist3());
    if (process.env.NODE_ENV === "production") {
      module.exports = require_use_sync_external_store_shim_production_min();
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/@web3-onboard/react/dist/index.js
var import_dist37 = __toESM(require_dist());
var import_dist38 = __toESM(require_dist2());
var import_dist39 = __toESM(require_dist3());

// node_modules/@web3-onboard/react/dist/hooks/index.js
var import_dist34 = __toESM(require_dist(), 1);
var import_dist35 = __toESM(require_dist2(), 1);
var import_dist36 = __toESM(require_dist3(), 1);

// node_modules/@web3-onboard/react/dist/hooks/useAccountCenter.js
var import_dist7 = __toESM(require_dist(), 1);
var import_dist8 = __toESM(require_dist2(), 1);
var import_dist9 = __toESM(require_dist3(), 1);

// node_modules/@web3-onboard/react/dist/context.js
var import_dist4 = __toESM(require_dist(), 1);
var import_dist5 = __toESM(require_dist2(), 1);
var import_dist6 = __toESM(require_dist3(), 1);
var React = __toESM(require_react(), 1);

// node_modules/@web3-onboard/react/node_modules/@web3-onboard/core/dist/index.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var import_joi = __toESM(require_joi_browser_min());
var import_lodash = __toESM(require_lodash());
var import_lodash2 = __toESM(require_lodash2());
var import_eventemitter3 = __toESM(require_eventemitter3());

// node_modules/@web3-onboard/react/dist/context.js
var HOOK_ERROR_MESSAGE = "Must call the provided initialization method`init` method before using hooks.";
var web3OnboardGlobal = void 0;
var usingContextProvider = false;
var init2 = (options) => {
  web3OnboardGlobal = init(options);
  return web3OnboardGlobal;
};
var Context = React.createContext(void 0);
function Web3OnboardProvider({ children, web3Onboard }) {
  usingContextProvider = true;
  web3OnboardGlobal = void 0;
  return React.createElement(Context.Provider, { value: web3Onboard }, children);
}
function useWeb3Onboard() {
  const web3Onboard = usingContextProvider ? React.useContext(Context) : web3OnboardGlobal;
  if (!web3Onboard) {
    throw new Error(HOOK_ERROR_MESSAGE);
  }
  return web3Onboard;
}

// node_modules/@web3-onboard/react/dist/hooks/useAccountCenter.js
var useAccountCenter = () => useWeb3Onboard().state.actions.updateAccountCenter;

// node_modules/@web3-onboard/react/dist/hooks/useAppState.js
var import_dist10 = __toESM(require_dist(), 1);
var import_dist11 = __toESM(require_dist2(), 1);
var import_dist12 = __toESM(require_dist3(), 1);
var import_react = __toESM(require_react(), 1);
var import_shim = __toESM(require_shim(), 1);
var useAppState = (stateKey = void 0) => {
  const web3Onboard = useWeb3Onboard();
  const { select, get } = web3Onboard.state;
  const subscribe = (0, import_react.useCallback)((onStoreChange) => {
    const { unsubscribe } = stateKey ? select(stateKey).subscribe(onStoreChange) : select().subscribe(onStoreChange);
    return () => unsubscribe;
  }, [stateKey]);
  const getSnapshot = (0, import_react.useCallback)(() => {
    const snapshot = get();
    return stateKey ? snapshot[stateKey] : snapshot;
  }, [stateKey]);
  const getServerSnapshot = () => getSnapshot();
  return (0, import_shim.useSyncExternalStore)(subscribe, getSnapshot, getServerSnapshot);
};

// node_modules/@web3-onboard/react/dist/hooks/useConnectWallet.js
var import_dist13 = __toESM(require_dist(), 1);
var import_dist14 = __toESM(require_dist2(), 1);
var import_dist15 = __toESM(require_dist3(), 1);
var import_react2 = __toESM(require_react(), 1);
var useConnectWallet = () => {
  const web3Onboard = useWeb3Onboard();
  const { connectWallet, disconnectWallet } = web3Onboard;
  const wallets = useAppState("wallets");
  const wallet = wallets[0] || null;
  const [connecting, setConnecting] = (0, import_react2.useState)(false);
  const connect = (0, import_react2.useCallback)(async (options) => {
    setConnecting(true);
    const walletState = await connectWallet(options);
    setConnecting(false);
    return walletState;
  }, []);
  const disconnect = (0, import_react2.useCallback)(async ({ label }) => {
    setConnecting(true);
    const walletState = await disconnectWallet({ label });
    setConnecting(false);
    return walletState;
  }, []);
  const updateBalances = web3Onboard.state.actions.updateBalances;
  const setWalletModules = web3Onboard.state.actions.setWalletModules;
  const setPrimaryWallet = web3Onboard.state.actions.setPrimaryWallet;
  return [
    { wallet, connecting },
    connect,
    disconnect,
    updateBalances,
    setWalletModules,
    setPrimaryWallet
  ];
};

// node_modules/@web3-onboard/react/dist/hooks/useNotifications.js
var import_dist16 = __toESM(require_dist(), 1);
var import_dist17 = __toESM(require_dist2(), 1);
var import_dist18 = __toESM(require_dist3(), 1);
var useNotifications = () => {
  const web3Onboard = useWeb3Onboard();
  const customNotification = web3Onboard.state.actions.customNotification;
  const updateNotify = web3Onboard.state.actions.updateNotify;
  const preflightNotifications = web3Onboard.state.actions.preflightNotifications;
  return [
    useAppState("notifications"),
    customNotification,
    updateNotify,
    preflightNotifications
  ];
};

// node_modules/@web3-onboard/react/dist/hooks/useSetChain.js
var import_dist19 = __toESM(require_dist(), 1);
var import_dist20 = __toESM(require_dist2(), 1);
var import_dist21 = __toESM(require_dist3(), 1);
var import_react3 = __toESM(require_react(), 1);
var useSetChain = (walletLabel) => {
  const web3Onboard = useWeb3Onboard();
  const { setChain } = web3Onboard;
  const { wallets, chains } = useAppState();
  const getChain = () => {
    const wallet = walletLabel ? wallets.find(({ label }) => label === walletLabel) : wallets[0];
    return wallet && wallet.chains ? wallet.chains[0] : null;
  };
  const connectedChain = getChain();
  const [settingChain, setInProgress] = (0, import_react3.useState)(false);
  const set = (0, import_react3.useCallback)(async (options) => {
    setInProgress(true);
    const success = await setChain({ ...options, wallet: walletLabel });
    setInProgress(false);
    return success;
  }, []);
  return [{ chains, connectedChain, settingChain }, set];
};

// node_modules/@web3-onboard/react/dist/hooks/useSetLocale.js
var import_dist22 = __toESM(require_dist(), 1);
var import_dist23 = __toESM(require_dist2(), 1);
var import_dist24 = __toESM(require_dist3(), 1);
var useSetLocale = () => useWeb3Onboard().state.actions.setLocale;

// node_modules/@web3-onboard/react/dist/hooks/useWallets.js
var import_dist25 = __toESM(require_dist(), 1);
var import_dist26 = __toESM(require_dist2(), 1);
var import_dist27 = __toESM(require_dist3(), 1);
var useWallets = () => useAppState("wallets");

// node_modules/@web3-onboard/react/dist/hooks/useUpdateTheme.js
var import_dist28 = __toESM(require_dist(), 1);
var import_dist29 = __toESM(require_dist2(), 1);
var import_dist30 = __toESM(require_dist3(), 1);
var useUpdateTheme = () => useWeb3Onboard().state.actions.updateTheme;

// node_modules/@web3-onboard/react/dist/hooks/useWagmiConfig.js
var import_dist31 = __toESM(require_dist(), 1);
var import_dist32 = __toESM(require_dist2(), 1);
var import_dist33 = __toESM(require_dist3(), 1);
var useWagmiConfig = () => useAppState("wagmiConfig");

export {
  init2 as init,
  Web3OnboardProvider,
  useAccountCenter,
  useAppState,
  useConnectWallet,
  useNotifications,
  useSetChain,
  useSetLocale,
  useWallets,
  useUpdateTheme,
  useWagmiConfig
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js:
  (**
   * @license React
   * use-sync-external-store-shim.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=chunk-H2JAUWIC.js.map
