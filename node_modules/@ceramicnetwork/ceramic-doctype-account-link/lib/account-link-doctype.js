"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AccountLinkDoctype_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountLinkDoctype = void 0;
const ceramic_common_1 = require("@ceramicnetwork/ceramic-common");
const DOCTYPE = 'account-link';
let AccountLinkDoctype = AccountLinkDoctype_1 = class AccountLinkDoctype extends ceramic_common_1.Doctype {
    async change(params, opts) {
        const { content, metadata } = params;
        const updateRecord = await AccountLinkDoctype_1._makeRecord(this, content, metadata === null || metadata === void 0 ? void 0 : metadata.schema);
        const updated = await this.context.api.applyRecord(this.id.toString(), updateRecord, opts);
        this.state = updated.state;
    }
    static async create(params, context, opts) {
        const { content, metadata } = params;
        const record = await AccountLinkDoctype_1.makeGenesis({ content, metadata });
        return context.api.createDocumentFromGenesis(record, opts);
    }
    static async makeGenesis(params) {
        const { content, metadata } = params;
        if (content) {
            throw new Error('Account link genesis cannot have content');
        }
        if (!metadata) {
            throw new Error('Metadata must be specified');
        }
        if (!metadata.controllers) {
            throw new Error('Controller must be specified');
        }
        if (metadata.controllers.length !== 1) {
            throw new Error('Exactly one controller must be specified');
        }
        const [address, chainId] = metadata.controllers[0].split('@');
        if (!chainId) {
            throw new Error('Chain ID must be specified according to CAIP-10');
        }
        return {
            doctype: DOCTYPE,
            header: metadata,
        };
    }
    static async _makeRecord(doctype, newContent, newSchema = null) {
        const { metadata } = doctype;
        if (newSchema) {
            metadata.schema = newSchema;
        }
        if (newContent == null) {
            newContent = doctype.content;
        }
        return { content: newContent, header: metadata, prev: doctype.head, id: doctype.state.log[0] };
    }
};
AccountLinkDoctype = AccountLinkDoctype_1 = __decorate([
    ceramic_common_1.DoctypeStatic()
], AccountLinkDoctype);
exports.AccountLinkDoctype = AccountLinkDoctype;
//# sourceMappingURL=account-link-doctype.js.map