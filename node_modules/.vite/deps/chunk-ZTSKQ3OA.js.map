{
  "version": 3,
  "sources": ["../../@web3-onboard/walletconnect/dist/index.js", "../../@web3-onboard/walletconnect/dist/validation.js", "../../@web3-onboard/walletconnect/dist/walletConnect.js"],
  "sourcesContent": ["import { validateWCInitOptions } from './validation.js';\nimport walletConnect from './walletConnect.js';\nexport const isHexString = (value) => {\n    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    return true;\n};\nfunction initWalletConnect(options) {\n    if (!options) {\n        throw new Error(`WalletConnect requires an initialization object to be passed - see the official docs for an example: https://onboard.blocknative.com/docs/wallets/walletconnect`);\n    }\n    if (options) {\n        const error = validateWCInitOptions(options);\n        if (error) {\n            throw error;\n        }\n    }\n    return walletConnect(options);\n}\nexport default initWalletConnect;\n", "import Joi from 'joi';\nconst wcOptions = Joi.object({\n    handleUri: Joi.func().optional(),\n    version: Joi.number()\n        .optional()\n        .custom((value, helpers) => {\n        if (value === 1) {\n            console.warn('Version 1 of WalletConnect has been fully deprecated. This version of @web3-onboard/walletconnect only supports version 2');\n        }\n        else if (value !== 2 && value !== undefined) {\n            return helpers.error('any.invalid', {\n                message: 'Invalid version number. This version of @web3-onboard/walletconnect only supports version 2'\n            });\n        }\n        return value; // return the value unchanged if it's valid or not provided\n    }, 'Custom version validation'),\n    projectId: Joi.string().messages({\n        'any.required': `WalletConnect version 2 requires a projectId. Please visit https://cloud.walletconnect.com to get one.`\n    }),\n    dappUrl: Joi.string()\n        .optional()\n        .custom((value, helpers) => {\n        if (!value) {\n            return helpers.message({\n                message: 'It is strongly recommended to supply a dappUrl as it is required by some wallets (i.e. MetaMask) to allow connection.',\n                type: 'any.custom'\n            });\n        }\n        return value; // return the value unchanged if it's provided\n    }, 'Custom dappUrl validation'),\n    requiredChains: Joi.array().items(Joi.number()).optional(),\n    optionalChains: Joi.array().items(Joi.number()).optional(),\n    qrModalOptions: Joi.object().optional(),\n    additionalRequiredMethods: Joi.array().items(Joi.string()).optional(),\n    additionalOptionalMethods: Joi.array().items(Joi.string()).optional()\n});\nconst validate = (validator, data) => {\n    const result = validator.validate(data);\n    return result.error ? result : null;\n};\nexport const validateWCInitOptions = (data) => {\n    return validate(wcOptions, data);\n};\n", "import { isHexString } from './index.js';\n// methods that require user interaction\nconst methods = [\n    'eth_sendTransaction',\n    'eth_signTransaction',\n    'personal_sign',\n    'eth_sign',\n    'eth_signTypedData',\n    'eth_signTypedData_v4',\n    'wallet_addEthereumChain',\n    'wallet_switchEthereumChain'\n];\nfunction walletConnect(options) {\n    if (!options.projectId) {\n        throw new Error('WalletConnect requires a projectId. Please visit https://cloud.walletconnect.com to get one.');\n    }\n    if (!options.dappUrl) {\n        console.warn(`It is strongly recommended to supply a dappUrl to the WalletConnect init object as it is required by some wallets (i.e. MetaMask) to allow connection.`);\n    }\n    const { projectId, handleUri, requiredChains, optionalChains, qrModalOptions, additionalRequiredMethods, additionalOptionalMethods, dappUrl } = options;\n    let instance;\n    return () => {\n        return {\n            label: 'WalletConnect',\n            getIcon: async () => (await import('./icon.js')).default,\n            getInterface: async ({ chains, EventEmitter, appMetadata }) => {\n                const { ProviderRpcError, ProviderRpcErrorCode } = await import('@web3-onboard/common');\n                const { default: EthereumProvider, REQUIRED_METHODS } = await import('@walletconnect/ethereum-provider');\n                const { Subject, fromEvent } = await import('rxjs');\n                const { takeUntil, take } = await import('rxjs/operators');\n                const getMetaData = () => {\n                    if (!appMetadata)\n                        return undefined;\n                    const url = dappUrl || appMetadata.explore || '';\n                    !url &&\n                        !url.length &&\n                        console.warn(`It is strongly recommended to supply a dappUrl as it is required by some wallets (i.e. MetaMask) to allow connection.`);\n                    const wcMetaData = {\n                        name: appMetadata.name,\n                        description: appMetadata.description || '',\n                        url,\n                        icons: []\n                    };\n                    if (appMetadata.icon !== undefined && appMetadata.icon.length) {\n                        wcMetaData.icons = [appMetadata.icon];\n                    }\n                    if (appMetadata.logo !== undefined && appMetadata.logo.length) {\n                        wcMetaData.icons = wcMetaData.icons.length\n                            ? [...wcMetaData.icons, appMetadata.logo]\n                            : [appMetadata.logo];\n                    }\n                    return wcMetaData;\n                };\n                // default to mainnet\n                const requiredChainsParsed = Array.isArray(requiredChains) &&\n                    requiredChains.length &&\n                    requiredChains.every(num => !isNaN(num))\n                    ? // @ts-ignore\n                        // Required as WC package does not support hex numbers\n                        requiredChains.map(chainID => parseInt(chainID))\n                    : [];\n                // Defaults to the chains provided within the web3-onboard init chain property\n                const optionalChainsParsed = Array.isArray(optionalChains) &&\n                    optionalChains.length &&\n                    optionalChains.every(num => !isNaN(num))\n                    ? // @ts-ignore\n                        // Required as WC package does not support hex numbers\n                        optionalChains.map(chainID => parseInt(chainID))\n                    : chains.map(({ id }) => parseInt(id, 16));\n                const requiredMethodsSet = new Set(additionalRequiredMethods && Array.isArray(additionalRequiredMethods)\n                    ? [...additionalRequiredMethods, ...REQUIRED_METHODS]\n                    : REQUIRED_METHODS);\n                const requiredMethods = Array.from(requiredMethodsSet);\n                const optionalMethods = additionalOptionalMethods && Array.isArray(additionalOptionalMethods)\n                    ? [...additionalOptionalMethods, ...methods]\n                    : methods;\n                const connector = await EthereumProvider.init({\n                    projectId,\n                    chains: requiredChainsParsed, // default to mainnet\n                    methods: requiredMethods,\n                    optionalChains: optionalChainsParsed,\n                    optionalMethods,\n                    showQrModal: true,\n                    rpcMap: chains\n                        .map(({ id, rpcUrl }) => ({ id, rpcUrl }))\n                        .reduce((rpcMap, { id, rpcUrl }) => {\n                        rpcMap[parseInt(id, 16)] = rpcUrl || '';\n                        return rpcMap;\n                    }, {}),\n                    metadata: getMetaData(),\n                    qrModalOptions: qrModalOptions\n                });\n                const emitter = new EventEmitter();\n                class EthProvider {\n                    constructor({ connector, chains }) {\n                        this.emit = emitter.emit.bind(emitter);\n                        this.on = emitter.on.bind(emitter);\n                        this.removeListener = emitter.removeListener.bind(emitter);\n                        this.connector = connector;\n                        this.chains = chains;\n                        this.disconnected$ = new Subject();\n                        // listen for accountsChanged\n                        fromEvent(this.connector, 'accountsChanged', payload => payload)\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: payload => {\n                                const accounts = Array.isArray(payload) ? payload : [payload];\n                                this.emit('accountsChanged', accounts);\n                            },\n                            error: console.warn\n                        });\n                        // listen for chainChanged\n                        fromEvent(this.connector, 'chainChanged', (payload) => payload)\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: chainId => {\n                                const hexChainId = isHexString(chainId)\n                                    ? chainId\n                                    : `0x${chainId.toString(16)}`;\n                                this.emit('chainChanged', hexChainId);\n                            },\n                            error: console.warn\n                        });\n                        // listen for disconnect event\n                        fromEvent(this.connector, 'session_delete', (payload) => payload)\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: () => {\n                                this.emit('accountsChanged', []);\n                                this.disconnected$.next(true);\n                                typeof localStorage !== 'undefined' &&\n                                    localStorage.removeItem('walletconnect');\n                            },\n                            error: console.warn\n                        });\n                        this.disconnect = () => {\n                            if (this.connector.session) {\n                                this.connector.disconnect();\n                                instance = null;\n                            }\n                        };\n                        if (options && handleUri) {\n                            // listen for uri event\n                            fromEvent(this.connector, 'display_uri', (payload) => payload)\n                                .pipe(takeUntil(this.disconnected$))\n                                .subscribe(async (uri) => {\n                                try {\n                                    handleUri && (await handleUri(uri));\n                                }\n                                catch (error) {\n                                    throw `An error occurred when handling the URI. Error: ${error}`;\n                                }\n                            });\n                        }\n                        const checkForSession = () => {\n                            const session = this.connector.session;\n                            instance = session;\n                            if (session) {\n                                this.emit('accountsChanged', this.connector.accounts);\n                                this.emit('chainChanged', this.connector.chainId);\n                            }\n                        };\n                        checkForSession();\n                        this.request = async ({ method, params }) => {\n                            if (method === 'eth_chainId') {\n                                return isHexString(this.connector.chainId)\n                                    ? this.connector.chainId\n                                    : `0x${this.connector.chainId.toString(16)}`;\n                            }\n                            if (method === 'eth_requestAccounts') {\n                                return new Promise(async (resolve, reject) => {\n                                    // Subscribe to connection events\n                                    fromEvent(this.connector, 'connect', (payload) => payload)\n                                        .pipe(take(1))\n                                        .subscribe({\n                                        next: ({ chainId }) => {\n                                            this.emit('accountsChanged', this.connector.accounts);\n                                            const hexChainId = isHexString(chainId)\n                                                ? chainId\n                                                : `0x${chainId.toString(16)}`;\n                                            this.emit('chainChanged', hexChainId);\n                                            resolve(this.connector.accounts);\n                                        },\n                                        error: reject\n                                    });\n                                    // Check if connection is already established\n                                    if (!this.connector.session) {\n                                        // create new session\n                                        await this.connector.connect().catch(err => {\n                                            console.error('err creating new session: ', err);\n                                            reject(new ProviderRpcError({\n                                                code: 4001,\n                                                message: 'User rejected the request.'\n                                            }));\n                                        });\n                                    }\n                                    else {\n                                        // update ethereum provider to load accounts & chainId\n                                        const accounts = this.connector.accounts;\n                                        const chainId = this.connector.chainId;\n                                        instance = this.connector.session;\n                                        const hexChainId = `0x${chainId.toString(16)}`;\n                                        this.emit('chainChanged', hexChainId);\n                                        return resolve(accounts);\n                                    }\n                                });\n                            }\n                            if (method === 'eth_selectAccounts') {\n                                throw new ProviderRpcError({\n                                    code: ProviderRpcErrorCode.UNSUPPORTED_METHOD,\n                                    message: `The Provider does not support the requested method: ${method}`\n                                });\n                            }\n                            if (method == 'wallet_switchEthereumChain') {\n                                if (!params) {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.INVALID_PARAMS,\n                                        message: `The Provider requires a chainId to be passed in as an argument`\n                                    });\n                                }\n                                const chainIdObj = params[0];\n                                if (!chainIdObj.hasOwnProperty('chainId') ||\n                                    typeof chainIdObj['chainId'] === 'undefined') {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.INVALID_PARAMS,\n                                        message: `The Provider requires a chainId to be passed in as an argument`\n                                    });\n                                }\n                                return this.connector.request({\n                                    method: 'wallet_switchEthereumChain',\n                                    params: [\n                                        {\n                                            chainId: chainIdObj.chainId\n                                        }\n                                    ]\n                                });\n                            }\n                            return this.connector.request({\n                                method,\n                                params\n                            });\n                        };\n                    }\n                }\n                return {\n                    provider: new EthProvider({ chains, connector }),\n                    instance\n                };\n            }\n        };\n    };\n}\nexport default walletConnect;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;;;ACAA;AAAA,IAAAC,eAAA;AAAA,IAAAA,eAAA;AAAA,iBAAgB;AAChB,IAAM,YAAY,WAAAC,QAAI,OAAO;AAAA,EACzB,WAAW,WAAAA,QAAI,KAAK,EAAE,SAAS;AAAA,EAC/B,SAAS,WAAAA,QAAI,OAAO,EACf,SAAS,EACT,OAAO,CAAC,OAAO,YAAY;AAC5B,QAAI,UAAU,GAAG;AACb,cAAQ,KAAK,2HAA2H;AAAA,IAC5I,WACS,UAAU,KAAK,UAAU,QAAW;AACzC,aAAO,QAAQ,MAAM,eAAe;AAAA,QAChC,SAAS;AAAA,MACb,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX,GAAG,2BAA2B;AAAA,EAC9B,WAAW,WAAAA,QAAI,OAAO,EAAE,SAAS;AAAA,IAC7B,gBAAgB;AAAA,EACpB,CAAC;AAAA,EACD,SAAS,WAAAA,QAAI,OAAO,EACf,SAAS,EACT,OAAO,CAAC,OAAO,YAAY;AAC5B,QAAI,CAAC,OAAO;AACR,aAAO,QAAQ,QAAQ;AAAA,QACnB,SAAS;AAAA,QACT,MAAM;AAAA,MACV,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX,GAAG,2BAA2B;AAAA,EAC9B,gBAAgB,WAAAA,QAAI,MAAM,EAAE,MAAM,WAAAA,QAAI,OAAO,CAAC,EAAE,SAAS;AAAA,EACzD,gBAAgB,WAAAA,QAAI,MAAM,EAAE,MAAM,WAAAA,QAAI,OAAO,CAAC,EAAE,SAAS;AAAA,EACzD,gBAAgB,WAAAA,QAAI,OAAO,EAAE,SAAS;AAAA,EACtC,2BAA2B,WAAAA,QAAI,MAAM,EAAE,MAAM,WAAAA,QAAI,OAAO,CAAC,EAAE,SAAS;AAAA,EACpE,2BAA2B,WAAAA,QAAI,MAAM,EAAE,MAAM,WAAAA,QAAI,OAAO,CAAC,EAAE,SAAS;AACxE,CAAC;AACD,IAAM,WAAW,CAAC,WAAW,SAAS;AAClC,QAAM,SAAS,UAAU,SAAS,IAAI;AACtC,SAAO,OAAO,QAAQ,SAAS;AACnC;AACO,IAAM,wBAAwB,CAAC,SAAS;AAC3C,SAAO,SAAS,WAAW,IAAI;AACnC;;;AC1CA,IAAAC,eAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAEA,IAAM,UAAU;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AACA,SAAS,cAAc,SAAS;AAC5B,MAAI,CAAC,QAAQ,WAAW;AACpB,UAAM,IAAI,MAAM,8FAA8F;AAAA,EAClH;AACA,MAAI,CAAC,QAAQ,SAAS;AAClB,YAAQ,KAAK,wJAAwJ;AAAA,EACzK;AACA,QAAM,EAAE,WAAW,WAAW,gBAAgB,gBAAgB,gBAAgB,2BAA2B,2BAA2B,QAAQ,IAAI;AAChJ,MAAI;AACJ,SAAO,MAAM;AACT,WAAO;AAAA,MACH,OAAO;AAAA,MACP,SAAS,aAAa,MAAM,OAAO,oBAAW,GAAG;AAAA,MACjD,cAAc,OAAO,EAAE,QAAQ,cAAc,YAAY,MAAM;AAC3D,cAAM,EAAE,kBAAkB,qBAAqB,IAAI,MAAM,OAAO,oBAAsB;AACtF,cAAM,EAAE,SAAS,kBAAkB,iBAAiB,IAAI,MAAM,OAAO,wBAAkC;AACvG,cAAM,EAAE,SAAS,UAAU,IAAI,MAAM,OAAO,oBAAM;AAClD,cAAM,EAAE,WAAW,KAAK,IAAI,MAAM,OAAO,yBAAgB;AACzD,cAAM,cAAc,MAAM;AACtB,cAAI,CAAC;AACD,mBAAO;AACX,gBAAM,MAAM,WAAW,YAAY,WAAW;AAC9C,WAAC,OACG,CAAC,IAAI,UACL,QAAQ,KAAK,uHAAuH;AACxI,gBAAM,aAAa;AAAA,YACf,MAAM,YAAY;AAAA,YAClB,aAAa,YAAY,eAAe;AAAA,YACxC;AAAA,YACA,OAAO,CAAC;AAAA,UACZ;AACA,cAAI,YAAY,SAAS,UAAa,YAAY,KAAK,QAAQ;AAC3D,uBAAW,QAAQ,CAAC,YAAY,IAAI;AAAA,UACxC;AACA,cAAI,YAAY,SAAS,UAAa,YAAY,KAAK,QAAQ;AAC3D,uBAAW,QAAQ,WAAW,MAAM,SAC9B,CAAC,GAAG,WAAW,OAAO,YAAY,IAAI,IACtC,CAAC,YAAY,IAAI;AAAA,UAC3B;AACA,iBAAO;AAAA,QACX;AAEA,cAAM,uBAAuB,MAAM,QAAQ,cAAc,KACrD,eAAe,UACf,eAAe,MAAM,SAAO,CAAC,MAAM,GAAG,CAAC;AAAA;AAAA;AAAA,UAGnC,eAAe,IAAI,aAAW,SAAS,OAAO,CAAC;AAAA,YACjD,CAAC;AAEP,cAAM,uBAAuB,MAAM,QAAQ,cAAc,KACrD,eAAe,UACf,eAAe,MAAM,SAAO,CAAC,MAAM,GAAG,CAAC;AAAA;AAAA;AAAA,UAGnC,eAAe,IAAI,aAAW,SAAS,OAAO,CAAC;AAAA,YACjD,OAAO,IAAI,CAAC,EAAE,GAAG,MAAM,SAAS,IAAI,EAAE,CAAC;AAC7C,cAAM,qBAAqB,IAAI,IAAI,6BAA6B,MAAM,QAAQ,yBAAyB,IACjG,CAAC,GAAG,2BAA2B,GAAG,gBAAgB,IAClD,gBAAgB;AACtB,cAAM,kBAAkB,MAAM,KAAK,kBAAkB;AACrD,cAAM,kBAAkB,6BAA6B,MAAM,QAAQ,yBAAyB,IACtF,CAAC,GAAG,2BAA2B,GAAG,OAAO,IACzC;AACN,cAAM,YAAY,MAAM,iBAAiB,KAAK;AAAA,UAC1C;AAAA,UACA,QAAQ;AAAA;AAAA,UACR,SAAS;AAAA,UACT,gBAAgB;AAAA,UAChB;AAAA,UACA,aAAa;AAAA,UACb,QAAQ,OACH,IAAI,CAAC,EAAE,IAAI,OAAO,OAAO,EAAE,IAAI,OAAO,EAAE,EACxC,OAAO,CAAC,QAAQ,EAAE,IAAI,OAAO,MAAM;AACpC,mBAAO,SAAS,IAAI,EAAE,CAAC,IAAI,UAAU;AACrC,mBAAO;AAAA,UACX,GAAG,CAAC,CAAC;AAAA,UACL,UAAU,YAAY;AAAA,UACtB;AAAA,QACJ,CAAC;AACD,cAAM,UAAU,IAAI,aAAa;AAAA,QACjC,MAAM,YAAY;AAAA,UACd,YAAY,EAAE,WAAAC,YAAW,QAAAC,QAAO,GAAG;AAC/B,iBAAK,OAAO,QAAQ,KAAK,KAAK,OAAO;AACrC,iBAAK,KAAK,QAAQ,GAAG,KAAK,OAAO;AACjC,iBAAK,iBAAiB,QAAQ,eAAe,KAAK,OAAO;AACzD,iBAAK,YAAYD;AACjB,iBAAK,SAASC;AACd,iBAAK,gBAAgB,IAAI,QAAQ;AAEjC,sBAAU,KAAK,WAAW,mBAAmB,aAAW,OAAO,EAC1D,KAAK,UAAU,KAAK,aAAa,CAAC,EAClC,UAAU;AAAA,cACX,MAAM,aAAW;AACb,sBAAM,WAAW,MAAM,QAAQ,OAAO,IAAI,UAAU,CAAC,OAAO;AAC5D,qBAAK,KAAK,mBAAmB,QAAQ;AAAA,cACzC;AAAA,cACA,OAAO,QAAQ;AAAA,YACnB,CAAC;AAED,sBAAU,KAAK,WAAW,gBAAgB,CAAC,YAAY,OAAO,EACzD,KAAK,UAAU,KAAK,aAAa,CAAC,EAClC,UAAU;AAAA,cACX,MAAM,aAAW;AACb,sBAAM,aAAa,YAAY,OAAO,IAChC,UACA,KAAK,QAAQ,SAAS,EAAE,CAAC;AAC/B,qBAAK,KAAK,gBAAgB,UAAU;AAAA,cACxC;AAAA,cACA,OAAO,QAAQ;AAAA,YACnB,CAAC;AAED,sBAAU,KAAK,WAAW,kBAAkB,CAAC,YAAY,OAAO,EAC3D,KAAK,UAAU,KAAK,aAAa,CAAC,EAClC,UAAU;AAAA,cACX,MAAM,MAAM;AACR,qBAAK,KAAK,mBAAmB,CAAC,CAAC;AAC/B,qBAAK,cAAc,KAAK,IAAI;AAC5B,uBAAO,iBAAiB,eACpB,aAAa,WAAW,eAAe;AAAA,cAC/C;AAAA,cACA,OAAO,QAAQ;AAAA,YACnB,CAAC;AACD,iBAAK,aAAa,MAAM;AACpB,kBAAI,KAAK,UAAU,SAAS;AACxB,qBAAK,UAAU,WAAW;AAC1B,2BAAW;AAAA,cACf;AAAA,YACJ;AACA,gBAAI,WAAW,WAAW;AAEtB,wBAAU,KAAK,WAAW,eAAe,CAAC,YAAY,OAAO,EACxD,KAAK,UAAU,KAAK,aAAa,CAAC,EAClC,UAAU,OAAO,QAAQ;AAC1B,oBAAI;AACA,+BAAc,MAAM,UAAU,GAAG;AAAA,gBACrC,SACO,OAAO;AACV,wBAAM,mDAAmD,KAAK;AAAA,gBAClE;AAAA,cACJ,CAAC;AAAA,YACL;AACA,kBAAM,kBAAkB,MAAM;AAC1B,oBAAM,UAAU,KAAK,UAAU;AAC/B,yBAAW;AACX,kBAAI,SAAS;AACT,qBAAK,KAAK,mBAAmB,KAAK,UAAU,QAAQ;AACpD,qBAAK,KAAK,gBAAgB,KAAK,UAAU,OAAO;AAAA,cACpD;AAAA,YACJ;AACA,4BAAgB;AAChB,iBAAK,UAAU,OAAO,EAAE,QAAQ,OAAO,MAAM;AACzC,kBAAI,WAAW,eAAe;AAC1B,uBAAO,YAAY,KAAK,UAAU,OAAO,IACnC,KAAK,UAAU,UACf,KAAK,KAAK,UAAU,QAAQ,SAAS,EAAE,CAAC;AAAA,cAClD;AACA,kBAAI,WAAW,uBAAuB;AAClC,uBAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAE1C,4BAAU,KAAK,WAAW,WAAW,CAAC,YAAY,OAAO,EACpD,KAAK,KAAK,CAAC,CAAC,EACZ,UAAU;AAAA,oBACX,MAAM,CAAC,EAAE,QAAQ,MAAM;AACnB,2BAAK,KAAK,mBAAmB,KAAK,UAAU,QAAQ;AACpD,4BAAM,aAAa,YAAY,OAAO,IAChC,UACA,KAAK,QAAQ,SAAS,EAAE,CAAC;AAC/B,2BAAK,KAAK,gBAAgB,UAAU;AACpC,8BAAQ,KAAK,UAAU,QAAQ;AAAA,oBACnC;AAAA,oBACA,OAAO;AAAA,kBACX,CAAC;AAED,sBAAI,CAAC,KAAK,UAAU,SAAS;AAEzB,0BAAM,KAAK,UAAU,QAAQ,EAAE,MAAM,SAAO;AACxC,8BAAQ,MAAM,8BAA8B,GAAG;AAC/C,6BAAO,IAAI,iBAAiB;AAAA,wBACxB,MAAM;AAAA,wBACN,SAAS;AAAA,sBACb,CAAC,CAAC;AAAA,oBACN,CAAC;AAAA,kBACL,OACK;AAED,0BAAM,WAAW,KAAK,UAAU;AAChC,0BAAM,UAAU,KAAK,UAAU;AAC/B,+BAAW,KAAK,UAAU;AAC1B,0BAAM,aAAa,KAAK,QAAQ,SAAS,EAAE,CAAC;AAC5C,yBAAK,KAAK,gBAAgB,UAAU;AACpC,2BAAO,QAAQ,QAAQ;AAAA,kBAC3B;AAAA,gBACJ,CAAC;AAAA,cACL;AACA,kBAAI,WAAW,sBAAsB;AACjC,sBAAM,IAAI,iBAAiB;AAAA,kBACvB,MAAM,qBAAqB;AAAA,kBAC3B,SAAS,uDAAuD,MAAM;AAAA,gBAC1E,CAAC;AAAA,cACL;AACA,kBAAI,UAAU,8BAA8B;AACxC,oBAAI,CAAC,QAAQ;AACT,wBAAM,IAAI,iBAAiB;AAAA,oBACvB,MAAM,qBAAqB;AAAA,oBAC3B,SAAS;AAAA,kBACb,CAAC;AAAA,gBACL;AACA,sBAAM,aAAa,OAAO,CAAC;AAC3B,oBAAI,CAAC,WAAW,eAAe,SAAS,KACpC,OAAO,WAAW,SAAS,MAAM,aAAa;AAC9C,wBAAM,IAAI,iBAAiB;AAAA,oBACvB,MAAM,qBAAqB;AAAA,oBAC3B,SAAS;AAAA,kBACb,CAAC;AAAA,gBACL;AACA,uBAAO,KAAK,UAAU,QAAQ;AAAA,kBAC1B,QAAQ;AAAA,kBACR,QAAQ;AAAA,oBACJ;AAAA,sBACI,SAAS,WAAW;AAAA,oBACxB;AAAA,kBACJ;AAAA,gBACJ,CAAC;AAAA,cACL;AACA,qBAAO,KAAK,UAAU,QAAQ;AAAA,gBAC1B;AAAA,gBACA;AAAA,cACJ,CAAC;AAAA,YACL;AAAA,UACJ;AAAA,QACJ;AACA,eAAO;AAAA,UACH,UAAU,IAAI,YAAY,EAAE,QAAQ,UAAU,CAAC;AAAA,UAC/C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,IAAO,wBAAQ;;;AF1PR,IAAM,cAAc,CAAC,UAAU;AAClC,MAAI,OAAO,UAAU,YAAY,CAAC,MAAM,MAAM,kBAAkB,GAAG;AAC/D,WAAO;AAAA,EACX;AACA,SAAO;AACX;AACA,SAAS,kBAAkB,SAAS;AAChC,MAAI,CAAC,SAAS;AACV,UAAM,IAAI,MAAM,iKAAiK;AAAA,EACrL;AACA,MAAI,SAAS;AACT,UAAM,QAAQ,sBAAsB,OAAO;AAC3C,QAAI,OAAO;AACP,YAAM;AAAA,IACV;AAAA,EACJ;AACA,SAAO,sBAAc,OAAO;AAChC;AACA,IAAO,eAAQ;",
  "names": ["import_dist", "import_dist", "Joi", "import_dist", "connector", "chains"]
}
