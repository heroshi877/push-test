"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const wallet_1 = require("@ethersproject/wallet");
const contracts_1 = require("@ethersproject/contracts");
const providers = __importStar(require("@ethersproject/providers"));
const caip_1 = require("caip");
const js_sha256_1 = require("js-sha256");
const uint8arrays = __importStar(require("uint8arrays"));
const ADDRESS_TYPES = {
    ethereumEOA: 'ethereum-eoa',
    erc1271: 'erc1271'
};
const ERC1271_ABI = ['function isValidSignature(bytes _messageHash, bytes _signature) public view returns (bytes4 magicValue)'];
const MAGIC_ERC1271_VALUE = '0x20c13b0b';
const isEthAddress = (address) => /^0x[a-fA-F0-9]{40}$/.test(address);
const namespace = 'eip155';
function normalizeAccountId(account) {
    account.address = account.address.toLowerCase();
    return account;
}
function utf8toHex(message) {
    const bytes = uint8arrays.fromString(message);
    const hex = uint8arrays.toString(bytes, 'base16');
    return '0x' + hex;
}
function safeSend(data, provider) {
    return __awaiter(this, void 0, void 0, function* () {
        const send = (provider.sendAsync ? provider.sendAsync : provider.send).bind(provider);
        return new Promise((resolve, reject) => {
            send(data, function (err, result) {
                if (err)
                    reject(err);
                else if (result.error)
                    reject(result.error);
                else
                    resolve(result.result);
            });
        });
    });
}
function getEthersProvider(chainId) {
    const network = providers.getNetwork(chainId);
    if (!network._defaultProvider)
        throw new Error(`Network with chainId ${chainId} is not supported`);
    return network._defaultProvider(providers);
}
function getCode(address, provider) {
    return __awaiter(this, void 0, void 0, function* () {
        const payload = utils_1.encodeRpcMessage('eth_getCode', [address, 'latest']);
        const code = yield safeSend(payload, provider);
        return code;
    });
}
function validateChainId(account, provider) {
    return __awaiter(this, void 0, void 0, function* () {
        const payload = utils_1.encodeRpcMessage('eth_chainId', []);
        const chainIdHex = yield safeSend(payload, provider);
        const chainId = parseInt(chainIdHex, 16);
        if (chainId !== parseInt(account.chainId.reference)) {
            throw new Error(`ChainId in provider (${chainId}) is different from AccountID (${account.chainId.reference})`);
        }
    });
}
function createEthLink(did, account, provider, opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { message, timestamp } = utils_1.getConsentMessage(did, !opts.skipTimestamp);
        const hexMessage = utf8toHex(message);
        const payload = utils_1.encodeRpcMessage('personal_sign', [hexMessage, account.address]);
        const signature = yield safeSend(payload, provider);
        const proof = {
            version: 2,
            type: ADDRESS_TYPES.ethereumEOA,
            message,
            signature,
            account: account.toString()
        };
        if (!opts.skipTimestamp)
            proof.timestamp = timestamp;
        return proof;
    });
}
function createErc1271Link(did, account, provider, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const ethLinkAccount = (opts === null || opts === void 0 ? void 0 : opts.eoaSignAccount) || account;
        const res = yield createEthLink(did, ethLinkAccount, provider, opts);
        yield validateChainId(account, provider);
        return Object.assign(res, {
            type: ADDRESS_TYPES.erc1271,
            account: account.toString()
        });
    });
}
function isERC1271(account, provider) {
    return __awaiter(this, void 0, void 0, function* () {
        const bytecode = yield getCode(account.address, provider).catch(() => null);
        return Boolean(bytecode && bytecode !== '0x' && bytecode !== '0x0' && bytecode !== '0x00');
    });
}
function createLink(did, account, provider, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        account = normalizeAccountId(account);
        if (yield isERC1271(account, provider)) {
            return createErc1271Link(did, account, provider, opts);
        }
        else {
            return createEthLink(did, account, provider, opts);
        }
    });
}
function toV2Proof(proof, address) {
    proof.account = new caip_1.AccountID({
        address: ((proof.version === 1) ? proof.address : address) || '',
        chainId: { namespace, reference: proof.chainId ? proof.chainId.toString() : '1' }
    }).toString();
    delete proof.address;
    delete proof.chainId;
    proof.version = 2;
    return proof;
}
function validateEoaLink(proof) {
    return __awaiter(this, void 0, void 0, function* () {
        const recoveredAddr = wallet_1.verifyMessage(proof.message, proof.signature).toLowerCase();
        if (proof.version !== 2)
            proof = toV2Proof(proof, recoveredAddr);
        const account = new caip_1.AccountID(proof.account);
        if (account.address !== recoveredAddr) {
            return null;
        }
        return proof;
    });
}
function validateErc1271Link(proof) {
    return __awaiter(this, void 0, void 0, function* () {
        if (proof.version === 1)
            proof = toV2Proof(proof);
        const account = new caip_1.AccountID(proof.account);
        const provider = getEthersProvider(account.chainId.reference);
        const contract = new contracts_1.Contract(account.address, ERC1271_ABI, provider);
        const message = utf8toHex(proof.message);
        const returnValue = yield contract.isValidSignature(message, proof.signature);
        return returnValue === MAGIC_ERC1271_VALUE ? proof : null;
    });
}
function validateLink(proof) {
    return __awaiter(this, void 0, void 0, function* () {
        if (proof.type === ADDRESS_TYPES.erc1271) {
            return validateErc1271Link(proof);
        }
        return validateEoaLink(proof);
    });
}
function authenticate(message, account, provider) {
    return __awaiter(this, void 0, void 0, function* () {
        if (account)
            account = normalizeAccountId(account);
        if (provider.isAuthereum)
            return provider.signMessageWithSigningKey(message);
        const hexMessage = utf8toHex(message);
        const payload = utils_1.encodeRpcMessage('personal_sign', [hexMessage, account.address]);
        const signature = yield safeSend(payload, provider);
        if (account) {
            const recoveredAddr = wallet_1.verifyMessage(message, signature).toLowerCase();
            if (account.address !== recoveredAddr)
                throw new Error('Provider returned signature from different account than requested');
        }
        return `0x${js_sha256_1.sha256(signature.slice(2))}`;
    });
}
exports.default = {
    authenticate,
    validateLink,
    createLink,
    namespace,
    isERC1271,
    isEthAddress
};
//# sourceMappingURL=ethereum.js.map