"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var TileDoctype_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TileDoctype = void 0;
const fast_json_patch_1 = __importDefault(require("fast-json-patch"));
const base64_1 = require("@ethersproject/base64");
const random_1 = require("@ethersproject/random");
const ceramic_common_1 = require("@ceramicnetwork/ceramic-common");
const DOCTYPE = 'tile';
let TileDoctype = TileDoctype_1 = class TileDoctype extends ceramic_common_1.Doctype {
    async change(params, opts = {}) {
        var _a, _b;
        if (this.context.did == null) {
            throw new Error('No DID authenticated');
        }
        const updateRecord = await TileDoctype_1._makeRecord(this, this.context.did, params.content, (_a = params.metadata) === null || _a === void 0 ? void 0 : _a.controllers, (_b = params.metadata) === null || _b === void 0 ? void 0 : _b.schema);
        const updated = await this.context.api.applyRecord(this.id.toString(), updateRecord, opts);
        this.state = updated.state;
    }
    static async create(params, context, opts) {
        if (context.did == null) {
            throw new Error('No DID authenticated');
        }
        const { content, metadata } = params;
        const record = await TileDoctype_1.makeGenesis({ content, metadata }, context, opts);
        return context.api.createDocumentFromGenesis(record, opts);
    }
    static async makeGenesis(params, context, opts = {}) {
        const metadata = params.metadata ? params.metadata : { controllers: [] };
        if (!context.did || !context.did.authenticated) {
            throw new Error('No DID authenticated');
        }
        let unique;
        if (metadata.isUnique) {
            unique = base64_1.encode(random_1.randomBytes(12));
        }
        const { controllers } = metadata;
        if (!controllers || controllers.length === 0) {
            metadata.controllers = [context.did.id];
        }
        const { content } = params;
        const record = { doctype: DOCTYPE, data: content, header: metadata, unique };
        return content ? TileDoctype_1._signDagJWS(record, context.did, metadata.controllers[0]) : record;
    }
    static async _makeRecord(doctype, did, newContent, newControllers, schema) {
        if (did == null || !did.authenticated) {
            throw new Error('No DID authenticated');
        }
        const header = {};
        if (schema) {
            header.schema = schema;
        }
        if (newControllers) {
            header.controllers = newControllers;
        }
        const nonce = TileDoctype_1._calculateNonce(doctype);
        if (nonce != null) {
            header.nonce = nonce;
        }
        if (newContent == null) {
            newContent = doctype.content;
        }
        const patch = fast_json_patch_1.default.compare(doctype.content, newContent);
        const willSquash = header.nonce && header.nonce > 0;
        const prev = doctype.state.log[doctype.state.log.length - 1 - (willSquash ? 1 : 0)];
        const record = { header, data: patch, prev, id: doctype.state.log[0] };
        return TileDoctype_1._signDagJWS(record, did, doctype.controllers[0]);
    }
    static _calculateNonce(doctype) {
        var _a;
        if (!doctype.state.next) {
            return null;
        }
        return (((_a = doctype.state.next.metadata) === null || _a === void 0 ? void 0 : _a.nonce) || 0) + 1;
    }
    static async _signDagJWS(record, did, controller) {
        if (did == null || !did.authenticated) {
            throw new Error('No user authenticated');
        }
        return did.createDagJWS(record, { did: controller });
    }
};
TileDoctype = TileDoctype_1 = __decorate([
    ceramic_common_1.DoctypeStatic()
], TileDoctype);
exports.TileDoctype = TileDoctype;
//# sourceMappingURL=tile-doctype.js.map