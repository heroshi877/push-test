"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoctypeStatic = exports.Doctype = exports.AnchorStatus = exports.SignatureStatus = void 0;
const lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
const events_1 = require("events");
const docid_1 = __importDefault(require("@ceramicnetwork/docid"));
var SignatureStatus;
(function (SignatureStatus) {
    SignatureStatus[SignatureStatus["GENESIS"] = 0] = "GENESIS";
    SignatureStatus[SignatureStatus["PARTIAL"] = 1] = "PARTIAL";
    SignatureStatus[SignatureStatus["SIGNED"] = 2] = "SIGNED";
})(SignatureStatus = exports.SignatureStatus || (exports.SignatureStatus = {}));
var AnchorStatus;
(function (AnchorStatus) {
    AnchorStatus[AnchorStatus["NOT_REQUESTED"] = 0] = "NOT_REQUESTED";
    AnchorStatus[AnchorStatus["PENDING"] = 1] = "PENDING";
    AnchorStatus[AnchorStatus["PROCESSING"] = 2] = "PROCESSING";
    AnchorStatus[AnchorStatus["ANCHORED"] = 3] = "ANCHORED";
    AnchorStatus[AnchorStatus["FAILED"] = 4] = "FAILED";
})(AnchorStatus = exports.AnchorStatus || (exports.AnchorStatus = {}));
class Doctype extends events_1.EventEmitter {
    constructor(_state, _context) {
        super();
        this._state = _state;
        this._context = _context;
    }
    get id() {
        return new docid_1.default(this._state.doctype, this._state.log[0]);
    }
    get doctype() {
        return this._state.doctype;
    }
    get content() {
        var _a;
        const { next, content } = this._state;
        return lodash_clonedeep_1.default((_a = next === null || next === void 0 ? void 0 : next.content) !== null && _a !== void 0 ? _a : content);
    }
    get metadata() {
        var _a;
        const { next, metadata } = this._state;
        return lodash_clonedeep_1.default((_a = next === null || next === void 0 ? void 0 : next.metadata) !== null && _a !== void 0 ? _a : metadata);
    }
    get controllers() {
        return this.metadata.controllers;
    }
    get head() {
        return this._state.log[this._state.log.length - 1];
    }
    get state() {
        return lodash_clonedeep_1.default(this._state);
    }
    set state(state) {
        this._state = state;
    }
    set context(context) {
        this._context = context;
    }
    get context() {
        return this._context;
    }
}
exports.Doctype = Doctype;
function DoctypeStatic() {
    return (constructor) => { constructor; };
}
exports.DoctypeStatic = DoctypeStatic;
//# sourceMappingURL=doctype.js.map