"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _store;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LevelStateStore = void 0;
const level_ts_1 = __importDefault(require("level-ts"));
const ceramic_common_1 = require("@ceramicnetwork/ceramic-common");
class LevelStateStore {
    constructor(storePath) {
        this.storePath = storePath;
        _store.set(this, void 0);
    }
    get store() {
        return __classPrivateFieldGet(this, _store);
    }
    async open() {
        __classPrivateFieldSet(this, _store, new level_ts_1.default(this.storePath));
    }
    async save(document) {
        await __classPrivateFieldGet(this, _store).put(document.id.baseID.toString(), ceramic_common_1.DoctypeUtils.serializeState(document.state));
    }
    async load(docId) {
        try {
            const state = await __classPrivateFieldGet(this, _store).get(docId.baseID.toString());
            if (state) {
                return ceramic_common_1.DoctypeUtils.deserializeState(state);
            }
            else {
                return null;
            }
        }
        catch (err) {
            if (err.notFound) {
                return null;
            }
            throw err;
        }
    }
    async exists(docId) {
        const state = await this.load(docId.baseID);
        return Boolean(state);
    }
    async remove(docId) {
        const isPresent = await this.exists(docId.baseID);
        if (isPresent) {
            await __classPrivateFieldGet(this, _store).del(docId.baseID.toString());
        }
    }
    async list(docId) {
        let docIds;
        if (docId == null) {
            return __classPrivateFieldGet(this, _store).stream({ keys: true, values: false });
        }
        else {
            const exists = await this.exists(docId.baseID);
            docIds = exists ? [docId.toString()] : [];
        }
        return docIds;
    }
    async close() {
    }
}
exports.LevelStateStore = LevelStateStore;
_store = new WeakMap();
//# sourceMappingURL=level-state-store.js.map