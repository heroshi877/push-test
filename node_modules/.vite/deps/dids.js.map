{
  "version": 3,
  "sources": ["../../did-resolver/src/resolver.ts", "../../dids/node_modules/rpc-utils/src/error.ts", "../../dids/node_modules/rpc-utils/src/client.ts", "../../dids/node_modules/rpc-utils/node_modules/babel-plugin-transform-async-to-promises/helpers.js", "../../dids/node_modules/rpc-utils/src/server.ts", "../../did-jwt/node_modules/uint8arrays/compare.js", "../../did-jwt/node_modules/uint8arrays/concat.js", "../../did-jwt/node_modules/uint8arrays/equals.js", "../../did-jwt/node_modules/uint8arrays/util/bases.js", "../../did-jwt/node_modules/uint8arrays/from-string.js", "../../did-jwt/node_modules/uint8arrays/to-string.js", "../../did-jwt/node_modules/uint8arrays/xor.js", "../../did-jwt/node_modules/uint8arrays/index.js", "../../@stablelib/xchacha20/xchacha20.ts", "../../@stablelib/xchacha20poly1305/xchacha20poly1305.ts", "../../did-jwt/src/util.ts", "../../did-jwt/src/Digest.ts", "../../did-jwt/src/signers/ES256KSigner.ts", "../../did-jwt/src/signers/EdDSASigner.ts", "../../did-jwt/src/VerifierAlgorithm.ts", "../../did-jwt/src/SignerAlgorithm.ts", "../../did-jwt/src/JWT.ts", "../../did-jwt/src/JWE.ts", "../../did-jwt/src/xc20pEncryption.ts", "../../did-jwt/src/signers/EllipticSigner.ts", "../../did-jwt/src/signers/NaclSigner.ts", "../../did-jwt/src/signers/SimpleSigner.ts", "../../ieee754/index.js", "../../borc/src/decoder.asm.js", "../../borc/src/constants.js", "../../borc/src/utils.js", "../../borc/src/simple.js", "../../borc/src/tagged.js", "../../borc/node_modules/iso-url/src/url-browser.js", "../../borc/node_modules/iso-url/src/relative.js", "../../borc/node_modules/iso-url/index.js", "../../borc/src/decoder.js", "../../borc/src/diagnose.js", "../../borc/src/encoder.js", "../../borc/src/index.js", "../../murmurhash3js-revisited/lib/murmurHash3js.js", "../../murmurhash3js-revisited/index.js", "../../multihashing-async/src/sha.browser.js", "../../multihashing-async/src/utils.js", "../../blakejs/util.js", "../../blakejs/blake2b.js", "../../blakejs/blake2s.js", "../../blakejs/index.js", "../../multihashing-async/src/blake.js", "../../multihashing-async/src/crypto.js", "../../multihashing-async/src/index.js", "../../is-circular/lib/node.js", "../../is-circular/index.js", "../../ipld-dag-cbor/node_modules/uint8arrays/concat.js", "../../ipld-dag-cbor/node_modules/uint8arrays/util/bases.js", "../../ipld-dag-cbor/node_modules/uint8arrays/from-string.js", "../../ipld-dag-cbor/src/util.js", "../../ipld-dag-cbor/src/resolver.js", "../../ipld-dag-cbor/src/index.js", "../../dids/node_modules/dag-jose-utils/node_modules/uint8arrays/compare.js", "../../dids/node_modules/dag-jose-utils/node_modules/uint8arrays/concat.js", "../../dids/node_modules/dag-jose-utils/node_modules/uint8arrays/equals.js", "../../dids/node_modules/dag-jose-utils/node_modules/uint8arrays/util/bases.js", "../../dids/node_modules/dag-jose-utils/node_modules/uint8arrays/from-string.js", "../../dids/node_modules/dag-jose-utils/node_modules/uint8arrays/to-string.js", "../../dids/node_modules/dag-jose-utils/node_modules/uint8arrays/xor.js", "../../dids/node_modules/dag-jose-utils/node_modules/uint8arrays/index.js", "../../dids/node_modules/dag-jose-utils/src/index.ts", "../../dids/node_modules/uint8arrays/compare.js", "../../dids/node_modules/uint8arrays/concat.js", "../../dids/node_modules/uint8arrays/equals.js", "../../web-encoding/src/lib.js", "../../multibase/src/util.js", "../../multibase/src/base.js", "../../multibase/src/rfc4648.js", "../../multibase/src/constants.js", "../../dids/node_modules/uint8arrays/from-string.js", "../../dids/node_modules/uint8arrays/to-string.js", "../../dids/node_modules/uint8arrays/index.js", "../../dids/src/utils.ts", "../../dids/src/index.ts"],
  "sourcesContent": ["// Copyright 2018 ConsenSys AG\n\n// Licensed under the Apache License, Version 2.0(the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n// http://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport interface DIDDocument {\n  '@context': 'https://w3id.org/did/v1' | string | string[]\n  id: string\n  publicKey: PublicKey[]\n  authentication?: (string | PublicKey | Authentication)[]\n  /**\n   * @deprecated This does not appear in the did-core spec\n   */\n  uportProfile?: any\n  service?: ServiceEndpoint[]\n  /**\n   * @deprecated this property has been removed from the did-core spec\n   */\n  created?: string\n  /**\n   * @deprecated this property has been removed from the did-core spec\n   */\n  updated?: string\n  /**\n   * @deprecated this property has been removed from the did-core spec\n   */\n  proof?: LinkedDataProof\n  keyAgreement?: (string | PublicKey)[]\n}\n\nexport interface ServiceEndpoint {\n  id: string\n  type: string\n  serviceEndpoint: string\n  description?: string\n}\n\ninterface JsonWebKey {\n  alg?: string\n  crv?: string\n  e?: string\n  ext?: boolean\n  key_ops?: string[]\n  kid?: string\n  kty: string\n  n?: string\n  use?: string\n  x?: string\n  y?: string\n  [x: string]: any\n}\n\nexport interface PublicKey {\n  id: string\n  type: string\n  controller: string\n  ethereumAddress?: string\n  publicKeyBase64?: string\n  publicKeyBase58?: string\n  publicKeyHex?: string\n  publicKeyPem?: string\n  publicKeyJwk?: JsonWebKey\n}\n\n/**\n * @deprecated The `authentication` array should be an array of strings or `PublicKey`\n */\nexport interface Authentication {\n  type: string\n  publicKey: string\n}\n\nexport interface LinkedDataProof {\n  type: string\n  created: string\n  creator: string\n  nonce: string\n  signatureValue: string\n}\n\nexport interface Params {\n  [index: string]: string\n}\n\nexport interface ParsedDID {\n  did: string\n  didUrl: string\n  method: string\n  id: string\n  path?: string\n  fragment?: string\n  query?: string\n  params?: Params\n}\n\nexport type DIDResolver = (\n  did: string,\n  parsed: ParsedDID,\n  resolver: Resolver\n) => Promise<null | DIDDocument>\nexport type WrappedResolver = () => Promise<null | DIDDocument>\nexport type DIDCache = (\n  parsed: ParsedDID,\n  resolve: WrappedResolver\n) => Promise<null | DIDDocument>\n\ninterface ResolverRegistry {\n  [index: string]: DIDResolver\n}\n\nexport function inMemoryCache(): DIDCache {\n  const cache: Map<string, DIDDocument | null> = new Map()\n  return async (parsed, resolve) => {\n    if (parsed.params && parsed.params['no-cache'] === 'true')\n      return await resolve()\n\n    const cached = cache.get(parsed.did)\n    if (cached !== undefined) return cached\n    const doc = await resolve()\n    if (doc !== null) {\n      cache.set(parsed.did, doc)\n    }\n    return doc\n  }\n}\n\nexport function noCache(\n  parsed: ParsedDID,\n  resolve: WrappedResolver\n): Promise<null | DIDDocument> {\n  return resolve()\n}\n\nconst ID_CHAR = '[a-zA-Z0-9_.-]'\nconst METHOD = '([a-zA-Z0-9_]+)'\nconst METHOD_ID = `(${ID_CHAR}+(:${ID_CHAR}+)*)`\nconst PARAM_CHAR = '[a-zA-Z0-9_.:%-]'\nconst PARAM = `;${PARAM_CHAR}+=${PARAM_CHAR}*`\nconst PARAMS = `((${PARAM})*)`\nconst PATH = `(\\/[^#?]*)?`\nconst QUERY = `([?][^#]*)?`\nconst FRAGMENT = `(\\#.*)?`\nconst DID_MATCHER = new RegExp(\n  `^did:${METHOD}:${METHOD_ID}${PARAMS}${PATH}${QUERY}${FRAGMENT}$`\n)\nexport function parse(didUrl: string): ParsedDID {\n  if (didUrl === '' || !didUrl) throw new Error('Missing DID')\n  const sections = didUrl.match(DID_MATCHER)\n  if (sections) {\n    const parts: ParsedDID = {\n      did: `did:${sections[1]}:${sections[2]}`,\n      method: sections[1],\n      id: sections[2],\n      didUrl\n    }\n    if (sections[4]) {\n      const params = sections[4].slice(1).split(';')\n      parts.params = {}\n      for (const p of params) {\n        const kv = p.split('=')\n        parts.params[kv[0]] = kv[1]\n      }\n    }\n    if (sections[6]) parts.path = sections[6]\n    if (sections[7]) parts.query = sections[7].slice(1)\n    if (sections[8]) parts.fragment = sections[8].slice(1)\n    return parts\n  }\n  throw new Error(`Invalid DID ${didUrl}`)\n}\n\nexport class Resolver {\n  private registry: ResolverRegistry\n  private cache: DIDCache\n\n  constructor(\n    registry: ResolverRegistry = {},\n    cache?: DIDCache | boolean | undefined\n  ) {\n    this.registry = registry\n    this.cache = cache === true ? inMemoryCache() : cache || noCache\n  }\n\n  async resolve(didUrl: string): Promise<DIDDocument> {\n    const parsed = parse(didUrl)\n    const resolver = this.registry[parsed.method]\n    if (resolver) {\n      const doc = await this.cache(parsed, () =>\n        resolver(parsed.did, parsed, this)\n      )\n      if (doc == null) {\n        throw new Error(`resolver returned null for ${parsed.did}`)\n      } else {\n        return doc\n      }\n    }\n    throw new Error(`Unsupported DID method: '${parsed.method}'`)\n  }\n}\n", "import { RPCErrorObject } from './types'\n\nexport enum ERROR_CODE {\n  PARSE_ERROR = -32700,\n  INVALID_REQUEST = -32600,\n  METHOD_NOT_FOUND = -32601,\n  INVALID_PARAMS = -32602,\n  INTERNAL_ERROR = -32603\n}\n\nexport const ERROR_MESSAGE: Record<string, string> = {\n  [ERROR_CODE.PARSE_ERROR]: 'Parse error',\n  [ERROR_CODE.INVALID_REQUEST]: 'Invalid request',\n  [ERROR_CODE.METHOD_NOT_FOUND]: 'Method not found',\n  [ERROR_CODE.INVALID_PARAMS]: 'Invalid params',\n  [ERROR_CODE.INTERNAL_ERROR]: 'Internal error'\n}\n\nexport function isServerError(code: number): boolean {\n  return -32000 >= code && code >= -32099\n}\n\nexport function getErrorMessage(code: number): string {\n  return (\n    ERROR_MESSAGE[code.toString()] ?? (isServerError(code) ? 'Server error' : 'Application error')\n  )\n}\n\nexport class RPCError<T = any> extends Error {\n  public static fromObject<D = any>(err: RPCErrorObject<D>): RPCError<D> {\n    return new RPCError<D>(err.code, err.message, err.data)\n  }\n\n  public code: number\n  public data: T | undefined\n  public message: string\n\n  public constructor(code: number, message?: string | undefined, data?: T | undefined) {\n    super()\n    Object.setPrototypeOf(this, RPCError.prototype)\n\n    this.code = code\n    this.data = data\n    this.message = message ?? getErrorMessage(code)\n  }\n\n  public toObject(): RPCErrorObject<T> {\n    return {\n      code: this.code,\n      data: this.data,\n      message: this.message\n    }\n  }\n}\n\nfunction createErrorFactory(code: ERROR_CODE): <T>(data?: T) => RPCError<T> {\n  const message = ERROR_MESSAGE[code]\n  return function createError<T = any>(data?: T): RPCError<T> {\n    return new RPCError<T>(code, message, data)\n  }\n}\n\nexport const createParseError = createErrorFactory(ERROR_CODE.PARSE_ERROR)\nexport const createInvalidRequest = createErrorFactory(ERROR_CODE.INVALID_REQUEST)\nexport const createMethodNotFound = createErrorFactory(ERROR_CODE.METHOD_NOT_FOUND)\nexport const createInvalidParams = createErrorFactory(ERROR_CODE.INVALID_PARAMS)\nexport const createInternalError = createErrorFactory(ERROR_CODE.INTERNAL_ERROR)\n", "import { nanoid } from 'nanoid'\n\nimport { RPCError } from './error'\nimport { RPCConnection } from './types'\n\nexport class RPCClient {\n  public connection: RPCConnection\n\n  constructor(connection: RPCConnection) {\n    this.connection = connection\n  }\n\n  public createID(): string {\n    return nanoid()\n  }\n\n  public async request<P = any, R = any>(method: string, params?: P): Promise<R> {\n    const res = await this.connection.send<P, R>({\n      jsonrpc: '2.0',\n      id: this.createID(),\n      method,\n      params\n    })\n    if (res == null) {\n      throw new Error('Missing response')\n    }\n    if (res.error != null) {\n      throw RPCError.fromObject(res.error)\n    }\n    return res.result as R\n  }\n}\n", "// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n", "import { ERROR_CODE, RPCError, createParseError, getErrorMessage } from './error'\nimport { RPCRequest, RPCResponse } from './types'\n\nexport type ErrorHandler<C = any> = <P = any>(ctx: C, req: RPCRequest<P>, error: Error) => void\n\nexport type MethodHandler<C = any, P = any, R = any> = (ctx: C, params: P) => R | Promise<R>\n\nexport type NotificationHandler<C = any> = <P = any>(ctx: C, req: RPCRequest<P>) => void\n\nexport type HandlerMethods<C = any> = Record<string, MethodHandler<C>>\n\nexport interface HandlerOptions<C = any> {\n  onHandlerError?: ErrorHandler<C>\n  onInvalidMessage?: NotificationHandler<C>\n  onNotification?: NotificationHandler<C>\n}\n\nexport type RequestHandler<C = any> = <P = any, R = any, E = any>(\n  ctx: C,\n  msg: RPCRequest<P>\n) => Promise<RPCResponse<R, E> | null>\n\nexport function parseJSON<T = any>(input: string): T {\n  try {\n    return JSON.parse(input)\n  } catch (err) {\n    throw createParseError()\n  }\n}\n\nexport function createErrorResponse<R, E>(id: number | string, code: number): RPCResponse<R, E> {\n  return {\n    jsonrpc: '2.0',\n    id,\n    error: { code, message: getErrorMessage(code) }\n  }\n}\n\nfunction fallbackOnHandlerError<C = any, P = any>(_ctx: C, msg: RPCRequest<P>, error: Error): void {\n  // eslint-disable-next-line no-console\n  console.warn('Unhandled handler error', msg, error)\n}\n\nfunction fallbackOnInvalidMessage<C = any, P = any>(_ctx: C, msg: RPCRequest<P>): void {\n  // eslint-disable-next-line no-console\n  console.warn('Unhandled invalid message', msg)\n}\n\nfunction fallbackOnNotification<C = any, P = any>(_ctx: C, msg: RPCRequest<P>): void {\n  // eslint-disable-next-line no-console\n  console.warn('Unhandled notification', msg)\n}\n\nexport function createHandler<C = any>(\n  methods: HandlerMethods<C>,\n  options: HandlerOptions<C> = {}\n): RequestHandler<C> {\n  const onHandlerError = options.onHandlerError ?? fallbackOnHandlerError\n  const onInvalidMessage = options.onInvalidMessage ?? fallbackOnInvalidMessage\n  const onNotification = options.onNotification ?? fallbackOnNotification\n\n  return async function handleRequest<P = any, R = any, E = any>(\n    ctx: C,\n    msg: RPCRequest<P>\n  ): Promise<RPCResponse<R, E> | null> {\n    const id = msg.id\n\n    if (msg.jsonrpc !== '2.0' || msg.method == null) {\n      if (id == null) {\n        onInvalidMessage(ctx, msg)\n        return null\n      }\n      return createErrorResponse(id, ERROR_CODE.INVALID_REQUEST)\n    }\n\n    if (id == null) {\n      onNotification(ctx, msg)\n      return null\n    }\n\n    const handler = methods[msg.method]\n    if (handler == null) {\n      return createErrorResponse(id, ERROR_CODE.METHOD_NOT_FOUND)\n    }\n\n    try {\n      const handled = handler(ctx, msg.params ?? {})\n      const result = typeof handled.then === 'function' ? await handled : handled\n      return { jsonrpc: '2.0', id, result }\n    } catch (err) {\n      let error\n      if (err instanceof RPCError) {\n        error = err.toObject()\n      } else {\n        onHandlerError(ctx, msg, err)\n        const code = err.code ?? -32000 // Server error\n        error = { code, message: err.message || getErrorMessage(code) }\n      }\n      return { jsonrpc: '2.0', id, error }\n    }\n  }\n}\n", "'use strict'\n\n/**\n * Can be used with Array.sort to sort and array with Uint8Array entries\n *\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n */\nfunction compare (a, b) {\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] < b[i]) {\n      return -1\n    }\n\n    if (a[i] > b[i]) {\n      return 1\n    }\n  }\n\n  if (a.byteLength > b.byteLength) {\n    return 1\n  }\n\n  if (a.byteLength < b.byteLength) {\n    return -1\n  }\n\n  return 0\n}\n\nmodule.exports = compare\n", "'use strict'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n *\n * @param {Array<ArrayLike<number>>} arrays\n * @param {number} [length]\n */\nfunction concat (arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = concat\n", "'use strict'\n\n/**\n * Returns true if the two passed Uint8Arrays have the same content\n *\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n */\nfunction equals (a, b) {\n  if (a === b) {\n    return true\n  }\n\n  if (a.byteLength !== b.byteLength) {\n    return false\n  }\n\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nmodule.exports = equals\n", "  'use strict'\n\nconst { bases } = require('multiformats/basics')\n\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n/**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */\nfunction createCodec (name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = new Uint8Array(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */\n\n/**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */\nconst BASES = {\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii,\n\n  ...bases\n}\n\nmodule.exports = BASES\n", "'use strict'\n\nconst bases = require('./util/bases')\n\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\nfunction fromString (string, encoding = 'utf8') {\n  const base = bases[encoding]\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`)\n}\n\nmodule.exports = fromString\n", "'use strict'\n\nconst bases = require('./util/bases')\n\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\n * @returns {string}\n */\nfunction toString (array, encoding = 'utf8') {\n  const base = bases[encoding]\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n\nmodule.exports = toString\n", "'use strict'\n\n/**\n * Returns the xor distance between two arrays\n *\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n */\nfunction xor (a, b) {\n  if (a.length !== b.length) {\n    throw new Error('Inputs should have the same length')\n  }\n\n  const result = new Uint8Array(a.length)\n\n  for (let i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ b[i]\n  }\n\n  return result\n}\n\nmodule.exports = xor\n", "'use strict'\nconst compare = require('./compare')\nconst concat = require('./concat')\nconst equals = require('./equals')\nconst fromString = require('./from-string')\nconst toString = require('./to-string')\nconst xor = require('./xor')\n\nmodule.exports = {\n  compare,\n  concat,\n  equals,\n  fromString,\n  toString,\n  xor\n}\n", "// Copyright (C) 2019 Kyle Den Hartog\n// MIT License. See LICENSE file for details.\n\n/**\n * Package xchacha20 implements XChaCha20 stream cipher.\n */\n\nimport { writeUint32LE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\nimport { streamXOR as chachaStreamXOR } from \"@stablelib/chacha\";\n\n// Number of ChaCha rounds (ChaCha20).\nconst ROUNDS = 20;\n\n/**\n * Encrypt src with XChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * Nonce length is set in such a way that given it's generated via a CSPRNG\n * then there's little concern of collision for roughly 2^96 messages while\n * reusing a secret key and not encountering nonce reuse vulnerabilities.\n */\nexport function streamXOR(key: Uint8Array, nonce: Uint8Array, src: Uint8Array,\n    dst: Uint8Array): Uint8Array {\n    if (nonce.length !== 24) {\n        throw new Error(\"XChaCha20 nonce must be 24 bytes\");\n    }\n\n    // Use HChaCha one-way function to transform first 16 bytes of\n    // 24-byte extended nonce and key into a new key for Salsa\n    // stream -- \"subkey\".\n    const subkey = hchacha(key, nonce.subarray(0, 16), new Uint8Array(32));\n\n\n    // Use last 8 bytes of 24-byte extended nonce as an actual nonce prefixed by 4 zero bytes,\n    // and a subkey derived in the previous step as key to encrypt.\n    const modifiedNonce = new Uint8Array(12);\n    modifiedNonce.set(nonce.subarray(16), 4);\n    // If nonceInplaceCounterLength > 0, we'll still pass the correct\n    // nonce || counter, as we don't limit the end of nonce subarray.\n    const result = chachaStreamXOR(subkey, modifiedNonce, src, dst);\n\n    // Clean subkey.\n    wipe(subkey);\n\n    return result;\n}\n\n/**\n * Generate XChaCha20 stream for the given 32-byte key and 12-byte\n * nonce (last 8 bytes of 24 byte nonce prefixed with 4 zero bytes)\n * and write it into dst and return it.\n *\n * Nonces MUST be generated using an CSPRNG to generate a sufficiently\n * random nonce such that a collision is highly unlikely to occur.\n *\n * stream is like streamXOR with all-zero src.\n */\nexport function stream(key: Uint8Array, nonce: Uint8Array,\n    dst: Uint8Array): Uint8Array {\n    wipe(dst);\n    return streamXOR(key, nonce, dst, dst);\n}\n\n/**\n * HChaCha is a one-way function used in XChaCha to extend nonce.\n *\n * It takes 32-byte key and 16-byte src and writes 32-byte result\n * into dst and returns it.\n */\nexport function hchacha(\n    key: Uint8Array,\n    src: Uint8Array,\n    dst: Uint8Array\n): Uint8Array {\n    let j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n    let j1 = 0x3320646e; // \"nd 3\"     for 32-byte keys\n    let j2 = 0x79622d32; // \"2-by\"\n    let j3 = 0x6b206574; // \"te k\"\n    let j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];\n    let j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];\n    let j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];\n    let j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];\n    let j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];\n    let j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];\n    let j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];\n    let j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];\n    let j12 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];\n    let j13 = (src[7] << 24) | (src[6] << 16) | (src[5] << 8) | src[4];\n    let j14 = (src[11] << 24) | (src[10] << 16) | (src[9] << 8) | src[8];\n    let j15 = (src[15] << 24) | (src[14] << 16) | (src[13] << 8) | src[12];\n\n    let x0 = j0;\n    let x1 = j1;\n    let x2 = j2;\n    let x3 = j3;\n    let x4 = j4;\n    let x5 = j5;\n    let x6 = j6;\n    let x7 = j7;\n    let x8 = j8;\n    let x9 = j9;\n    let x10 = j10;\n    let x11 = j11;\n    let x12 = j12;\n    let x13 = j13;\n    let x14 = j14;\n    let x15 = j15;\n\n    for (let i = 0; i < ROUNDS; i += 2) {\n        x0 = (x0 + x4) | 0;\n        x12 ^= x0;\n        x12 = (x12 >>> (32 - 16)) | (x12 << 16);\n        x8 = (x8 + x12) | 0;\n        x4 ^= x8;\n        x4 = (x4 >>> (32 - 12)) | (x4 << 12);\n        x1 = (x1 + x5) | 0;\n        x13 ^= x1;\n        x13 = (x13 >>> (32 - 16)) | (x13 << 16);\n        x9 = (x9 + x13) | 0;\n        x5 ^= x9;\n        x5 = (x5 >>> (32 - 12)) | (x5 << 12);\n\n        x2 = (x2 + x6) | 0;\n        x14 ^= x2;\n        x14 = (x14 >>> (32 - 16)) | (x14 << 16);\n        x10 = (x10 + x14) | 0;\n        x6 ^= x10;\n        x6 = (x6 >>> (32 - 12)) | (x6 << 12);\n        x3 = (x3 + x7) | 0;\n        x15 ^= x3;\n        x15 = (x15 >>> (32 - 16)) | (x15 << 16);\n        x11 = (x11 + x15) | 0;\n        x7 ^= x11;\n        x7 = (x7 >>> (32 - 12)) | (x7 << 12);\n\n        x2 = (x2 + x6) | 0;\n        x14 ^= x2;\n        x14 = (x14 >>> (32 - 8)) | (x14 << 8);\n        x10 = (x10 + x14) | 0;\n        x6 ^= x10;\n        x6 = (x6 >>> (32 - 7)) | (x6 << 7);\n        x3 = (x3 + x7) | 0;\n        x15 ^= x3;\n        x15 = (x15 >>> (32 - 8)) | (x15 << 8);\n        x11 = (x11 + x15) | 0;\n        x7 ^= x11;\n        x7 = (x7 >>> (32 - 7)) | (x7 << 7);\n\n        x1 = (x1 + x5) | 0;\n        x13 ^= x1;\n        x13 = (x13 >>> (32 - 8)) | (x13 << 8);\n        x9 = (x9 + x13) | 0;\n        x5 ^= x9;\n        x5 = (x5 >>> (32 - 7)) | (x5 << 7);\n        x0 = (x0 + x4) | 0;\n        x12 ^= x0;\n        x12 = (x12 >>> (32 - 8)) | (x12 << 8);\n        x8 = (x8 + x12) | 0;\n        x4 ^= x8;\n        x4 = (x4 >>> (32 - 7)) | (x4 << 7);\n\n        x0 = (x0 + x5) | 0;\n        x15 ^= x0;\n        x15 = (x15 >>> (32 - 16)) | (x15 << 16);\n        x10 = (x10 + x15) | 0;\n        x5 ^= x10;\n        x5 = (x5 >>> (32 - 12)) | (x5 << 12);\n        x1 = (x1 + x6) | 0;\n        x12 ^= x1;\n        x12 = (x12 >>> (32 - 16)) | (x12 << 16);\n        x11 = (x11 + x12) | 0;\n        x6 ^= x11;\n        x6 = (x6 >>> (32 - 12)) | (x6 << 12);\n\n        x2 = (x2 + x7) | 0;\n        x13 ^= x2;\n        x13 = (x13 >>> (32 - 16)) | (x13 << 16);\n        x8 = (x8 + x13) | 0;\n        x7 ^= x8;\n        x7 = (x7 >>> (32 - 12)) | (x7 << 12);\n        x3 = (x3 + x4) | 0;\n        x14 ^= x3;\n        x14 = (x14 >>> (32 - 16)) | (x14 << 16);\n        x9 = (x9 + x14) | 0;\n        x4 ^= x9;\n        x4 = (x4 >>> (32 - 12)) | (x4 << 12);\n\n        x2 = (x2 + x7) | 0;\n        x13 ^= x2;\n        x13 = (x13 >>> (32 - 8)) | (x13 << 8);\n        x8 = (x8 + x13) | 0;\n        x7 ^= x8;\n        x7 = (x7 >>> (32 - 7)) | (x7 << 7);\n        x3 = (x3 + x4) | 0;\n        x14 ^= x3;\n        x14 = (x14 >>> (32 - 8)) | (x14 << 8);\n        x9 = (x9 + x14) | 0;\n        x4 ^= x9;\n        x4 = (x4 >>> (32 - 7)) | (x4 << 7);\n\n        x1 = (x1 + x6) | 0;\n        x12 ^= x1;\n        x12 = (x12 >>> (32 - 8)) | (x12 << 8);\n        x11 = (x11 + x12) | 0;\n        x6 ^= x11;\n        x6 = (x6 >>> (32 - 7)) | (x6 << 7);\n        x0 = (x0 + x5) | 0;\n        x15 ^= x0;\n        x15 = (x15 >>> (32 - 8)) | (x15 << 8);\n        x10 = (x10 + x15) | 0;\n        x5 ^= x10;\n        x5 = (x5 >>> (32 - 7)) | (x5 << 7);\n    }\n    writeUint32LE(x0, dst, 0);\n    writeUint32LE(x1, dst, 4);\n    writeUint32LE(x2, dst, 8);\n    writeUint32LE(x3, dst, 12);\n    writeUint32LE(x12, dst, 16);\n    writeUint32LE(x13, dst, 20);\n    writeUint32LE(x14, dst, 24);\n    writeUint32LE(x15, dst, 28);\n    return dst;\n}\n", "// Copyright (C) 2019 Kyle Den Hartog\n// MIT License. See LICENSE file for details.\n\n/**\n * Package xchacha20poly1305 implements XChaCha20-Poly1305 AEAD.\n */\n\nimport { AEAD } from \"@stablelib/aead\";\nimport { hchacha } from \"@stablelib/xchacha20\";\nimport { ChaCha20Poly1305 } from \"@stablelib/chacha20poly1305\";\nimport { wipe } from \"@stablelib/wipe\";\n\nexport const KEY_LENGTH = 32;\nexport const NONCE_LENGTH = 24;\nexport const TAG_LENGTH = 16;\n\n/**\n * XChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in draft-irtf-cfrg-xchacha-01.\n * See https://tools.ietf.org/html/draft-irtf-cfrg-xchacha-01\n */\nexport class XChaCha20Poly1305 implements AEAD {\n  readonly nonceLength = NONCE_LENGTH;\n  readonly tagLength = TAG_LENGTH;\n\n  private _key: Uint8Array;\n\n  /**\n   * Creates a new instance with the given 32-byte key.\n   */\n  constructor(key: Uint8Array) {\n    if (key.length !== KEY_LENGTH) {\n      throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n    }\n    // Copy key.\n    this._key = new Uint8Array(key);\n  }\n\n  /**\n   * Encrypts and authenticates plaintext, authenticates associated data,\n   * and returns sealed ciphertext, which includes authentication tag.\n   *\n   * draft-irtf-cfrg-xchacha-01 defines a 24 byte nonce (192 bits) which\n   * uses the first 16 bytes of the nonce and the secret key with\n   * HChaCha to generate an initial subkey. The last 8 bytes of the nonce\n   * are then prefixed with 4 zero bytes and then provided with the subkey\n   * to the ChaCha20Poly1305 implementation.\n   *\n   * If dst is given (it must be the size of plaintext + the size of tag\n   * length) the result will be put into it. Dst and plaintext must not\n   * overlap.\n   */\n  seal(\n    nonce: Uint8Array,\n    plaintext: Uint8Array,\n    associatedData?: Uint8Array,\n    dst?: Uint8Array\n  ): Uint8Array {\n    if (nonce.length !== 24) {\n      throw new Error(\"XChaCha20Poly1305: incorrect nonce length\");\n    }\n    // Use HSalsa one-way function to transform first 16 bytes of\n    // 24-byte extended nonce and key into a new key for Salsa\n    // stream -- \"subkey\".\n    const subKey = hchacha(this._key, nonce.subarray(0, 16), new Uint8Array(32));\n\n\n    // Use last 8 bytes of 24-byte extended nonce as an actual nonce prefixed by 4 zero bytes,\n    // and a subkey derived in the previous step as key to encrypt.\n    const modifiedNonce = new Uint8Array(12);\n    modifiedNonce.set(nonce.subarray(16), 4);\n\n    const chaChaPoly = new ChaCha20Poly1305(subKey);\n    const result = chaChaPoly.seal(modifiedNonce, plaintext, associatedData, dst);\n    wipe(subKey);\n    wipe(modifiedNonce);\n    chaChaPoly.clean();\n    return result;\n  }\n\n  /**\n   * Authenticates sealed ciphertext (which includes authentication tag) and\n   * associated data, decrypts ciphertext and returns decrypted plaintext.\n   *\n   * draft-irtf-cfrg-xchacha-01 defines a 24 byte nonce (192 bits) which\n   * then uses the first 16 bytes of the nonce and the secret key with\n   * Hchacha to generate an initial subkey. The last 8 bytes of the nonce\n   * are then prefixed with 4 zero bytes and then provided with the subkey\n   * to the chacha20poly1305 implementation.\n   *\n   * If authentication fails, it returns null.\n   *\n   * If dst is given (it must be the size of plaintext + the size of tag\n   * length) the result will be put into it. Dst and plaintext must not\n   * overlap.\n   */\n  open(\n    nonce: Uint8Array,\n    sealed: Uint8Array,\n    associatedData?: Uint8Array,\n    dst?: Uint8Array\n  ): Uint8Array | null {\n    if (nonce.length !== 24) {\n      throw new Error(\"XChaCha20Poly1305: incorrect nonce length\");\n    }\n\n    // Sealed ciphertext should at least contain tag.\n    if (sealed.length < this.tagLength) {\n      // TODO(dchest): should we throw here instead?\n      return null;\n    }\n\n    /**\n    * Generate subKey by using HChaCha20 function as defined\n    * in section 2 step 1 of draft-irtf-cfrg-xchacha-01\n    */\n    const subKey = hchacha(\n      this._key,\n      nonce.subarray(0, 16),\n      new Uint8Array(32)\n    );\n\n    /**\n    * Generate Nonce as defined - remaining 8 bytes of the nonce prefixed with\n    * 4 zero bytes\n    */\n    const modifiedNonce = new Uint8Array(12);\n    modifiedNonce.set(nonce.subarray(16), 4);\n\n    /**\n     * Authenticate and decrypt by calling into chacha20poly1305.\n     */\n    const chaChaPoly = new ChaCha20Poly1305(subKey);\n    const result = chaChaPoly.open(modifiedNonce, sealed, associatedData, dst);\n    wipe(subKey);\n    wipe(modifiedNonce);\n    chaChaPoly.clean();\n    return result;\n  }\n\n  clean(): this {\n    wipe(this._key);\n    return this;\n  }\n}\n", "import * as u8a from 'uint8arrays'\n\n/**\n * @deprecated Signers will be expected to return base64url `string` signatures.\n */\nexport interface EcdsaSignature {\n  r: string\n  s: string\n  recoveryParam?: number\n}\n\nexport function bytesToBase64url(b: Uint8Array): string {\n  return u8a.toString(b, 'base64url')\n}\n\nexport function base64ToBytes(s: string): Uint8Array {\n  const inputBase64Url = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  return u8a.fromString(inputBase64Url, 'base64url')\n}\n\nexport function bytesToBase64(b: Uint8Array): string {\n  return u8a.toString(b, 'base64pad')\n}\n\nexport function base58ToBytes(s: string): Uint8Array {\n  return u8a.fromString(s, 'base58btc')\n}\n\nexport function hexToBytes(s: string): Uint8Array {\n  const input = s.startsWith('0x') ? s.substring(2) : s\n  return u8a.fromString(input.toLowerCase(), 'base16')\n}\n\nexport function encodeBase64url(s: string): string {\n  return bytesToBase64url(u8a.fromString(s))\n}\n\nexport function decodeBase64url(s: string): string {\n  return u8a.toString(base64ToBytes(s))\n}\n\nexport function bytesToHex(b: Uint8Array): string {\n  return u8a.toString(b, 'base16')\n}\n\nexport function stringToBytes(s: string): Uint8Array {\n  return u8a.fromString(s)\n}\n\nexport function toJose({ r, s, recoveryParam }: EcdsaSignature, recoverable?: boolean): string {\n  const jose = new Uint8Array(recoverable ? 65 : 64)\n  jose.set(u8a.fromString(r, 'base16'), 0)\n  jose.set(u8a.fromString(s, 'base16'), 32)\n  if (recoverable) {\n    if (recoveryParam === undefined) {\n      throw new Error('Signer did not return a recoveryParam')\n    }\n    jose[64] = recoveryParam\n  }\n  return bytesToBase64url(jose)\n}\n\nexport function fromJose(signature: string): { r: string; s: string; recoveryParam: number } {\n  const signatureBytes: Uint8Array = base64ToBytes(signature)\n  if (signatureBytes.length < 64 || signatureBytes.length > 65) {\n    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`)\n  }\n  const r = bytesToHex(signatureBytes.slice(0, 32))\n  const s = bytesToHex(signatureBytes.slice(32, 64))\n  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined\n  return { r, s, recoveryParam }\n}\n\nexport function toSealed(ciphertext: string, tag: string): Uint8Array {\n  return u8a.concat([base64ToBytes(ciphertext), base64ToBytes(tag)])\n}\n\nconst hexMatcher = /^(0x)?([a-fA-F0-9]{64}|[a-fA-F0-9]{128})$/\nconst base58Matcher = /^([1-9A-HJ-NP-Za-km-z]{44}|[1-9A-HJ-NP-Za-km-z]{88})$/\nconst base64Matcher = /^([0-9a-zA-Z=\\-_\\+\\/]{43}|[0-9a-zA-Z=\\-_\\+\\/]{86})(={0,2})$/\n\n/**\n * Parses a private key and returns the Uint8Array representation.\n * This method uses an heuristic to determine the key encoding to then be able to parse it into 32 or 64 bytes.\n *\n * @param input a 32 or 64 byte key presented either as a Uint8Array or as a hex, base64, or base58btc encoded string\n *\n * @throws TypeError('Invalid private key format') if the key doesn't match any of the accepted formats or length\n */\nexport function parseKey(input: string | Uint8Array): Uint8Array {\n  if (typeof input === 'string') {\n    if (hexMatcher.test(input)) {\n      return hexToBytes(input)\n    } else if (base58Matcher.test(input)) {\n      return base58ToBytes(input)\n    } else if (base64Matcher.test(input)) {\n      return base64ToBytes(input)\n    } else {\n      throw TypeError('Invalid private key format')\n    }\n  } else if (input instanceof Uint8Array) {\n    return input\n  } else {\n    throw TypeError('Invalid private key format')\n  }\n}\n\nexport function leftpad(data: string, size = 64): string {\n  if (data.length === size) return data\n  return '0'.repeat(size - data.length) + data\n}\n", "import { hash } from '@stablelib/sha256'\nimport * as u8a from 'uint8arrays'\nimport { keccak_256 } from 'js-sha3' // eslint-disable-line\n\nexport function sha256(payload: string | Uint8Array): Uint8Array {\n  const data = (typeof payload === 'string') ? u8a.fromString(payload) : payload\n  return hash(data)\n}\n\nexport function keccak(data: Uint8Array): Uint8Array {\n  return new Uint8Array(keccak_256.arrayBuffer(data))\n}\n\nexport function toEthereumAddress(hexPublicKey: string): string {\n  const hashInput = u8a.fromString(hexPublicKey.slice(2), 'base16')\n  return `0x${u8a.toString(keccak(hashInput).slice(-20), 'base16')}`\n}\n\nfunction writeUint32BE(value: number, array = new Uint8Array(4)): Uint8Array {\n  const encoded = u8a.fromString(value.toString(), 'base10')\n  array.set(encoded, 4 - encoded.length)\n  return array\n}\n\nconst lengthAndInput = (input: Uint8Array): Uint8Array => u8a.concat([writeUint32BE(input.length), input])\n\n// This implementation of concatKDF was inspired by these two implementations:\n// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js\n// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js\nexport function concatKDF(secret: Uint8Array, keyLen: number, alg: string): Uint8Array {\n  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`)\n  const value = u8a.concat([\n    lengthAndInput(u8a.fromString(alg)),\n    lengthAndInput(new Uint8Array(0)), // apu\n    lengthAndInput(new Uint8Array(0)), // apv\n    writeUint32BE(keyLen)\n  ])\n  // since our key lenght is 256 we only have to do one round\n  const roundNumber = 1\n  return hash(u8a.concat([ writeUint32BE(roundNumber), secret, value ]))\n}\n", "import { parseKey, leftpad } from '../util'\nimport { toJose } from '../util'\nimport { Signer } from '../JWT'\nimport { sha256 } from '../Digest'\n\nimport { ec as EC, ec } from 'elliptic'\nconst secp256k1: EC = new EC('secp256k1')\n\n/**\n *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string\n *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256KSigner(privateKey: string | Uint8Array, recoverable: boolean = false): Signer {\n  const privateKeyBytes: Uint8Array = parseKey(privateKey)\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n  const keyPair: ec.KeyPair = secp256k1.keyFromPrivate(privateKeyBytes)\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const { r, s, recoveryParam }: EC.Signature = keyPair.sign(sha256(data))\n    return toJose(\n      {\n        r: leftpad(r.toString('hex')),\n        s: leftpad(s.toString('hex')),\n        recoveryParam\n      },\n      recoverable\n    )\n  }\n}\n", "import { sign } from '@stablelib/ed25519'\nimport { Signer } from '../JWT'\nimport { bytesToBase64url, parseKey, stringToBytes } from '../util'\n\n/**\n *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    secretKey   a 64 byte secret key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string\n *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function EdDSASigner(secretKey: string | Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = parseKey(secretKey)\n  if (privateKeyBytes.length !== 64) {\n    throw new Error(`Invalid private key format. Expecting 64 bytes, but got ${privateKeyBytes.length}`)\n  }\n  return async (data: string | Uint8Array): Promise<string> => {\n    const dataBytes: Uint8Array = (typeof data === 'string') ? stringToBytes(data) : data\n    const sig: Uint8Array = sign(privateKeyBytes, dataBytes)\n    return bytesToBase64url(sig)\n  }\n}\n", "import { ec as EC } from 'elliptic'\nimport { sha256, toEthereumAddress } from './Digest'\nimport { verify } from '@stablelib/ed25519'\nimport { PublicKey } from 'did-resolver'\nimport { hexToBytes, base58ToBytes, base64ToBytes, bytesToHex, EcdsaSignature, stringToBytes } from './util'\n\nconst secp256k1 = new EC('secp256k1')\n\n// converts a JOSE signature to it's components\nexport function toSignatureObject(signature: string, recoverable = false): EcdsaSignature {\n  const rawsig: Uint8Array = base64ToBytes(signature)\n  if (rawsig.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length')\n  }\n  const r: string = bytesToHex(rawsig.slice(0, 32))\n  const s: string = bytesToHex(rawsig.slice(32, 64))\n  const sigObj: EcdsaSignature = { r, s }\n  if (recoverable) {\n    sigObj.recoveryParam = rawsig[64]\n  }\n  return sigObj\n}\n\nfunction extractPublicKeyBytes(pk: PublicKey): Uint8Array {\n  if (pk.publicKeyBase58) {\n    return base58ToBytes(pk.publicKeyBase58)\n  } else if (pk.publicKeyBase64) {\n    return base64ToBytes(pk.publicKeyBase64)\n  } else if (pk.publicKeyHex) {\n    return hexToBytes(pk.publicKeyHex)\n  }\n  return new Uint8Array()\n}\n\nexport function verifyES256K(data: string, signature: string, authenticators: PublicKey[]): PublicKey {\n  const hash: Uint8Array = sha256(data)\n  const sigObj: EcdsaSignature = toSignatureObject(signature)\n  const fullPublicKeys = authenticators.filter(({ ethereumAddress }) => {\n    return typeof ethereumAddress === 'undefined'\n  })\n  const ethAddressKeys = authenticators.filter(({ ethereumAddress }) => {\n    return typeof ethereumAddress !== 'undefined'\n  })\n\n  let signer: PublicKey = fullPublicKeys.find((pk: PublicKey) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256k1.keyFromPublic(pubBytes).verify(hash, sigObj)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer && ethAddressKeys.length > 0) {\n    signer = verifyRecoverableES256K(data, signature, ethAddressKeys)\n  }\n\n  if (!signer) throw new Error('Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyRecoverableES256K(data: string, signature: string, authenticators: PublicKey[]): PublicKey {\n  let signatures: EcdsaSignature[]\n  if (signature.length > 86) {\n    signatures = [toSignatureObject(signature, true)]\n  } else {\n    const so = toSignatureObject(signature, false)\n    signatures = [\n      { ...so, recoveryParam: 0 },\n      { ...so, recoveryParam: 1 }\n    ]\n  }\n\n  const checkSignatureAgainstSigner = (sigObj: EcdsaSignature): PublicKey => {\n    const hash: Uint8Array = sha256(data)\n    const recoveredKey: any = secp256k1.recoverPubKey(hash, sigObj, sigObj.recoveryParam)\n    const recoveredPublicKeyHex: string = recoveredKey.encode('hex')\n    const recoveredCompressedPublicKeyHex: string = recoveredKey.encode('hex', true)\n    const recoveredAddress: string = toEthereumAddress(recoveredPublicKeyHex)\n\n    const signer: PublicKey = authenticators.find(\n      ({ publicKeyHex, ethereumAddress }) =>\n        publicKeyHex === recoveredPublicKeyHex ||\n        publicKeyHex === recoveredCompressedPublicKeyHex ||\n        ethereumAddress === recoveredAddress\n    )\n\n    return signer\n  }\n\n  const signer: PublicKey[] = signatures.map(checkSignatureAgainstSigner).filter(key => key != null)\n\n  if (signer.length === 0) throw new Error('Signature invalid for JWT')\n  return signer[0]\n}\n\nexport function verifyEd25519(data: string, signature: string, authenticators: PublicKey[]): PublicKey {\n  const clear: Uint8Array = stringToBytes(data)\n  const sig: Uint8Array = base64ToBytes(signature)\n  const signer: PublicKey = authenticators.find((pk: PublicKey) => {\n    return verify(extractPublicKeyBytes(pk), clear, sig)\n  }\n  )\n  if (!signer) throw new Error('Signature invalid for JWT')\n  return signer\n}\n\ntype Verifier = (data: string, signature: string, authenticators: PublicKey[]) => PublicKey\ninterface Algorithms {\n  [name: string]: Verifier\n}\nconst algorithms: Algorithms = {\n  ES256K: verifyES256K,\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': verifyRecoverableES256K,\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: verifyEd25519,\n  EdDSA: verifyEd25519\n}\n\nfunction VerifierAlgorithm(alg: string): Verifier {\n  const impl: Verifier = algorithms[alg]\n  if (!impl) throw new Error(`Unsupported algorithm ${alg}`)\n  return impl\n}\n\nVerifierAlgorithm.toSignatureObject = toSignatureObject\n\nexport default VerifierAlgorithm\n", "import { Signer, SignerAlgorithm } from './JWT'\nimport { EcdsaSignature, fromJose, toJose } from './util'\n\nfunction instanceOfEcdsaSignature(object: any): object is EcdsaSignature {\n  return typeof object === 'object' && 'r' in object && 's' in object\n}\n\nexport function ES256KSignerAlg(recoverable?: boolean): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature, recoverable)\n    } else {\n      if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') throw new Error(`ES256K-R not supported when signer doesn't provide a recovery param`)\n      return signature\n    }\n  }\n}\n\nexport function Ed25519SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (!instanceOfEcdsaSignature(signature)) {\n      return signature\n    } else {\n      throw new Error('expected a signer function that returns a string instead of signature object')\n    }\n  }\n}\n\ninterface SignerAlgorithms {\n  [alg: string]: SignerAlgorithm\n}\n\nconst algorithms: SignerAlgorithms = {\n  ES256K: ES256KSignerAlg(),\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': ES256KSignerAlg(true),\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: Ed25519SignerAlg(),\n  EdDSA: Ed25519SignerAlg()\n}\n\nfunction SignerAlgorithm(alg: string): SignerAlgorithm {\n  const impl: SignerAlgorithm = algorithms[alg]\n  if (!impl) throw new Error(`Unsupported algorithm ${alg}`)\n  return impl\n}\n\nexport default SignerAlgorithm\n", "import VerifierAlgorithm from './VerifierAlgorithm'\nimport SignerAlgorithm from './SignerAlgorithm'\nimport { encodeBase64url, decodeBase64url, EcdsaSignature } from './util'\nimport { DIDDocument, PublicKey, Authentication } from 'did-resolver'\n\nexport type Signer = (data: string | Uint8Array) => Promise<EcdsaSignature | string>\nexport type SignerAlgorithm = (payload: string, signer: Signer) => Promise<string>\n\nexport interface JWTOptions {\n  issuer: string\n  signer: Signer\n  /**\n   * @deprecated Please use `header.alg` to specify the JWT algorithm.\n   */\n  alg?: string\n  expiresIn?: number\n}\n\nexport interface Resolvable {\n  resolve: (did: string) => Promise<DIDDocument | null>\n}\n\nexport interface JWTVerifyOptions {\n  auth?: boolean\n  audience?: string\n  callbackUrl?: string\n  resolver?: Resolvable\n  skewTime?: number\n}\n\nexport interface DIDAuthenticator {\n  authenticators: PublicKey[]\n  issuer: string\n  doc: DIDDocument\n}\n\nexport interface JWTHeader {\n  typ: 'JWT'\n  alg: string\n  [x: string]: any\n}\n\nexport interface JWTPayload {\n  iss?: string\n  sub?: string\n  aud?: string | string[]\n  iat?: number\n  nbf?: number\n  type?: string\n  exp?: number\n  rexp?: number\n  [x: string]: any\n}\n\nexport interface JWTDecoded {\n  header: JWTHeader\n  payload: JWTPayload\n  signature: string\n  data: string\n}\n\nexport interface JWSDecoded {\n  header: JWTHeader\n  payload: string\n  signature: string\n  data: string\n}\n\nexport interface JWTVerified {\n  payload: any\n  doc: DIDDocument\n  issuer: string\n  signer: object\n  jwt: string\n}\n\nexport interface PublicKeyTypes {\n  [name: string]: string[]\n}\nexport const SUPPORTED_PUBLIC_KEY_TYPES: PublicKeyTypes = {\n  ES256K: [\n    'Secp256k1VerificationKey2018',\n    'Secp256k1SignatureVerificationKey2018',\n    'EcdsaPublicKeySecp256k1',\n    'EcdsaSecp256k1VerificationKey2019'\n  ],\n  'ES256K-R': [\n    'Secp256k1VerificationKey2018',\n    'Secp256k1SignatureVerificationKey2018',\n    'EcdsaPublicKeySecp256k1',\n    'EcdsaSecp256k1VerificationKey2019'\n  ],\n  Ed25519: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018'],\n  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018']\n}\n\nconst defaultAlg = 'ES256K'\n\nfunction encodeSection(data: any): string {\n  return encodeBase64url(JSON.stringify(data))\n}\n\nexport const NBF_SKEW: number = 300\n\nfunction decodeJWS(jws: string): JWSDecoded {\n  const parts: RegExpMatchArray = jws.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/)\n  if (parts) {\n    return {\n      header: JSON.parse(decodeBase64url(parts[1])),\n      payload: parts[2],\n      signature: parts[3],\n      data: `${parts[1]}.${parts[2]}`\n    }\n  }\n  throw new Error('Incorrect format JWS')\n}\n\n/**  @module did-jwt/JWT */\n\n/**\n *  Decodes a JWT and returns an object representing the payload\n *\n *  @example\n *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @return   {Object}                               a JS object representing the decoded JWT\n */\nexport function decodeJWT(jwt: string): JWTDecoded {\n  if (!jwt) throw new Error('no JWT passed into decodeJWT')\n  try {\n    const jws = decodeJWS(jwt)\n    const decodedJwt: JWTDecoded = Object.assign(jws, { payload: JSON.parse(decodeBase64url(jws.payload)) })\n    return decodedJwt\n  } catch (e) {\n    throw new Error('Incorrect format JWT')\n  }\n}\n\n/**\n *  Creates a signed JWS given a payload, a signer, and an optional header.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const jws = await createJWS({ my: 'payload' }, signer)\n *\n *  @param    {Object}            payload           payload object\n *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`\n *  @param    {Object}            header            optional object to specify or customize the JWS header\n *  @return   {Promise<Object, Error>}              a promise which resolves with a JWS string or rejects with an error\n */\nexport async function createJWS(\n  payload: string | any,\n  signer: Signer,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!header.alg) header.alg = defaultAlg\n  const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload)\n  const signingInput: string = [encodeSection(header), encodedPayload].join('.')\n\n  const jwtSigner: SignerAlgorithm = SignerAlgorithm(header.alg)\n  const signature: string = await jwtSigner(signingInput, signer)\n  return [signingInput, signature].join('.')\n}\n\n/**\n *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n *      ...\n *  })\n *\n *  @param    {Object}            payload            payload object\n *  @param    {Object}            [options]          an unsigned credential object\n *  @param    {String}            options.issuer     The DID of the issuer (signer) of JWT\n *  @param    {String}            options.alg        [DEPRECATED] The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K.\n *                                                   Please use `header.alg` to specify the algorithm\n *  @param    {Signer}            options.signer     a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\n *  @param    {Object}            header             optional object to specify or customize the JWT header\n *  @return   {Promise<Object, Error>}               a promise which resolves with a signed JSON Web Token or rejects with an error\n */\nexport async function createJWT(\n  payload: any,\n  { issuer, signer, alg, expiresIn }: JWTOptions,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!signer) throw new Error('No Signer functionality has been configured')\n  if (!issuer) throw new Error('No issuing DID has been configured')\n  if (!header.typ) header.typ = 'JWT'\n  if (!header.alg) header.alg = alg\n  const timestamps: Partial<JWTPayload> = {\n    iat: Math.floor(Date.now() / 1000),\n    exp: undefined\n  }\n  if (expiresIn) {\n    if (typeof expiresIn === 'number') {\n      timestamps.exp = (payload.nbf || timestamps.iat) + Math.floor(expiresIn)\n    } else {\n      throw new Error('JWT expiresIn is not a number')\n    }\n  }\n  const fullPayload = { ...timestamps, ...payload, iss: issuer }\n  return createJWS(fullPayload, signer, header)\n}\n\nfunction verifyJWSDecoded({ header, data, signature }: JWSDecoded, pubkeys: PublicKey | PublicKey[]): PublicKey {\n  if (!Array.isArray(pubkeys)) pubkeys = [pubkeys]\n  const signer: PublicKey = VerifierAlgorithm(header.alg)(data, signature, pubkeys)\n  return signer\n}\n\n/**\n *  Verifies given JWS. If the JWS is valid, returns the public key that was\n *  used to sign the JWS, or throws an `Error` if none of the `pubkeys` match.\n *\n *  @example\n *  const pubkey = verifyJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })\n *\n *  @param    {String}                          jws         A JWS string to verify\n *  @param    {Array<PublicKey> | PublicKey}    pubkeys     The public keys used to verify the JWS\n *  @return   {PublicKey}                       The public key used to sign the JWS\n */\nexport function verifyJWS(jws: string, pubkeys: PublicKey | PublicKey[]): PublicKey {\n  const jwsDecoded: JWSDecoded = decodeJWS(jws)\n  return verifyJWSDecoded(jwsDecoded, pubkeys)\n}\n\n/**\n *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\n *  and the did doc of the issuer of the JWT.\n *\n *  @example\n *  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {\n *      const did = obj.did // DID of signer\n *      const payload = obj.payload\n *      const doc = obj.doc // DID Document of signer\n *      const jwt = obj.jwt\n *      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT\n *      ...\n *  })\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @param    {Object}            [options]           an unsigned credential object\n *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)\n *  @param    {String}            options.audience    DID of the recipient of the JWT\n *  @param    {String}            options.callbackUrl callback url in JWT\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error\n */\nexport async function verifyJWT(\n  jwt: string,\n  options: JWTVerifyOptions = {\n    resolver: null,\n    auth: null,\n    audience: null,\n    callbackUrl: null,\n    skewTime: null\n  }\n): Promise<JWTVerified> {\n  if (!options.resolver) throw new Error('No DID resolver has been configured')\n  const { payload, header, signature, data }: JWTDecoded = decodeJWT(jwt)\n  const { doc, authenticators, issuer }: DIDAuthenticator = await resolveAuthenticator(\n    options.resolver,\n    header.alg,\n    payload.iss,\n    options.auth\n  )\n  const signer: PublicKey = await verifyJWSDecoded({ header, data, signature } as JWSDecoded, authenticators)\n  const now: number = Math.floor(Date.now() / 1000)\n  const skewTime = options.skewTime >= 0 ? options.skewTime : NBF_SKEW\n  if (signer) {\n    const nowSkewed = now + skewTime\n    if (payload.nbf) {\n      if (payload.nbf > nowSkewed) {\n        throw new Error(`JWT not valid before nbf: ${payload.nbf}`)\n      }\n    } else if (payload.iat && payload.iat > nowSkewed) {\n      throw new Error(`JWT not valid yet (issued in the future) iat: ${payload.iat}`)\n    }\n    if (payload.exp && payload.exp <= now - skewTime) {\n      throw new Error(`JWT has expired: exp: ${payload.exp} < now: ${now}`)\n    }\n    if (payload.aud) {\n      if (!options.audience && !options.callbackUrl) {\n        throw new Error('JWT audience is required but your app address has not been configured')\n      }\n      const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud]\n      const matchedAudience = audArray.find((item) => options.audience === item || options.callbackUrl === item)\n\n      if (typeof matchedAudience === 'undefined') {\n        throw new Error(`JWT audience does not match your DID or callback url`)\n      }\n    }\n    return { payload, doc, issuer, signer, jwt }\n  }\n}\n\n/**\n * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID\n *\n *  @example\n *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\n *      const payload = obj.payload\n *      const profile = obj.profile\n *      const jwt = obj.jwt\n *      ...\n *  })\n *\n *  @param    {String}            alg                a JWT algorithm\n *  @param    {String}            did                a Decentralized IDentifier (DID) to lookup\n *  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error\n */\nexport async function resolveAuthenticator(\n  resolver: Resolvable,\n  alg: string,\n  issuer: string,\n  auth?: boolean\n): Promise<DIDAuthenticator> {\n  const types: string[] = SUPPORTED_PUBLIC_KEY_TYPES[alg]\n  if (!types || types.length === 0) {\n    throw new Error(`No supported signature types for algorithm ${alg}`)\n  }\n  const doc: DIDDocument = await resolver.resolve(issuer)\n  if (!doc) throw new Error(`Unable to resolve DID document for ${issuer}`)\n\n  const getPublicKeyById = (doc: DIDDocument, pubid: string): PublicKey | null => {\n    const filtered = doc.publicKey.filter(({ id }) => pubid === id)\n    return filtered.length > 0 ? filtered[0] : null\n  }\n\n  let publicKeysToCheck: PublicKey[] = doc.publicKey || []\n  if (auth) {\n    publicKeysToCheck = (doc.authentication || [])\n      .map((authEntry) => {\n        if (typeof authEntry === 'string') {\n          return getPublicKeyById(doc, authEntry)\n        } else if (typeof (<Authentication>authEntry).publicKey === 'string') {\n          return getPublicKeyById(doc, (<Authentication>authEntry).publicKey)\n        } else {\n          return <PublicKey>authEntry\n        }\n      })\n      .filter((key) => key != null)\n  }\n\n  const authenticators: PublicKey[] = publicKeysToCheck.filter(({ type }) =>\n    types.find((supported) => supported === type)\n  )\n\n  if (auth && (!authenticators || authenticators.length === 0)) {\n    throw new Error(`DID document for ${issuer} does not have public keys suitable for authenticating user`)\n  }\n  if (!authenticators || authenticators.length === 0) {\n    throw new Error(`DID document for ${issuer} does not have public keys for ${alg}`)\n  }\n  return { authenticators, issuer, doc }\n}\n", "import { base64ToBytes, bytesToBase64url, decodeBase64url, toSealed } from './util'\n\ninterface RecipientHeader {\n  alg: string\n  iv: string\n  tag: string\n  epk?: Record<string, any> // Ephemeral  Public Key\n  kid?: string\n}\n\nexport interface Recipient {\n  header: RecipientHeader\n  encrypted_key: string\n}\n\nexport interface JWE {\n  protected: string\n  iv: string\n  ciphertext: string\n  tag: string\n  aad?: string\n  recipients?: Recipient[]\n}\n\nexport interface EncryptionResult {\n  ciphertext: Uint8Array\n  tag: Uint8Array\n  iv: Uint8Array\n  protectedHeader?: string\n  recipient?: Recipient\n  cek?: Uint8Array\n}\n\nexport interface Encrypter {\n  alg: string\n  enc: string\n  encrypt: (cleartext: Uint8Array, protectedHeader: Record<string, any>, aad?: Uint8Array) => Promise<EncryptionResult>\n  encryptCek?: (cek: Uint8Array) => Promise<Recipient>\n}\n\nexport interface Decrypter {\n  alg: string\n  enc: string\n  decrypt: (sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array, recipient?: Record<string, any>) => Promise<Uint8Array>\n}\n\nfunction validateJWE(jwe: JWE) {\n  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {\n    throw new Error('Invalid JWE')\n  }\n  if (jwe.recipients) {\n    jwe.recipients.map(rec => {\n      if (!(rec.header && rec.encrypted_key)) {\n        throw new Error('Invalid JWE')\n      }\n    })\n  }\n}\n\nfunction encodeJWE(\n  {\n    ciphertext,\n    tag,\n    iv,\n    protectedHeader,\n    recipient\n  }: EncryptionResult,\n  aad?: Uint8Array\n): JWE {\n  const jwe: JWE = {\n    protected: protectedHeader,\n    iv: bytesToBase64url(iv),\n    ciphertext: bytesToBase64url(ciphertext),\n    tag: bytesToBase64url(tag)\n  }\n  if (aad) jwe.aad = bytesToBase64url(aad)\n  if (recipient) jwe.recipients = [recipient]\n  return jwe\n}\n\nexport async function createJWE(cleartext: Uint8Array, encrypters: Encrypter[], protectedHeader = {}, aad?: Uint8Array): Promise<JWE> {\n  if (encrypters[0].alg === 'dir') {\n    if (encrypters.length > 1) throw new Error('Can only do \"dir\" encryption to one key.')\n    const encryptionResult = await encrypters[0].encrypt(cleartext, protectedHeader, aad)\n    return encodeJWE(encryptionResult, aad)\n  } else {\n    const tmpEnc = encrypters[0].enc\n    if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {\n      throw new Error('Incompatible encrypters passed')\n    }\n    let cek\n    let jwe\n    for (const encrypter of encrypters) {\n      if (!cek) {\n        const encryptionResult = await encrypter.encrypt(cleartext, protectedHeader, aad)\n        cek = encryptionResult.cek\n        jwe = encodeJWE(encryptionResult, aad)\n      } else {\n        jwe.recipients.push(await encrypter.encryptCek(cek))\n      }\n    }\n    return jwe\n  }\n}\n\nexport async function decryptJWE(jwe: JWE, decrypter: Decrypter): Promise<Uint8Array> {\n  validateJWE(jwe)\n  const protHeader = JSON.parse(decodeBase64url(jwe.protected))\n  if (protHeader.enc !== decrypter.enc) throw new Error(`Decrypter does not support: '${protHeader.enc}'`)\n  const sealed = toSealed(jwe.ciphertext, jwe.tag)\n  const aad = new Uint8Array(Buffer.from(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected))\n  let cleartext = null\n  if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {\n    cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)\n  } else if (!jwe.recipients || jwe.recipients.length === 0) {\n    throw new Error('Invalid JWE')\n  } else {\n    for (let i = 0; !cleartext && i < jwe.recipients.length; i++) {\n      const recipient = jwe.recipients[i]\n      Object.assign(recipient.header, protHeader)\n      if (recipient.header.alg === decrypter.alg) {\n        cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)\n      }\n    }\n  }\n  if (cleartext === null) throw new Error('Failed to decrypt')\n  return cleartext\n}\n", "import { XChaCha20Poly1305 } from '@stablelib/xchacha20poly1305'\nimport { generateKeyPair, sharedKey } from '@stablelib/x25519'\nimport { randomBytes } from '@stablelib/random'\nimport { concatKDF } from './Digest'\nimport { bytesToBase64url, base58ToBytes, encodeBase64url, toSealed, base64ToBytes } from './util'\nimport { Recipient, EncryptionResult, Encrypter, Decrypter } from './JWE'\nimport type { PublicKey, Resolver } from 'did-resolver'\n\nfunction xc20pEncrypter(key: Uint8Array): (cleartext: Uint8Array, aad?: Uint8Array) => EncryptionResult {\n  const cipher = new XChaCha20Poly1305(key)\n  return (cleartext: Uint8Array, aad?: Uint8Array) => {\n    const iv = randomBytes(cipher.nonceLength)\n    const sealed = cipher.seal(iv, cleartext, aad)\n    return {\n      ciphertext: sealed.subarray(0, sealed.length - cipher.tagLength),\n      tag: sealed.subarray(sealed.length - cipher.tagLength),\n      iv\n    }\n  }\n}\n\nexport function xc20pDirEncrypter(key: Uint8Array): Encrypter {\n  const xc20pEncrypt = xc20pEncrypter(key)\n  const enc = 'XC20P'\n  const alg = 'dir'\n  async function encrypt(cleartext, protectedHeader = {}, aad?): Promise<EncryptionResult> {\n    const protHeader = encodeBase64url(JSON.stringify(Object.assign({ alg }, protectedHeader, { enc })))\n    const encodedAad = new Uint8Array(Buffer.from(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader))\n    return {\n      ...(xc20pEncrypt(cleartext, encodedAad)),\n      protectedHeader: protHeader\n    }\n  }\n  return { alg, enc, encrypt }\n}\n\nexport function xc20pDirDecrypter(key: Uint8Array): Decrypter {\n  const cipher = new XChaCha20Poly1305(key)\n  async function decrypt(sealed, iv, aad?): Promise<Uint8Array> {\n    return cipher.open(iv, sealed, aad)\n  }\n  return { alg: 'dir', enc: 'XC20P', decrypt }\n}\n\nexport function x25519Encrypter(publicKey: Uint8Array, kid?: string): Encrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function encryptCek(cek): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const sharedSecret = sharedKey(epk.secretKey, publicKey)\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) }\n      }\n    }\n    if (kid) recipient.header.kid = kid\n    return recipient\n  }\n  async function encrypt(cleartext, protectedHeader = {}, aad?): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\nexport async function resolveX25519Encrypters(dids: string[], resolver: Resolver): Promise<Encrypter[]> {\n  return Promise.all(\n    dids.map(async (did) => {\n      const didDoc = await resolver.resolve(did)\n      if (!didDoc.keyAgreement) throw new Error(`Could not find x25519 key for ${did}`)\n      const agreementKeys: PublicKey[] = didDoc.keyAgreement?.map((key) => {\n        if (typeof key === 'string') {\n          return didDoc.publicKey.find((pk) => pk.id === key)\n        }\n        return key\n      })\n      const pk = agreementKeys.find((key) => {\n        return key.type === 'X25519KeyAgreementKey2019' && Boolean(key.publicKeyBase58)\n      })\n      if (!pk) throw new Error(`Could not find x25519 key for ${did}`)\n      return x25519Encrypter(base58ToBytes(pk.publicKeyBase58), pk.id)\n    })\n  )\n}\n\nfunction validateHeader(header: Record<string, any>) {\n  if(!(\n    header.epk &&\n    header.iv &&\n    header.tag\n  )) {\n    throw new Error('Invalid JWE')\n  }\n}\n\nexport function x25519Decrypter(secretKey: Uint8Array): Decrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(sealed, iv, aad, recipient): Promise<Uint8Array> {\n    validateHeader(recipient.header)\n    if (recipient.header.epk.crv !== crv) return null\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    const sharedSecret = sharedKey(secretKey, publicKey)\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    // Content Encryption Key\n    const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n", "import { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The EllipticSigner returns a configured function for signing data.\n *\n *  @example\n *  ```typescript\n *  const signer = EllipticSigner(process.env.PRIVATE_KEY)\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *  ```\n * \n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                        a configured signer function\n */\nfunction EllipticSigner(hexPrivateKey: string): Signer {\n  return ES256KSigner(hexPrivateKey)\n}\n\nexport default EllipticSigner\n", "import { sign } from '@stablelib/ed25519'\nimport { EdDSASigner as EdDSASigner } from './EdDSASigner'\nimport { Signer } from '../JWT'\nimport { base64ToBytes, bytesToBase64url, stringToBytes } from '../util'\n\n/**\n * @deprecated Please use EdDSASigner\n * \n *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.\n *\n *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a `base64Url`-encoded signature.\n *\n *  @example\n *  const signer = NaclSigner(process.env.PRIVATE_KEY)\n *  const data: string = '...'\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *\n *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key\n *  @return   {Function}                     a configured signer function\n */\n\nfunction NaclSigner(base64PrivateKey: string): Signer {\n  return EdDSASigner(base64PrivateKey)\n}\n\nexport default NaclSigner\n", "import { fromJose } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The SimpleSigner returns a configured function for signing data.\n *\n *  @example\n *  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n *  signer(data, (err, signature) => {\n *    ...\n *  })\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                     a configured signer function\n */\nfunction SimpleSigner(hexPrivateKey: string): Signer {\n  const signer = ES256KSigner(hexPrivateKey, true)\n  return async (data) => {\n    const signature = (await signer(data)) as string\n    return fromJose(signature)\n  }\n}\n\nexport default SimpleSigner\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", "/* eslint-disable */\n\nmodule.exports = function decodeAsm (stdlib, foreign, buffer) {\n  'use asm'\n\n  // -- Imports\n\n  var heap = new stdlib.Uint8Array(buffer)\n  // var log = foreign.log\n  var pushInt = foreign.pushInt\n  var pushInt32 = foreign.pushInt32\n  var pushInt32Neg = foreign.pushInt32Neg\n  var pushInt64 = foreign.pushInt64\n  var pushInt64Neg = foreign.pushInt64Neg\n  var pushFloat = foreign.pushFloat\n  var pushFloatSingle = foreign.pushFloatSingle\n  var pushFloatDouble = foreign.pushFloatDouble\n  var pushTrue = foreign.pushTrue\n  var pushFalse = foreign.pushFalse\n  var pushUndefined = foreign.pushUndefined\n  var pushNull = foreign.pushNull\n  var pushInfinity = foreign.pushInfinity\n  var pushInfinityNeg = foreign.pushInfinityNeg\n  var pushNaN = foreign.pushNaN\n  var pushNaNNeg = foreign.pushNaNNeg\n\n  var pushArrayStart = foreign.pushArrayStart\n  var pushArrayStartFixed = foreign.pushArrayStartFixed\n  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32\n  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64\n  var pushObjectStart = foreign.pushObjectStart\n  var pushObjectStartFixed = foreign.pushObjectStartFixed\n  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32\n  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64\n\n  var pushByteString = foreign.pushByteString\n  var pushByteStringStart = foreign.pushByteStringStart\n  var pushUtf8String = foreign.pushUtf8String\n  var pushUtf8StringStart = foreign.pushUtf8StringStart\n\n  var pushSimpleUnassigned = foreign.pushSimpleUnassigned\n\n  var pushTagStart = foreign.pushTagStart\n  var pushTagStart4 = foreign.pushTagStart4\n  var pushTagStart8 = foreign.pushTagStart8\n  var pushTagUnassigned = foreign.pushTagUnassigned\n\n  var pushBreak = foreign.pushBreak\n\n  var pow = stdlib.Math.pow\n\n  // -- Constants\n\n\n  // -- Mutable Variables\n\n  var offset = 0\n  var inputLength = 0\n  var code = 0\n\n  // Decode a cbor string represented as Uint8Array\n  // which is allocated on the heap from 0 to inputLength\n  //\n  // input - Int\n  //\n  // Returns Code - Int,\n  // Success = 0\n  // Error > 0\n  function parse (input) {\n    input = input | 0\n\n    offset = 0\n    inputLength = input\n\n    while ((offset | 0) < (inputLength | 0)) {\n      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0\n\n      if ((code | 0) > 0) {\n        break\n      }\n    }\n\n    return code | 0\n  }\n\n  // -- Helper Function\n\n  function checkOffset (n) {\n    n = n | 0\n\n    if ((((offset | 0) + (n | 0)) | 0) < (inputLength | 0)) {\n      return 0\n    }\n\n    return 1\n  }\n\n  function readUInt16 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 8) | heap[(n + 1) | 0]\n    ) | 0\n  }\n\n  function readUInt32 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 24) | (heap[(n + 1) | 0] << 16) | (heap[(n + 2) | 0] << 8) | heap[(n + 3) | 0]\n    ) | 0\n  }\n\n  // -- Initial Byte Handlers\n\n  function INT_P (octet) {\n    octet = octet | 0\n\n    pushInt(octet | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_P_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_P_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushInt(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_P_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_P_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function INT_N (octet) {\n    octet = octet | 0\n\n    pushInt((-1 - ((octet - 32) | 0)) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_N_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(\n      (-1 - (heap[(offset + 1) | 0] | 0)) | 0\n    )\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_N_16 (octet) {\n    octet = octet | 0\n\n    var val = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    val = readUInt16((offset + 1) | 0) | 0\n    pushInt((-1 - (val | 0)) | 0)\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_N_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_N_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function BYTE_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 64) | 0\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BYTE_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushByteStringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UTF8_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 96) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function UTF8_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushUtf8StringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY (octet) {\n    octet = octet | 0\n\n    pushArrayStartFixed((octet - 128) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function ARRAY_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function ARRAY_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function ARRAY_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ARRAY_BREAK (octet) {\n    octet = octet | 0\n\n    pushArrayStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP (octet) {\n    octet = octet | 0\n\n    var step = 0\n\n    step = (octet - 160) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(step | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function MAP_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function MAP_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function MAP_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function MAP_BREAK (octet) {\n    octet = octet | 0\n\n    pushObjectStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function TAG_KNOWN (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_POS (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_NEG (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_FRAC (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_FLOAT (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64_URL (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE16 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_1 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushTagStart(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_2 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushTagStart(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_4 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushTagStart4(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushTagStart8(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9 | 0)\n\n    return 0\n  }\n\n  function SIMPLE_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushSimpleUnassigned(((octet | 0) - 224) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FALSE (octet) {\n    octet = octet | 0\n\n    pushFalse()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_TRUE (octet) {\n    octet = octet | 0\n\n    pushTrue()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_NULL (octet) {\n    octet = octet | 0\n\n    pushNull()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_UNDEFINED (octet) {\n    octet = octet | 0\n\n    pushUndefined()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_BYTE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushSimpleUnassigned(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2)  | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_HALF (octet) {\n    octet = octet | 0\n\n    var f = 0\n    var g = 0\n    var sign = 1.0\n    var exp = 0.0\n    var mant = 0.0\n    var r = 0.0\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    f = heap[(offset + 1) | 0] | 0\n    g = heap[(offset + 2) | 0] | 0\n\n    if ((f | 0) & 0x80) {\n      sign = -1.0\n    }\n\n    exp = +(((f | 0) & 0x7C) >> 2)\n    mant = +((((f | 0) & 0x03) << 8) | g)\n\n    if (+exp == 0.0) {\n      pushFloat(+(\n        (+sign) * +5.9604644775390625e-8 * (+mant)\n      ))\n    } else if (+exp == 31.0) {\n      if (+sign == 1.0) {\n        if (+mant > 0.0) {\n          pushNaN()\n        } else {\n          pushInfinity()\n        }\n      } else {\n        if (+mant > 0.0) {\n          pushNaNNeg()\n        } else {\n          pushInfinityNeg()\n        }\n      }\n    } else {\n      pushFloat(+(\n        +sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)\n      ))\n    }\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_SINGLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushFloatSingle(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_DOUBLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushFloatDouble(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0,\n      heap[(offset + 5) | 0] | 0,\n      heap[(offset + 6) | 0] | 0,\n      heap[(offset + 7) | 0] | 0,\n      heap[(offset + 8) | 0] | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ERROR (octet) {\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BREAK (octet) {\n    octet = octet | 0\n\n    pushBreak()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  // -- Jump Table\n\n  var jumpTable = [\n    // Integer 0x00..0x17 (0..23)\n    INT_P, // 0x00\n    INT_P, // 0x01\n    INT_P, // 0x02\n    INT_P, // 0x03\n    INT_P, // 0x04\n    INT_P, // 0x05\n    INT_P, // 0x06\n    INT_P, // 0x07\n    INT_P, // 0x08\n    INT_P, // 0x09\n    INT_P, // 0x0A\n    INT_P, // 0x0B\n    INT_P, // 0x0C\n    INT_P, // 0x0D\n    INT_P, // 0x0E\n    INT_P, // 0x0F\n    INT_P, // 0x10\n    INT_P, // 0x11\n    INT_P, // 0x12\n    INT_P, // 0x13\n    INT_P, // 0x14\n    INT_P, // 0x15\n    INT_P, // 0x16\n    INT_P, // 0x17\n    // Unsigned integer (one-byte uint8_t follows)\n    UINT_P_8, // 0x18\n    // Unsigned integer (two-byte uint16_t follows)\n    UINT_P_16, // 0x19\n    // Unsigned integer (four-byte uint32_t follows)\n    UINT_P_32, // 0x1a\n    // Unsigned integer (eight-byte uint64_t follows)\n    UINT_P_64, // 0x1b\n    ERROR, // 0x1c\n    ERROR, // 0x1d\n    ERROR, // 0x1e\n    ERROR, // 0x1f\n    // Negative integer -1-0x00..-1-0x17 (-1..-24)\n    INT_N, // 0x20\n    INT_N, // 0x21\n    INT_N, // 0x22\n    INT_N, // 0x23\n    INT_N, // 0x24\n    INT_N, // 0x25\n    INT_N, // 0x26\n    INT_N, // 0x27\n    INT_N, // 0x28\n    INT_N, // 0x29\n    INT_N, // 0x2A\n    INT_N, // 0x2B\n    INT_N, // 0x2C\n    INT_N, // 0x2D\n    INT_N, // 0x2E\n    INT_N, // 0x2F\n    INT_N, // 0x30\n    INT_N, // 0x31\n    INT_N, // 0x32\n    INT_N, // 0x33\n    INT_N, // 0x34\n    INT_N, // 0x35\n    INT_N, // 0x36\n    INT_N, // 0x37\n    // Negative integer -1-n (one-byte uint8_t for n follows)\n    UINT_N_8, // 0x38\n    // Negative integer -1-n (two-byte uint16_t for n follows)\n    UINT_N_16, // 0x39\n    // Negative integer -1-n (four-byte uint32_t for nfollows)\n    UINT_N_32, // 0x3a\n    // Negative integer -1-n (eight-byte uint64_t for n follows)\n    UINT_N_64, // 0x3b\n    ERROR, // 0x3c\n    ERROR, // 0x3d\n    ERROR, // 0x3e\n    ERROR, // 0x3f\n    // byte string (0x00..0x17 bytes follow)\n    BYTE_STRING, // 0x40\n    BYTE_STRING, // 0x41\n    BYTE_STRING, // 0x42\n    BYTE_STRING, // 0x43\n    BYTE_STRING, // 0x44\n    BYTE_STRING, // 0x45\n    BYTE_STRING, // 0x46\n    BYTE_STRING, // 0x47\n    BYTE_STRING, // 0x48\n    BYTE_STRING, // 0x49\n    BYTE_STRING, // 0x4A\n    BYTE_STRING, // 0x4B\n    BYTE_STRING, // 0x4C\n    BYTE_STRING, // 0x4D\n    BYTE_STRING, // 0x4E\n    BYTE_STRING, // 0x4F\n    BYTE_STRING, // 0x50\n    BYTE_STRING, // 0x51\n    BYTE_STRING, // 0x52\n    BYTE_STRING, // 0x53\n    BYTE_STRING, // 0x54\n    BYTE_STRING, // 0x55\n    BYTE_STRING, // 0x56\n    BYTE_STRING, // 0x57\n    // byte string (one-byte uint8_t for n, and then n bytes follow)\n    BYTE_STRING_8, // 0x58\n    // byte string (two-byte uint16_t for n, and then n bytes follow)\n    BYTE_STRING_16, // 0x59\n    // byte string (four-byte uint32_t for n, and then n bytes follow)\n    BYTE_STRING_32, // 0x5a\n    // byte string (eight-byte uint64_t for n, and then n bytes follow)\n    BYTE_STRING_64, // 0x5b\n    ERROR, // 0x5c\n    ERROR, // 0x5d\n    ERROR, // 0x5e\n    // byte string, byte strings follow, terminated by \"break\"\n    BYTE_STRING_BREAK, // 0x5f\n    // UTF-8 string (0x00..0x17 bytes follow)\n    UTF8_STRING, // 0x60\n    UTF8_STRING, // 0x61\n    UTF8_STRING, // 0x62\n    UTF8_STRING, // 0x63\n    UTF8_STRING, // 0x64\n    UTF8_STRING, // 0x65\n    UTF8_STRING, // 0x66\n    UTF8_STRING, // 0x67\n    UTF8_STRING, // 0x68\n    UTF8_STRING, // 0x69\n    UTF8_STRING, // 0x6A\n    UTF8_STRING, // 0x6B\n    UTF8_STRING, // 0x6C\n    UTF8_STRING, // 0x6D\n    UTF8_STRING, // 0x6E\n    UTF8_STRING, // 0x6F\n    UTF8_STRING, // 0x70\n    UTF8_STRING, // 0x71\n    UTF8_STRING, // 0x72\n    UTF8_STRING, // 0x73\n    UTF8_STRING, // 0x74\n    UTF8_STRING, // 0x75\n    UTF8_STRING, // 0x76\n    UTF8_STRING, // 0x77\n    // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)\n    UTF8_STRING_8, // 0x78\n    // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)\n    UTF8_STRING_16, // 0x79\n    // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)\n    UTF8_STRING_32, // 0x7a\n    // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)\n    UTF8_STRING_64, // 0x7b\n    // UTF-8 string, UTF-8 strings follow, terminated by \"break\"\n    ERROR, // 0x7c\n    ERROR, // 0x7d\n    ERROR, // 0x7e\n    UTF8_STRING_BREAK, // 0x7f\n    // array (0x00..0x17 data items follow)\n    ARRAY, // 0x80\n    ARRAY, // 0x81\n    ARRAY, // 0x82\n    ARRAY, // 0x83\n    ARRAY, // 0x84\n    ARRAY, // 0x85\n    ARRAY, // 0x86\n    ARRAY, // 0x87\n    ARRAY, // 0x88\n    ARRAY, // 0x89\n    ARRAY, // 0x8A\n    ARRAY, // 0x8B\n    ARRAY, // 0x8C\n    ARRAY, // 0x8D\n    ARRAY, // 0x8E\n    ARRAY, // 0x8F\n    ARRAY, // 0x90\n    ARRAY, // 0x91\n    ARRAY, // 0x92\n    ARRAY, // 0x93\n    ARRAY, // 0x94\n    ARRAY, // 0x95\n    ARRAY, // 0x96\n    ARRAY, // 0x97\n    // array (one-byte uint8_t fo, and then n data items follow)\n    ARRAY_8, // 0x98\n    // array (two-byte uint16_t for n, and then n data items follow)\n    ARRAY_16, // 0x99\n    // array (four-byte uint32_t for n, and then n data items follow)\n    ARRAY_32, // 0x9a\n    // array (eight-byte uint64_t for n, and then n data items follow)\n    ARRAY_64, // 0x9b\n    // array, data items follow, terminated by \"break\"\n    ERROR, // 0x9c\n    ERROR, // 0x9d\n    ERROR, // 0x9e\n    ARRAY_BREAK, // 0x9f\n    // map (0x00..0x17 pairs of data items follow)\n    MAP, // 0xa0\n    MAP, // 0xa1\n    MAP, // 0xa2\n    MAP, // 0xa3\n    MAP, // 0xa4\n    MAP, // 0xa5\n    MAP, // 0xa6\n    MAP, // 0xa7\n    MAP, // 0xa8\n    MAP, // 0xa9\n    MAP, // 0xaA\n    MAP, // 0xaB\n    MAP, // 0xaC\n    MAP, // 0xaD\n    MAP, // 0xaE\n    MAP, // 0xaF\n    MAP, // 0xb0\n    MAP, // 0xb1\n    MAP, // 0xb2\n    MAP, // 0xb3\n    MAP, // 0xb4\n    MAP, // 0xb5\n    MAP, // 0xb6\n    MAP, // 0xb7\n    // map (one-byte uint8_t for n, and then n pairs of data items follow)\n    MAP_8, // 0xb8\n    // map (two-byte uint16_t for n, and then n pairs of data items follow)\n    MAP_16, // 0xb9\n    // map (four-byte uint32_t for n, and then n pairs of data items follow)\n    MAP_32, // 0xba\n    // map (eight-byte uint64_t for n, and then n pairs of data items follow)\n    MAP_64, // 0xbb\n    ERROR, // 0xbc\n    ERROR, // 0xbd\n    ERROR, // 0xbe\n    // map, pairs of data items follow, terminated by \"break\"\n    MAP_BREAK, // 0xbf\n    // Text-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc0\n    // Epoch-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc1\n    // Positive bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc2\n    // Negative bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc3\n    // Decimal Fraction (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc4\n    // Bigfloat (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc5\n    // (tagged item)\n    TAG_UNASSIGNED, // 0xc6\n    TAG_UNASSIGNED, // 0xc7\n    TAG_UNASSIGNED, // 0xc8\n    TAG_UNASSIGNED, // 0xc9\n    TAG_UNASSIGNED, // 0xca\n    TAG_UNASSIGNED, // 0xcb\n    TAG_UNASSIGNED, // 0xcc\n    TAG_UNASSIGNED, // 0xcd\n    TAG_UNASSIGNED, // 0xce\n    TAG_UNASSIGNED, // 0xcf\n    TAG_UNASSIGNED, // 0xd0\n    TAG_UNASSIGNED, // 0xd1\n    TAG_UNASSIGNED, // 0xd2\n    TAG_UNASSIGNED, // 0xd3\n    TAG_UNASSIGNED, // 0xd4\n    // Expected Conversion (data item follows; see Section 2.4.4.2)\n    TAG_UNASSIGNED, // 0xd5\n    TAG_UNASSIGNED, // 0xd6\n    TAG_UNASSIGNED, // 0xd7\n    // (more tagged items, 1/2/4/8 bytes and then a data item follow)\n    TAG_MORE_1, // 0xd8\n    TAG_MORE_2, // 0xd9\n    TAG_MORE_4, // 0xda\n    TAG_MORE_8, // 0xdb\n    ERROR, // 0xdc\n    ERROR, // 0xdd\n    ERROR, // 0xde\n    ERROR, // 0xdf\n    // (simple value)\n    SIMPLE_UNASSIGNED, // 0xe0\n    SIMPLE_UNASSIGNED, // 0xe1\n    SIMPLE_UNASSIGNED, // 0xe2\n    SIMPLE_UNASSIGNED, // 0xe3\n    SIMPLE_UNASSIGNED, // 0xe4\n    SIMPLE_UNASSIGNED, // 0xe5\n    SIMPLE_UNASSIGNED, // 0xe6\n    SIMPLE_UNASSIGNED, // 0xe7\n    SIMPLE_UNASSIGNED, // 0xe8\n    SIMPLE_UNASSIGNED, // 0xe9\n    SIMPLE_UNASSIGNED, // 0xea\n    SIMPLE_UNASSIGNED, // 0xeb\n    SIMPLE_UNASSIGNED, // 0xec\n    SIMPLE_UNASSIGNED, // 0xed\n    SIMPLE_UNASSIGNED, // 0xee\n    SIMPLE_UNASSIGNED, // 0xef\n    SIMPLE_UNASSIGNED, // 0xf0\n    SIMPLE_UNASSIGNED, // 0xf1\n    SIMPLE_UNASSIGNED, // 0xf2\n    SIMPLE_UNASSIGNED, // 0xf3\n    // False\n    SIMPLE_FALSE, // 0xf4\n    // True\n    SIMPLE_TRUE, // 0xf5\n    // Null\n    SIMPLE_NULL, // 0xf6\n    // Undefined\n    SIMPLE_UNDEFINED, // 0xf7\n    // (simple value, one byte follows)\n    SIMPLE_BYTE, // 0xf8\n    // Half-Precision Float (two-byte IEEE 754)\n    SIMPLE_FLOAT_HALF, // 0xf9\n    // Single-Precision Float (four-byte IEEE 754)\n    SIMPLE_FLOAT_SINGLE, // 0xfa\n    // Double-Precision Float (eight-byte IEEE 754)\n    SIMPLE_FLOAT_DOUBLE, // 0xfb\n    ERROR, // 0xfc\n    ERROR, // 0xfd\n    ERROR, // 0xfe\n    // \"break\" stop code\n    BREAK // 0xff\n  ]\n\n  // --\n\n  return {\n    parse: parse\n  }\n}\n", "'use strict'\n\nconst Bignumber = require('bignumber.js').BigNumber\n\nexports.MT = {\n  POS_INT: 0,\n  NEG_INT: 1,\n  BYTE_STRING: 2,\n  UTF8_STRING: 3,\n  ARRAY: 4,\n  MAP: 5,\n  TAG: 6,\n  SIMPLE_FLOAT: 7\n}\n\nexports.TAG = {\n  DATE_STRING: 0,\n  DATE_EPOCH: 1,\n  POS_BIGINT: 2,\n  NEG_BIGINT: 3,\n  DECIMAL_FRAC: 4,\n  BIGFLOAT: 5,\n  BASE64URL_EXPECTED: 21,\n  BASE64_EXPECTED: 22,\n  BASE16_EXPECTED: 23,\n  CBOR: 24,\n  URI: 32,\n  BASE64URL: 33,\n  BASE64: 34,\n  REGEXP: 35,\n  MIME: 36\n}\n\nexports.NUMBYTES = {\n  ZERO: 0,\n  ONE: 24,\n  TWO: 25,\n  FOUR: 26,\n  EIGHT: 27,\n  INDEFINITE: 31\n}\n\nexports.SIMPLE = {\n  FALSE: 20,\n  TRUE: 21,\n  NULL: 22,\n  UNDEFINED: 23\n}\n\nexports.SYMS = {\n  NULL: Symbol('null'),\n  UNDEFINED: Symbol('undef'),\n  PARENT: Symbol('parent'),\n  BREAK: Symbol('break'),\n  STREAM: Symbol('stream')\n}\n\nexports.SHIFT32 = Math.pow(2, 32)\nexports.SHIFT16 = Math.pow(2, 16)\n\nexports.MAX_SAFE_HIGH = 0x1fffff\nexports.NEG_ONE = new Bignumber(-1)\nexports.TEN = new Bignumber(10)\nexports.TWO = new Bignumber(2)\n\nexports.PARENT = {\n  ARRAY: 0,\n  OBJECT: 1,\n  MAP: 2,\n  TAG: 3,\n  BYTE_STRING: 4,\n  UTF8_STRING: 5\n}\n", "'use strict'\n\nconst { Buffer } = require('buffer')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst constants = require('./constants')\nconst SHIFT32 = constants.SHIFT32\nconst SHIFT16 = constants.SHIFT16\nconst MAX_SAFE_HIGH = 0x1fffff\n\nexports.parseHalf = function parseHalf (buf) {\n  var exp, mant, sign\n  sign = buf[0] & 0x80 ? -1 : 1\n  exp = (buf[0] & 0x7C) >> 2\n  mant = ((buf[0] & 0x03) << 8) | buf[1]\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant\n  } else if (exp === 0x1f) {\n    return sign * (mant ? 0 / 0 : 2e308)\n  } else {\n    return sign * Math.pow(2, exp - 25) * (1024 + mant)\n  }\n}\n\nfunction toHex (n) {\n  if (n < 16) {\n    return '0' + n.toString(16)\n  }\n\n  return n.toString(16)\n}\n\nexports.arrayBufferToBignumber = function (buf) {\n  const len = buf.byteLength\n  let res = ''\n  for (let i = 0; i < len; i++) {\n    res += toHex(buf[i])\n  }\n\n  return new Bignumber(res, 16)\n}\n\n// convert an Object into a Map\nexports.buildMap = (obj) => {\n  const res = new Map()\n  const keys = Object.keys(obj)\n  const length = keys.length\n  for (let i = 0; i < length; i++) {\n    res.set(keys[i], obj[keys[i]])\n  }\n  return res\n}\n\nexports.buildInt32 = (f, g) => {\n  return f * SHIFT16 + g\n}\n\nexports.buildInt64 = (f1, f2, g1, g2) => {\n  const f = exports.buildInt32(f1, f2)\n  const g = exports.buildInt32(g1, g2)\n\n  if (f > MAX_SAFE_HIGH) {\n    return new Bignumber(f).times(SHIFT32).plus(g)\n  } else {\n    return (f * SHIFT32) + g\n  }\n}\n\nexports.writeHalf = function writeHalf (buf, half) {\n  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = Buffer.allocUnsafe(4)\n  u32.writeFloatBE(half, 0)\n  const u = u32.readUInt32BE(0)\n\n  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion\n  if ((u & 0x1FFF) !== 0) {\n    return false\n  }\n\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  var s16 = (u >> 16) & 0x8000 // top bit is sign\n  const exp = (u >> 23) & 0xff // then 5 bits of exponent\n  const mant = u & 0x7fffff\n\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  // hildjj: zeros already handled.  Assert if you don't believe me.\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n  if ((exp >= 113) && (exp <= 142)) {\n    s16 += ((exp - 112) << 10) + (mant >> 13)\n\n  //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n  //     if (mant & ((1 << (126 - exp)) - 1))\n  //       goto float32;         /* loss of precision */\n  //     s16 += ((mant + 0x800000) >> (126 - exp));\n  } else if ((exp >= 103) && (exp < 113)) {\n    if (mant & ((1 << (126 - exp)) - 1)) {\n      return false\n    }\n    s16 += ((mant + 0x800000) >> (126 - exp))\n\n    //   } else if (exp == 255 && mant == 0) { /* Inf */\n    //     s16 += 0x7c00;\n\n    // hildjj: Infinity already handled\n\n  //   } else\n  //     goto float32;           /* loss of range */\n  } else {\n    return false\n  }\n\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16, 0)\n  return true\n}\n\nexports.keySorter = function (a, b) {\n  var lenA = a[0].byteLength\n  var lenB = b[0].byteLength\n\n  if (lenA > lenB) {\n    return 1\n  }\n\n  if (lenB > lenA) {\n    return -1\n  }\n\n  return a[0].compare(b[0])\n}\n\n// Adapted from http://www.2ality.com/2012/03/signedzero.html\nexports.isNegativeZero = (x) => {\n  return x === 0 && (1 / x < 0)\n}\n\nexports.nextPowerOf2 = (n) => {\n  let count = 0\n  // First n in the below condition is for\n  // the case where n is 0\n  if (n && !(n & (n - 1))) {\n    return n\n  }\n\n  while (n !== 0) {\n    n >>= 1\n    count += 1\n  }\n\n  return 1 << count\n}\n", "'use strict'\n\nconst constants = require('./constants')\nconst MT = constants.MT\nconst SIMPLE = constants.SIMPLE\nconst SYMS = constants.SYMS\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  constructor (value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + (typeof value))\n    }\n    if ((value < 0) || (value > 255) || ((value | 0) !== value)) {\n      throw new Error('value must be a small positive integer: ' + value)\n    }\n    this.value = value\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  toString () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  inspect () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT)\n  }\n\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {bool} - is it Simple?\n   */\n  static isSimple (obj) {\n    return obj instanceof Simple\n  }\n\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {Number} val - the CBOR additional info to convert\n   * @param {bool} hasParent - Does the CBOR item have a parent?\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n   */\n  static decode (val, hasParent) {\n    if (hasParent == null) {\n      hasParent = true\n    }\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false\n      case SIMPLE.TRUE:\n        return true\n      case SIMPLE.NULL:\n        if (hasParent) {\n          return null\n        } else {\n          return SYMS.NULL\n        }\n      case SIMPLE.UNDEFINED:\n        if (hasParent) {\n          return undefined\n        } else {\n          return SYMS.UNDEFINED\n        }\n      case -1:\n        if (!hasParent) {\n          throw new Error('Invalid BREAK')\n        }\n        return SYMS.BREAK\n      default:\n        return new Simple(val)\n    }\n  }\n}\n\nmodule.exports = Simple\n", "'use strict'\n\n/**\n * A CBOR tagged item, where the tag does not have semantics specified at the\n * moment, or those semantics threw an error during parsing. Typically this will\n * be an extension point you're not yet expecting.\n */\nclass Tagged {\n  /**\n   * Creates an instance of Tagged.\n   *\n   * @param {Number} tag - the number of the tag\n   * @param {any} value - the value inside the tag\n   * @param {Error} err - the error that was thrown parsing the tag, or null\n   */\n  constructor (tag, value, err) {\n    this.tag = tag\n    this.value = value\n    this.err = err\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + (typeof this.tag) + ')')\n    }\n    if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {\n      throw new Error('Tag must be a positive integer: ' + this.tag)\n    }\n  }\n\n  /**\n   * Convert to a String\n   *\n   * @returns {String} string of the form '1(2)'\n   */\n  toString () {\n    return `${this.tag}(${JSON.stringify(this.value)})`\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    gen._pushTag(this.tag)\n    return gen.pushAny(this.value)\n  }\n\n  /**\n   * If we have a converter for this type, do the conversion.  Some converters\n   * are built-in.  Additional ones can be passed in.  If you want to remove\n   * a built-in converter, pass a converter in whose value is 'null' instead\n   * of a function.\n   *\n   * @param {Object} converters - keys in the object are a tag number, the value\n   *   is a function that takes the decoded CBOR and returns a JavaScript value\n   *   of the appropriate type.  Throw an exception in the function on errors.\n   * @returns {any} - the converted item\n   */\n  convert (converters) {\n    var er, f\n    f = converters != null ? converters[this.tag] : undefined\n    if (typeof f !== 'function') {\n      f = Tagged['_tag' + this.tag]\n      if (typeof f !== 'function') {\n        return this\n      }\n    }\n    try {\n      return f.call(Tagged, this.value)\n    } catch (error) {\n      er = error\n      this.err = er\n      return this\n    }\n  }\n}\n\nmodule.exports = Tagged\n", "'use strict';\n\nconst defaultBase = self.location ?\n    self.location.protocol + '//' + self.location.host :\n    '';\nconst URL = self.URL;\n\nclass URLWithLegacySupport {\n    constructor(url = '', base = defaultBase) {\n        this.super = new URL(url, base);\n        this.path = this.pathname + this.search;\n        this.auth =\n            this.username && this.password ?\n                this.username + ':' + this.password :\n                null;\n\n        this.query =\n            this.search && this.search.startsWith('?') ?\n                this.search.slice(1) :\n                null;\n    }\n\n    get hash() {\n        return this.super.hash;\n    }\n    get host() {\n        return this.super.host;\n    }\n    get hostname() {\n        return this.super.hostname;\n    }\n    get href() {\n        return this.super.href;\n    }\n    get origin() {\n        return this.super.origin;\n    }\n    get password() {\n        return this.super.password;\n    }\n    get pathname() {\n        return this.super.pathname;\n    }\n    get port() {\n        return this.super.port;\n    }\n    get protocol() {\n        return this.super.protocol;\n    }\n    get search() {\n        return this.super.search;\n    }\n    get searchParams() {\n        return this.super.searchParams;\n    }\n    get username() {\n        return this.super.username;\n    }\n\n    set hash(hash) {\n        this.super.hash = hash;\n    }\n    set host(host) {\n        this.super.host = host;\n    }\n    set hostname(hostname) {\n        this.super.hostname = hostname;\n    }\n    set href(href) {\n        this.super.href = href;\n    }\n    set origin(origin) {\n        this.super.origin = origin;\n    }\n    set password(password) {\n        this.super.password = password;\n    }\n    set pathname(pathname) {\n        this.super.pathname = pathname;\n    }\n    set port(port) {\n        this.super.port = port;\n    }\n    set protocol(protocol) {\n        this.super.protocol = protocol;\n    }\n    set search(search) {\n        this.super.search = search;\n    }\n    set searchParams(searchParams) {\n        this.super.searchParams = searchParams;\n    }\n    set username(username) {\n        this.super.username = username;\n    }\n\n    createObjectURL(o) {\n        return this.super.createObjectURL(o);\n    }\n    revokeObjectURL(o) {\n        this.super.revokeObjectURL(o);\n    }\n    toJSON() {\n        return this.super.toJSON();\n    }\n    toString() {\n        return this.super.toString();\n    }\n    format() {\n        return this.toString();\n    }\n}\n\nfunction format(obj) {\n    if (typeof obj === 'string') {\n        const url = new URL(obj);\n\n        return url.toString();\n    }\n\n    if (!(obj instanceof URL)) {\n        const userPass =\n            obj.username && obj.password ?\n                `${obj.username}:${obj.password}@` :\n                '';\n        const auth = obj.auth ? obj.auth + '@' : '';\n        const port = obj.port ? ':' + obj.port : '';\n        const protocol = obj.protocol ? obj.protocol + '//' : '';\n        const host = obj.host || '';\n        const hostname = obj.hostname || '';\n        const search = obj.search || (obj.query ? '?' + obj.query : '');\n        const hash = obj.hash || '';\n        const pathname = obj.pathname || '';\n        const path = obj.path || pathname + search;\n\n        return `${protocol}${userPass || auth}${host ||\n            hostname + port}${path}${hash}`;\n    }\n}\n\nmodule.exports = {\n    URLWithLegacySupport,\n    URLSearchParams: self.URLSearchParams,\n    defaultBase,\n    format\n};\n", "'use strict';\n\nconst { URLWithLegacySupport, format } = require('./url');\n\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n    let protocol = location.protocol ?\n        location.protocol.replace(':', '') :\n        'http';\n\n    // Check protocol map\n    protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';\n    let urlParsed;\n\n    try {\n        urlParsed = new URLWithLegacySupport(url);\n    } catch (err) {\n        urlParsed = {};\n    }\n\n    const base = Object.assign({}, location, {\n        protocol: protocol || urlParsed.protocol,\n        host: location.host || urlParsed.host\n    });\n\n    return new URLWithLegacySupport(url, format(base)).toString();\n};\n", "'use strict';\n\nconst {\n    URLWithLegacySupport,\n    format,\n    URLSearchParams,\n    defaultBase\n} = require('./src/url');\nconst relative = require('./src/relative');\n\nmodule.exports = {\n    URL: URLWithLegacySupport,\n    URLSearchParams,\n    format,\n    relative,\n    defaultBase\n};\n", "'use strict'\n\nconst { Buffer } = require('buffer')\nconst ieee754 = require('ieee754')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst parser = require('./decoder.asm')\nconst utils = require('./utils')\nconst c = require('./constants')\nconst Simple = require('./simple')\nconst Tagged = require('./tagged')\nconst { URL } = require('iso-url')\n\n/**\n * Transform binary cbor data into JavaScript objects.\n */\nclass Decoder {\n  /**\n   * @param {Object} [opts={}]\n   * @param {number} [opts.size=65536] - Size of the allocated heap.\n   */\n  constructor (opts) {\n    opts = opts || {}\n\n    if (!opts.size || opts.size < 0x10000) {\n      opts.size = 0x10000\n    } else {\n      // Ensure the size is a power of 2\n      opts.size = utils.nextPowerOf2(opts.size)\n    }\n\n    // Heap use to share the input with the parser\n    this._heap = new ArrayBuffer(opts.size)\n    this._heap8 = new Uint8Array(this._heap)\n    this._buffer = Buffer.from(this._heap)\n\n    this._reset()\n\n    // Known tags\n    this._knownTags = Object.assign({\n      0: (val) => new Date(val),\n      1: (val) => new Date(val * 1000),\n      2: (val) => utils.arrayBufferToBignumber(val),\n      3: (val) => c.NEG_ONE.minus(utils.arrayBufferToBignumber(val)),\n      4: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TEN.pow(v[0]).times(v[1])\n      },\n      5: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TWO.pow(v[0]).times(v[1])\n      },\n      32: (val) => new URL(val),\n      35: (val) => new RegExp(val)\n    }, opts.tags)\n\n    // Initialize asm based parser\n    this.parser = parser(global, {\n      // eslint-disable-next-line no-console\n      log: console.log.bind(console),\n      pushInt: this.pushInt.bind(this),\n      pushInt32: this.pushInt32.bind(this),\n      pushInt32Neg: this.pushInt32Neg.bind(this),\n      pushInt64: this.pushInt64.bind(this),\n      pushInt64Neg: this.pushInt64Neg.bind(this),\n      pushFloat: this.pushFloat.bind(this),\n      pushFloatSingle: this.pushFloatSingle.bind(this),\n      pushFloatDouble: this.pushFloatDouble.bind(this),\n      pushTrue: this.pushTrue.bind(this),\n      pushFalse: this.pushFalse.bind(this),\n      pushUndefined: this.pushUndefined.bind(this),\n      pushNull: this.pushNull.bind(this),\n      pushInfinity: this.pushInfinity.bind(this),\n      pushInfinityNeg: this.pushInfinityNeg.bind(this),\n      pushNaN: this.pushNaN.bind(this),\n      pushNaNNeg: this.pushNaNNeg.bind(this),\n      pushArrayStart: this.pushArrayStart.bind(this),\n      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),\n      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),\n      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),\n      pushObjectStart: this.pushObjectStart.bind(this),\n      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),\n      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),\n      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),\n      pushByteString: this.pushByteString.bind(this),\n      pushByteStringStart: this.pushByteStringStart.bind(this),\n      pushUtf8String: this.pushUtf8String.bind(this),\n      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),\n      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),\n      pushTagUnassigned: this.pushTagUnassigned.bind(this),\n      pushTagStart: this.pushTagStart.bind(this),\n      pushTagStart4: this.pushTagStart4.bind(this),\n      pushTagStart8: this.pushTagStart8.bind(this),\n      pushBreak: this.pushBreak.bind(this)\n    }, this._heap)\n  }\n\n  get _depth () {\n    return this._parents.length\n  }\n\n  get _currentParent () {\n    return this._parents[this._depth - 1]\n  }\n\n  get _ref () {\n    return this._currentParent.ref\n  }\n\n  // Finish the current parent\n  _closeParent () {\n    var p = this._parents.pop()\n\n    if (p.length > 0) {\n      throw new Error(`Missing ${p.length} elements`)\n    }\n\n    switch (p.type) {\n      case c.PARENT.TAG:\n        this._push(\n          this.createTag(p.ref[0], p.ref[1])\n        )\n        break\n      case c.PARENT.BYTE_STRING:\n        this._push(this.createByteString(p.ref, p.length))\n        break\n      case c.PARENT.UTF8_STRING:\n        this._push(this.createUtf8String(p.ref, p.length))\n        break\n      case c.PARENT.MAP:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createMap(p.ref, p.length))\n        break\n      case c.PARENT.OBJECT:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createObject(p.ref, p.length))\n        break\n      case c.PARENT.ARRAY:\n        this._push(this.createArray(p.ref, p.length))\n        break\n      default:\n        break\n    }\n\n    if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {\n      this._dec()\n    }\n  }\n\n  // Reduce the expected length of the current parent by one\n  _dec () {\n    const p = this._currentParent\n    // The current parent does not know the epxected child length\n\n    if (p.length < 0) {\n      return\n    }\n\n    p.length--\n\n    // All children were seen, we can close the current parent\n    if (p.length === 0) {\n      this._closeParent()\n    }\n  }\n\n  // Push any value to the current parent\n  _push (val, hasChildren) {\n    const p = this._currentParent\n    p.values++\n\n    switch (p.type) {\n      case c.PARENT.ARRAY:\n      case c.PARENT.BYTE_STRING:\n      case c.PARENT.UTF8_STRING:\n        if (p.length > -1) {\n          this._ref[this._ref.length - p.length] = val\n        } else {\n          this._ref.push(val)\n        }\n        this._dec()\n        break\n      case c.PARENT.OBJECT:\n        if (p.tmpKey != null) {\n          this._ref[p.tmpKey] = val\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n\n          if (typeof p.tmpKey !== 'string') {\n            // too bad, convert to a Map\n            p.type = c.PARENT.MAP\n            p.ref = utils.buildMap(p.ref)\n          }\n        }\n        break\n      case c.PARENT.MAP:\n        if (p.tmpKey != null) {\n          this._ref.set(p.tmpKey, val)\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n        }\n        break\n      case c.PARENT.TAG:\n        this._ref.push(val)\n        if (!hasChildren) {\n          this._dec()\n        }\n        break\n      default:\n        throw new Error('Unknown parent type')\n    }\n  }\n\n  // Create a new parent in the parents list\n  _createParent (obj, type, len) {\n    this._parents[this._depth] = {\n      type: type,\n      length: len,\n      ref: obj,\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  // Reset all state back to the beginning, also used for initiatlization\n  _reset () {\n    this._res = []\n    this._parents = [{\n      type: c.PARENT.ARRAY,\n      length: -1,\n      ref: this._res,\n      values: 0,\n      tmpKey: null\n    }]\n  }\n\n  // -- Interface to customize deoding behaviour\n  createTag (tagNumber, value) {\n    const typ = this._knownTags[tagNumber]\n\n    if (!typ) {\n      return new Tagged(tagNumber, value)\n    }\n\n    return typ(value)\n  }\n\n  createMap (obj, len) {\n    return obj\n  }\n\n  createObject (obj, len) {\n    return obj\n  }\n\n  createArray (arr, len) {\n    return arr\n  }\n\n  createByteString (raw, len) {\n    return Buffer.concat(raw)\n  }\n\n  createByteStringFromHeap (start, end) {\n    if (start === end) {\n      return Buffer.alloc(0)\n    }\n\n    return Buffer.from(this._heap.slice(start, end))\n  }\n\n  createInt (val) {\n    return val\n  }\n\n  createInt32 (f, g) {\n    return utils.buildInt32(f, g)\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return utils.buildInt64(f1, f2, g1, g2)\n  }\n\n  createFloat (val) {\n    return val\n  }\n\n  createFloatSingle (a, b, c, d) {\n    return ieee754.read([a, b, c, d], 0, false, 23, 4)\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8)\n  }\n\n  createInt32Neg (f, g) {\n    return -1 - utils.buildInt32(f, g)\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    const f = utils.buildInt32(f1, f2)\n    const g = utils.buildInt32(g1, g2)\n\n    if (f > c.MAX_SAFE_HIGH) {\n      return c.NEG_ONE.minus(new Bignumber(f).times(c.SHIFT32).plus(g))\n    }\n\n    return -1 - ((f * c.SHIFT32) + g)\n  }\n\n  createTrue () {\n    return true\n  }\n\n  createFalse () {\n    return false\n  }\n\n  createNull () {\n    return null\n  }\n\n  createUndefined () {\n    return undefined\n  }\n\n  createInfinity () {\n    return Infinity\n  }\n\n  createInfinityNeg () {\n    return -Infinity\n  }\n\n  createNaN () {\n    return NaN\n  }\n\n  createNaNNeg () {\n    return -NaN\n  }\n\n  createUtf8String (raw, len) {\n    return raw.join('')\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    if (start === end) {\n      return ''\n    }\n\n    return this._buffer.toString('utf8', start, end)\n  }\n\n  createSimpleUnassigned (val) {\n    return new Simple(val)\n  }\n\n  // -- Interface for decoder.asm.js\n\n  pushInt (val) {\n    this._push(this.createInt(val))\n  }\n\n  pushInt32 (f, g) {\n    this._push(this.createInt32(f, g))\n  }\n\n  pushInt64 (f1, f2, g1, g2) {\n    this._push(this.createInt64(f1, f2, g1, g2))\n  }\n\n  pushFloat (val) {\n    this._push(this.createFloat(val))\n  }\n\n  pushFloatSingle (a, b, c, d) {\n    this._push(this.createFloatSingle(a, b, c, d))\n  }\n\n  pushFloatDouble (a, b, c, d, e, f, g, h) {\n    this._push(this.createFloatDouble(a, b, c, d, e, f, g, h))\n  }\n\n  pushInt32Neg (f, g) {\n    this._push(this.createInt32Neg(f, g))\n  }\n\n  pushInt64Neg (f1, f2, g1, g2) {\n    this._push(this.createInt64Neg(f1, f2, g1, g2))\n  }\n\n  pushTrue () {\n    this._push(this.createTrue())\n  }\n\n  pushFalse () {\n    this._push(this.createFalse())\n  }\n\n  pushNull () {\n    this._push(this.createNull())\n  }\n\n  pushUndefined () {\n    this._push(this.createUndefined())\n  }\n\n  pushInfinity () {\n    this._push(this.createInfinity())\n  }\n\n  pushInfinityNeg () {\n    this._push(this.createInfinityNeg())\n  }\n\n  pushNaN () {\n    this._push(this.createNaN())\n  }\n\n  pushNaNNeg () {\n    this._push(this.createNaNNeg())\n  }\n\n  pushArrayStart () {\n    this._createParent([], c.PARENT.ARRAY, -1)\n  }\n\n  pushArrayStartFixed (len) {\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createArrayStartFixed(len)\n  }\n\n  pushObjectStart () {\n    this._createObjectStartFixed(-1)\n  }\n\n  pushObjectStartFixed (len) {\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createObjectStartFixed(len)\n  }\n\n  pushByteStringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.BYTE_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushByteString (start, end) {\n    this._push(this.createByteStringFromHeap(start, end))\n  }\n\n  pushUtf8StringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.UTF8_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushUtf8String (start, end) {\n    this._push(this.createUtf8StringFromHeap(start, end))\n  }\n\n  pushSimpleUnassigned (val) {\n    this._push(this.createSimpleUnassigned(val))\n  }\n\n  pushTagStart (tag) {\n    this._parents[this._depth] = {\n      type: c.PARENT.TAG,\n      length: 1,\n      ref: [tag]\n    }\n  }\n\n  pushTagStart4 (f, g) {\n    this.pushTagStart(utils.buildInt32(f, g))\n  }\n\n  pushTagStart8 (f1, f2, g1, g2) {\n    this.pushTagStart(utils.buildInt64(f1, f2, g1, g2))\n  }\n\n  pushTagUnassigned (tagNumber) {\n    this._push(this.createTag(tagNumber))\n  }\n\n  pushBreak () {\n    if (this._currentParent.length > -1) {\n      throw new Error('Unexpected break')\n    }\n\n    this._closeParent()\n  }\n\n  _createObjectStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createObject({}))\n      return\n    }\n\n    this._createParent({}, c.PARENT.OBJECT, len)\n  }\n\n  _createArrayStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createArray([]))\n      return\n    }\n\n    this._createParent(new Array(len), c.PARENT.ARRAY, len)\n  }\n\n  _decode (input) {\n    if (input.byteLength === 0) {\n      throw new Error('Input too short')\n    }\n\n    this._reset()\n    this._heap8.set(input)\n    const code = this.parser.parse(input.byteLength)\n\n    if (this._depth > 1) {\n      while (this._currentParent.length === 0) {\n        this._closeParent()\n      }\n      if (this._depth > 1) {\n        throw new Error('Undeterminated nesting')\n      }\n    }\n\n    if (code > 0) {\n      throw new Error('Failed to parse')\n    }\n\n    if (this._res.length === 0) {\n      throw new Error('No valid result')\n    }\n  }\n\n  // -- Public Interface\n\n  decodeFirst (input) {\n    this._decode(input)\n\n    return this._res[0]\n  }\n\n  decodeAll (input) {\n    this._decode(input)\n\n    return this._res\n  }\n\n  /**\n   * Decode the first cbor object.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {*}\n   */\n  static decode (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeFirst(input)\n  }\n\n  /**\n   * Decode all cbor objects.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {Array<*>}\n   */\n  static decodeAll (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeAll(input)\n  }\n}\n\nDecoder.decodeFirst = Decoder.decode\n\nmodule.exports = Decoder\n", "'use strict'\n\nconst { Buffer } = require('buffer')\nconst Decoder = require('./decoder')\nconst utils = require('./utils')\n\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n */\nclass Diagnose extends Decoder {\n  createTag (tagNumber, value) {\n    return `${tagNumber}(${value})`\n  }\n\n  createInt (val) {\n    return super.createInt(val).toString()\n  }\n\n  createInt32 (f, g) {\n    return super.createInt32(f, g).toString()\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return super.createInt64(f1, f2, g1, g2).toString()\n  }\n\n  createInt32Neg (f, g) {\n    return super.createInt32Neg(f, g).toString()\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    return super.createInt64Neg(f1, f2, g1, g2).toString()\n  }\n\n  createTrue () {\n    return 'true'\n  }\n\n  createFalse () {\n    return 'false'\n  }\n\n  createFloat (val) {\n    const fl = super.createFloat(val)\n    if (utils.isNegativeZero(val)) {\n      return '-0_1'\n    }\n\n    return `${fl}_1`\n  }\n\n  createFloatSingle (a, b, c, d) {\n    const fl = super.createFloatSingle(a, b, c, d)\n    return `${fl}_2`\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h)\n    return `${fl}_3`\n  }\n\n  createByteString (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n    return `h'${val}`\n  }\n\n  createByteStringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createByteStringFromHeap(start, end)\n    )).toString('hex')\n\n    return `h'${val}'`\n  }\n\n  createInfinity () {\n    return 'Infinity_1'\n  }\n\n  createInfinityNeg () {\n    return '-Infinity_1'\n  }\n\n  createNaN () {\n    return 'NaN_1'\n  }\n\n  createNaNNeg () {\n    return '-NaN_1'\n  }\n\n  createNull () {\n    return 'null'\n  }\n\n  createUndefined () {\n    return 'undefined'\n  }\n\n  createSimpleUnassigned (val) {\n    return `simple(${val})`\n  }\n\n  createArray (arr, len) {\n    const val = super.createArray(arr, len)\n\n    if (len === -1) {\n      // indefinite\n      return `[_ ${val.join(', ')}]`\n    }\n\n    return `[${val.join(', ')}]`\n  }\n\n  createMap (map, len) {\n    const val = super.createMap(map)\n    const list = Array.from(val.keys())\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${list}}`\n    }\n\n    return `{${list}}`\n  }\n\n  createObject (obj, len) {\n    const val = super.createObject(obj)\n    const map = Object.keys(val)\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${map}}`\n    }\n\n    return `{${map}}`\n  }\n\n  createUtf8String (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n\n    return `\"${val}\"`\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createUtf8StringFromHeap(start, end)\n    )).toString('utf8')\n\n    return `\"${val}\"`\n  }\n\n  static diagnose (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Diagnose()\n    return dec.decodeFirst(input)\n  }\n}\n\nmodule.exports = Diagnose\n\nfunction collectObject (val) {\n  return (acc, key) => {\n    if (acc) {\n      return `${acc}, ${key}: ${val[key]}`\n    }\n    return `${key}: ${val[key]}`\n  }\n}\n", "'use strict'\n\nconst { Buffer } = require('buffer')\nconst { URL } = require('iso-url')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst utils = require('./utils')\nconst constants = require('./constants')\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst SYMS = constants.SYMS\nconst TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\n\nconst MAXINT_BN = new Bignumber('0x20000000000000')\nconst BUF_NAN = Buffer.from('f97e00', 'hex')\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex')\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex')\n\nfunction toType (obj) {\n  // [object Type]\n  // --------8---1\n  return ({}).toString.call(obj).slice(8, -1)\n}\n\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor (options) {\n    options = options || {}\n\n    this.streaming = typeof options.stream === 'function'\n    this.onData = options.stream\n\n    this.semanticTypes = [\n      [URL, this._pushUrl],\n      [Bignumber, this._pushBigNumber]\n    ]\n\n    const addTypes = options.genTypes || []\n    const len = addTypes.length\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(\n        addTypes[i][0],\n        addTypes[i][1]\n      )\n    }\n\n    this._reset()\n  }\n\n  addSemanticType (type, fun) {\n    const len = this.semanticTypes.length\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0]\n      if (typ === type) {\n        const old = this.semanticTypes[i][1]\n        this.semanticTypes[i][1] = fun\n        return old\n      }\n    }\n    this.semanticTypes.push([type, fun])\n    return null\n  }\n\n  push (val) {\n    if (!val) {\n      return true\n    }\n\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = 0\n    this.resultLength[this.offset] = val.length\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  pushWrite (val, method, len) {\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = method\n    this.resultLength[this.offset] = len\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  _pushUInt8 (val) {\n    return this.pushWrite(val, 1, 1)\n  }\n\n  _pushUInt16BE (val) {\n    return this.pushWrite(val, 2, 2)\n  }\n\n  _pushUInt32BE (val) {\n    return this.pushWrite(val, 3, 4)\n  }\n\n  _pushDoubleBE (val) {\n    return this.pushWrite(val, 4, 8)\n  }\n\n  _pushNaN () {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity (obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat (obj) {\n    const b2 = Buffer.allocUnsafe(2)\n\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2)\n      }\n    }\n\n    const b4 = Buffer.allocUnsafe(4)\n    b4.writeFloatBE(obj, 0)\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4)\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt (obj, mt, orig) {\n    const m = mt << 5\n    if (obj < 24) {\n      return this._pushUInt8(m | obj)\n    }\n\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n    }\n\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n    }\n\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n    }\n\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n        this._pushUInt32BE(obj % SHIFT32)\n    }\n\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig)\n    }\n\n    return this._pushFloat(obj)\n  }\n\n  _pushIntNum (obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber (obj) {\n    switch (false) {\n      case (obj === obj): // eslint-disable-line\n        return this._pushNaN(obj)\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case ((obj % 1) !== 0):\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString (obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len)\n  }\n\n  _pushBoolean (obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined (obj) {\n    return this._pushUInt8(UNDEFINED)\n  }\n\n  _pushArray (gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag (tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate (gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000))\n  }\n\n  _pushBuffer (gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter (gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp (gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl (gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushBigint (obj) {\n    let tag = TAG.POS_BIGINT\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      tag = TAG.NEG_BIGINT\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber (gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec))\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      obj.size,\n      Array.from(obj)\n    )\n  }\n\n  _pushObject (obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL)\n    }\n\n    var len = this.semanticTypes.length\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj)\n      }\n    }\n\n    var f = obj.encodeCBOR\n    if (typeof f === 'function') {\n      return f.call(obj, this)\n    }\n\n    var keys = Object.keys(obj)\n    var keyLength = keys.length\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      keyLength,\n      keys.map((k) => [k, obj[k]])\n    )\n  }\n\n  _pushRawMap (len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0])\n      return a\n    }).sort(utils.keySorter)\n\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false\n      }\n\n      if (!this.pushAny(map[j][1])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n  write (obj) {\n    return this.pushAny(obj)\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny (obj) {\n    var typ = toType(obj)\n\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj)\n      case 'String':\n        return this._pushString(obj)\n      case 'Boolean':\n        return this._pushBoolean(obj)\n      case 'Object':\n        return this._pushObject(obj)\n      case 'Array':\n        return this._pushArray(this, obj)\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj))\n      case 'Null':\n        return this._pushUInt8(NULL)\n      case 'Undefined':\n        return this._pushUndefined(obj)\n      case 'Map':\n        return this._pushMap(this, obj)\n      case 'Set':\n        return this._pushSet(this, obj)\n      case 'URL':\n        return this._pushUrl(this, obj)\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj)\n      case 'Date':\n        return this._pushDate(this, obj)\n      case 'RegExp':\n        return this._pushRegexp(this, obj)\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(undefined)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''))\n    }\n  }\n\n  finalize () {\n    if (this.offset === 0) {\n      return null\n    }\n\n    var result = this.result\n    var resultLength = this.resultLength\n    var resultMethod = this.resultMethod\n    var offset = this.offset\n\n    // Determine the size of the buffer\n    var size = 0\n    var i = 0\n\n    for (; i < offset; i++) {\n      size += resultLength[i]\n    }\n\n    var res = Buffer.allocUnsafe(size)\n    var index = 0\n    var length = 0\n\n    // Write the content into the result buffer\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i]\n\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index)\n          break\n        case 1:\n          res.writeUInt8(result[i], index, true)\n          break\n        case 2:\n          res.writeUInt16BE(result[i], index, true)\n          break\n        case 3:\n          res.writeUInt32BE(result[i], index, true)\n          break\n        case 4:\n          res.writeDoubleBE(result[i], index, true)\n          break\n        case 5:\n          res.write(result[i], index, length, 'utf8')\n          break\n        default:\n          throw new Error('unkown method')\n      }\n\n      index += length\n    }\n\n    var tmp = res\n\n    this._reset()\n\n    return tmp\n  }\n\n  _reset () {\n    this.result = []\n    this.resultMethod = []\n    this.resultLength = []\n    this.offset = 0\n  }\n\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n  static encode (o) {\n    const enc = new Encoder()\n    const ret = enc.pushAny(o)\n    if (!ret) {\n      throw new Error('Failed to encode input')\n    }\n\n    return enc.finalize()\n  }\n}\n\nmodule.exports = Encoder\n", "'use strict'\n\n// exports.Commented = require('./commented')\nexports.Diagnose = require('./diagnose')\nexports.Decoder = require('./decoder')\nexports.Encoder = require('./encoder')\nexports.Simple = require('./simple')\nexports.Tagged = require('./tagged')\n\n// exports.comment = exports.Commented.comment\nexports.decodeAll = exports.Decoder.decodeAll\nexports.decodeFirst = exports.Decoder.decodeFirst\nexports.diagnose = exports.Diagnose.diagnose\nexports.encode = exports.Encoder.encode\nexports.decode = exports.Decoder.decode\n\nexports.leveldb = {\n  decode: exports.Decoder.decodeAll,\n  encode: exports.Encoder.encode,\n  buffer: true,\n  name: 'cbor'\n}\n", "/* jshint -W086: true */\n// +----------------------------------------------------------------------+\n// | murmurHash3js.js v3.0.1 // https://github.com/pid/murmurHash3js\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012-2015 Karan Lyons                                       |\n// | https://github.com/karanlyons/murmurHash3.js/blob/c1778f75792abef7bdd74bc85d2d4e1a3d25cfe9/murmurHash3.js |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n\n;(function (root, undefined) {\n    'use strict';\n\n    // Create a local object that'll be exported or referenced globally.\n    var library = {\n        'version': '3.0.0',\n        'x86': {},\n        'x64': {},\n        'inputValidation': true\n    };\n\n    // PRIVATE FUNCTIONS\n    // -----------------\n\n    function _validBytes(bytes) {\n        // check the input is an array or a typed array\n        if (!Array.isArray(bytes) && !ArrayBuffer.isView(bytes)) {\n            return false;\n        }\n\n        // check all bytes are actually bytes\n        for (var i = 0; i < bytes.length; i++) {\n            if (!Number.isInteger(bytes[i]) || bytes[i] < 0 || bytes[i] > 255) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function _x86Multiply(m, n) {\n        //\n        // Given two 32bit ints, returns the two multiplied together as a\n        // 32bit int.\n        //\n\n        return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);\n    }\n\n    function _x86Rotl(m, n) {\n        //\n        // Given a 32bit int and an int representing a number of bit positions,\n        // returns the 32bit int rotated left by that number of positions.\n        //\n\n        return (m << n) | (m >>> (32 - n));\n    }\n\n    function _x86Fmix(h) {\n        //\n        // Given a block, returns murmurHash3's final x86 mix of that block.\n        //\n\n        h ^= h >>> 16;\n        h = _x86Multiply(h, 0x85ebca6b);\n        h ^= h >>> 13;\n        h = _x86Multiply(h, 0xc2b2ae35);\n        h ^= h >>> 16;\n\n        return h;\n    }\n\n    function _x64Add(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // added together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n        var o = [0, 0, 0, 0];\n\n        o[3] += m[3] + n[3];\n        o[2] += o[3] >>> 16;\n        o[3] &= 0xffff;\n\n        o[2] += m[2] + n[2];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[1] += m[1] + n[1];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[0] += m[0] + n[0];\n        o[0] &= 0xffff;\n\n        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n    }\n\n    function _x64Multiply(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // multiplied together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n        var o = [0, 0, 0, 0];\n\n        o[3] += m[3] * n[3];\n        o[2] += o[3] >>> 16;\n        o[3] &= 0xffff;\n\n        o[2] += m[2] * n[3];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[2] += m[3] * n[2];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[1] += m[1] * n[3];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[1] += m[2] * n[2];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[1] += m[3] * n[1];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);\n        o[0] &= 0xffff;\n\n        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n    }\n\n    function _x64Rotl(m, n) {\n        //\n        // Given a 64bit int (as an array of two 32bit ints) and an int\n        // representing a number of bit positions, returns the 64bit int (as an\n        // array of two 32bit ints) rotated left by that number of positions.\n        //\n\n        n %= 64;\n\n        if (n === 32) {\n            return [m[1], m[0]];\n        } else if (n < 32) {\n            return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];\n        } else {\n            n -= 32;\n            return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];\n        }\n    }\n\n    function _x64LeftShift(m, n) {\n        //\n        // Given a 64bit int (as an array of two 32bit ints) and an int\n        // representing a number of bit positions, returns the 64bit int (as an\n        // array of two 32bit ints) shifted left by that number of positions.\n        //\n\n        n %= 64;\n\n        if (n === 0) {\n            return m;\n        } else if (n < 32) {\n            return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];\n        } else {\n            return [m[1] << (n - 32), 0];\n        }\n    }\n\n    function _x64Xor(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // xored together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        return [m[0] ^ n[0], m[1] ^ n[1]];\n    }\n\n    function _x64Fmix(h) {\n        //\n        // Given a block, returns murmurHash3's final x64 mix of that block.\n        // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n        // only place where we need to right shift 64bit ints.)\n        //\n\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n        h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n        h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n\n        return h;\n    }\n\n    // PUBLIC FUNCTIONS\n    // ----------------\n\n    library.x86.hash32 = function (bytes, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 32 bit hash\n        // using the x86 flavor of MurmurHash3, as an unsigned int.\n        //\n        if (library.inputValidation && !_validBytes(bytes)) {\n            return undefined;\n        }\n        seed = seed || 0;\n\n        var remainder = bytes.length % 4;\n        var blocks = bytes.length - remainder;\n\n        var h1 = seed;\n\n        var k1 = 0;\n\n        var c1 = 0xcc9e2d51;\n        var c2 = 0x1b873593;\n\n        for (var i = 0; i < blocks; i = i + 4) {\n            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);\n\n            k1 = _x86Multiply(k1, c1);\n            k1 = _x86Rotl(k1, 15);\n            k1 = _x86Multiply(k1, c2);\n\n            h1 ^= k1;\n            h1 = _x86Rotl(h1, 13);\n            h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n        }\n\n        k1 = 0;\n\n        switch (remainder) {\n            case 3:\n                k1 ^= bytes[i + 2] << 16;\n\n            case 2:\n                k1 ^= bytes[i + 1] << 8;\n\n            case 1:\n                k1 ^= bytes[i];\n                k1 = _x86Multiply(k1, c1);\n                k1 = _x86Rotl(k1, 15);\n                k1 = _x86Multiply(k1, c2);\n                h1 ^= k1;\n        }\n\n        h1 ^= bytes.length;\n        h1 = _x86Fmix(h1);\n\n        return h1 >>> 0;\n    };\n\n    library.x86.hash128 = function (bytes, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 128 bit\n        // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n        //\n        if (library.inputValidation && !_validBytes(bytes)) {\n            return undefined;\n        }\n\n        seed = seed || 0;\n        var remainder = bytes.length % 16;\n        var blocks = bytes.length - remainder;\n\n        var h1 = seed;\n        var h2 = seed;\n        var h3 = seed;\n        var h4 = seed;\n\n        var k1 = 0;\n        var k2 = 0;\n        var k3 = 0;\n        var k4 = 0;\n\n        var c1 = 0x239b961b;\n        var c2 = 0xab0e9789;\n        var c3 = 0x38b34ae5;\n        var c4 = 0xa1e38b93;\n\n        for (var i = 0; i < blocks; i = i + 16) {\n            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);\n            k2 = (bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24);\n            k3 = (bytes[i + 8]) | (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24);\n            k4 = (bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24);\n\n            k1 = _x86Multiply(k1, c1);\n            k1 = _x86Rotl(k1, 15);\n            k1 = _x86Multiply(k1, c2);\n            h1 ^= k1;\n\n            h1 = _x86Rotl(h1, 19);\n            h1 += h2;\n            h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n\n            k2 = _x86Multiply(k2, c2);\n            k2 = _x86Rotl(k2, 16);\n            k2 = _x86Multiply(k2, c3);\n            h2 ^= k2;\n\n            h2 = _x86Rotl(h2, 17);\n            h2 += h3;\n            h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n\n            k3 = _x86Multiply(k3, c3);\n            k3 = _x86Rotl(k3, 17);\n            k3 = _x86Multiply(k3, c4);\n            h3 ^= k3;\n\n            h3 = _x86Rotl(h3, 15);\n            h3 += h4;\n            h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n\n            k4 = _x86Multiply(k4, c4);\n            k4 = _x86Rotl(k4, 18);\n            k4 = _x86Multiply(k4, c1);\n            h4 ^= k4;\n\n            h4 = _x86Rotl(h4, 13);\n            h4 += h1;\n            h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n        }\n\n        k1 = 0;\n        k2 = 0;\n        k3 = 0;\n        k4 = 0;\n\n        switch (remainder) {\n            case 15:\n                k4 ^= bytes[i + 14] << 16;\n\n            case 14:\n                k4 ^= bytes[i + 13] << 8;\n\n            case 13:\n                k4 ^= bytes[i + 12];\n                k4 = _x86Multiply(k4, c4);\n                k4 = _x86Rotl(k4, 18);\n                k4 = _x86Multiply(k4, c1);\n                h4 ^= k4;\n\n            case 12:\n                k3 ^= bytes[i + 11] << 24;\n\n            case 11:\n                k3 ^= bytes[i + 10] << 16;\n\n            case 10:\n                k3 ^= bytes[i + 9] << 8;\n\n            case 9:\n                k3 ^= bytes[i + 8];\n                k3 = _x86Multiply(k3, c3);\n                k3 = _x86Rotl(k3, 17);\n                k3 = _x86Multiply(k3, c4);\n                h3 ^= k3;\n\n            case 8:\n                k2 ^= bytes[i + 7] << 24;\n\n            case 7:\n                k2 ^= bytes[i + 6] << 16;\n\n            case 6:\n                k2 ^= bytes[i + 5] << 8;\n\n            case 5:\n                k2 ^= bytes[i + 4];\n                k2 = _x86Multiply(k2, c2);\n                k2 = _x86Rotl(k2, 16);\n                k2 = _x86Multiply(k2, c3);\n                h2 ^= k2;\n\n            case 4:\n                k1 ^= bytes[i + 3] << 24;\n\n            case 3:\n                k1 ^= bytes[i + 2] << 16;\n\n            case 2:\n                k1 ^= bytes[i + 1] << 8;\n\n            case 1:\n                k1 ^= bytes[i];\n                k1 = _x86Multiply(k1, c1);\n                k1 = _x86Rotl(k1, 15);\n                k1 = _x86Multiply(k1, c2);\n                h1 ^= k1;\n        }\n\n        h1 ^= bytes.length;\n        h2 ^= bytes.length;\n        h3 ^= bytes.length;\n        h4 ^= bytes.length;\n\n        h1 += h2;\n        h1 += h3;\n        h1 += h4;\n        h2 += h1;\n        h3 += h1;\n        h4 += h1;\n\n        h1 = _x86Fmix(h1);\n        h2 = _x86Fmix(h2);\n        h3 = _x86Fmix(h3);\n        h4 = _x86Fmix(h4);\n\n        h1 += h2;\n        h1 += h3;\n        h1 += h4;\n        h2 += h1;\n        h3 += h1;\n        h4 += h1;\n\n        return (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8);\n    };\n\n    library.x64.hash128 = function (bytes, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 128 bit\n        // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n        //\n        if (library.inputValidation && !_validBytes(bytes)) {\n            return undefined;\n        }\n        seed = seed || 0;\n\n        var remainder = bytes.length % 16;\n        var blocks = bytes.length - remainder;\n\n        var h1 = [0, seed];\n        var h2 = [0, seed];\n\n        var k1 = [0, 0];\n        var k2 = [0, 0];\n\n        var c1 = [0x87c37b91, 0x114253d5];\n        var c2 = [0x4cf5ad43, 0x2745937f];\n\n        for (var i = 0; i < blocks; i = i + 16) {\n            k1 = [(bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24), (bytes[i]) |\n                (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24)];\n            k2 = [(bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24), (bytes[i + 8]) |\n                (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24)];\n\n            k1 = _x64Multiply(k1, c1);\n            k1 = _x64Rotl(k1, 31);\n            k1 = _x64Multiply(k1, c2);\n            h1 = _x64Xor(h1, k1);\n\n            h1 = _x64Rotl(h1, 27);\n            h1 = _x64Add(h1, h2);\n            h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n\n            k2 = _x64Multiply(k2, c2);\n            k2 = _x64Rotl(k2, 33);\n            k2 = _x64Multiply(k2, c1);\n            h2 = _x64Xor(h2, k2);\n\n            h2 = _x64Rotl(h2, 31);\n            h2 = _x64Add(h2, h1);\n            h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n        }\n\n        k1 = [0, 0];\n        k2 = [0, 0];\n\n        switch (remainder) {\n            case 15:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 14]], 48));\n\n            case 14:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 13]], 40));\n\n            case 13:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 12]], 32));\n\n            case 12:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 11]], 24));\n\n            case 11:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 10]], 16));\n\n            case 10:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 9]], 8));\n\n            case 9:\n                k2 = _x64Xor(k2, [0, bytes[i + 8]]);\n                k2 = _x64Multiply(k2, c2);\n                k2 = _x64Rotl(k2, 33);\n                k2 = _x64Multiply(k2, c1);\n                h2 = _x64Xor(h2, k2);\n\n            case 8:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 7]], 56));\n\n            case 7:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 6]], 48));\n\n            case 6:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 5]], 40));\n\n            case 5:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 4]], 32));\n\n            case 4:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 3]], 24));\n\n            case 3:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 2]], 16));\n\n            case 2:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 1]], 8));\n\n            case 1:\n                k1 = _x64Xor(k1, [0, bytes[i]]);\n                k1 = _x64Multiply(k1, c1);\n                k1 = _x64Rotl(k1, 31);\n                k1 = _x64Multiply(k1, c2);\n                h1 = _x64Xor(h1, k1);\n        }\n\n        h1 = _x64Xor(h1, [0, bytes.length]);\n        h2 = _x64Xor(h2, [0, bytes.length]);\n\n        h1 = _x64Add(h1, h2);\n        h2 = _x64Add(h2, h1);\n\n        h1 = _x64Fmix(h1);\n        h2 = _x64Fmix(h2);\n\n        h1 = _x64Add(h1, h2);\n        h2 = _x64Add(h2, h1);\n\n        return (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8);\n    };\n\n    // INITIALIZATION\n    // --------------\n\n    // Export murmurHash3 for CommonJS, either as an AMD module or just as part\n    // of the global object.\n    if (typeof exports !== 'undefined') {\n\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = library;\n        }\n\n        exports.murmurHash3 = library;\n\n    } else if (typeof define === 'function' && define.amd) {\n\n        define([], function () {\n            return library;\n        });\n    } else {\n\n        // Use murmurHash3.noConflict to restore `murmurHash3` back to its\n        // original value. Returns a reference to the library object, to allow\n        // it to be used under a different name.\n        library._murmurHash3 = root.murmurHash3;\n\n        library.noConflict = function () {\n            root.murmurHash3 = library._murmurHash3;\n            library._murmurHash3 = undefined;\n            library.noConflict = undefined;\n\n            return library;\n        };\n\n        root.murmurHash3 = library;\n    }\n})(this);\n", "module.exports = require('./lib/murmurHash3js');\n", "/* eslint-disable require-await */\n'use strict'\n\nconst multihash = require('multihashes')\n/**\n * @typedef {import('multihashes').HashName} HashName\n * @typedef {import('./types').Digest} Digest\n */\n\n/**\n * @type {Crypto}\n */\nconst crypto =\n  self.crypto ||\n  /** @type {typeof window.crypto} */\n  // @ts-ignore - unknown property\n  (self.msCrypto)\n\n/**\n *\n * @param {Uint8Array} data\n * @param {HashName} alg\n * @returns {Promise<Uint8Array>}\n */\nconst digest = async (data, alg) => {\n  if (typeof self === 'undefined' || !crypto) {\n    throw new Error(\n      'Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context'\n    )\n  }\n  switch (alg) {\n    case 'sha1':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-1' }, data))\n    case 'sha2-256':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-256' }, data))\n    case 'sha2-512':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-512' }, data))\n    case 'dbl-sha2-256': {\n      const d = await crypto.subtle.digest({ name: 'SHA-256' }, data)\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-256' }, d))\n    }\n    default:\n      throw new Error(`${alg} is not a supported algorithm`)\n  }\n}\n\nmodule.exports = {\n  /**\n   * @param {HashName} alg\n   * @returns {Digest}\n   */\n  factory: (alg) => async (data) => {\n    return digest(data, alg)\n  },\n  digest,\n  /**\n   * @param {Uint8Array} buf\n   * @param {HashName} alg\n   * @param {number} [length]\n   */\n  multihashing: async (buf, alg, length) => {\n    const h = await digest(buf, alg)\n    return multihash.encode(h, alg, length)\n  }\n}\n", "'use strict'\n\n/**\n * @param {number} number\n * @returns {Uint8Array}\n */\nconst fromNumberTo32BitBuf = (number) => {\n  const bytes = new Uint8Array(4)\n\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff\n    number = number >> 8\n  }\n\n  return bytes\n}\n\nmodule.exports = {\n  fromNumberTo32BitBuf\n}\n", "const ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array'\n\n// For convenience, let people hash a string, not just a Uint8Array\nfunction normalizeInput (input) {\n  let ret\n  if (input instanceof Uint8Array) {\n    ret = input\n  } else if (typeof input === 'string') {\n    const encoder = new TextEncoder()\n    ret = encoder.encode(input)\n  } else {\n    throw new Error(ERROR_MSG_INPUT)\n  }\n  return ret\n}\n\n// Converts a Uint8Array to a hexadecimal string\n// For example, toHex([255, 0, 255]) returns \"ff00ff\"\nfunction toHex (bytes) {\n  return Array.prototype.map\n    .call(bytes, function (n) {\n      return (n < 16 ? '0' : '') + n.toString(16)\n    })\n    .join('')\n}\n\n// Converts any value in [0...2^32-1] to an 8-character hex string\nfunction uint32ToHex (val) {\n  return (0x100000000 + val).toString(16).substring(1)\n}\n\n// For debugging: prints out hash state in the same format as the RFC\n// sample computation exactly, so that you can diff\nfunction debugPrint (label, arr, size) {\n  let msg = '\\n' + label + ' = '\n  for (let i = 0; i < arr.length; i += 2) {\n    if (size === 32) {\n      msg += uint32ToHex(arr[i]).toUpperCase()\n      msg += ' '\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n    } else if (size === 64) {\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n      msg += uint32ToHex(arr[i]).toUpperCase()\n    } else throw new Error('Invalid size ' + size)\n    if (i % 6 === 4) {\n      msg += '\\n' + new Array(label.length + 4).join(' ')\n    } else if (i < arr.length - 2) {\n      msg += ' '\n    }\n  }\n  console.log(msg)\n}\n\n// For performance testing: generates N bytes of input, hashes M times\n// Measures and prints MB/second hash performance each time\nfunction testSpeed (hashFn, N, M) {\n  let startMs = new Date().getTime()\n\n  const input = new Uint8Array(N)\n  for (let i = 0; i < N; i++) {\n    input[i] = i % 256\n  }\n  const genMs = new Date().getTime()\n  console.log('Generated random input in ' + (genMs - startMs) + 'ms')\n  startMs = genMs\n\n  for (let i = 0; i < M; i++) {\n    const hashHex = hashFn(input)\n    const hashMs = new Date().getTime()\n    const ms = hashMs - startMs\n    startMs = hashMs\n    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...')\n    console.log(\n      Math.round((N / (1 << 20) / (ms / 1000)) * 100) / 100 + ' MB PER SECOND'\n    )\n  }\n}\n\nmodule.exports = {\n  normalizeInput: normalizeInput,\n  toHex: toHex,\n  debugPrint: debugPrint,\n  testSpeed: testSpeed\n}\n", "// Blake2B in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nconst util = require('./util')\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA (v, a, b) {\n  const o0 = v[a] + v[b]\n  let o1 = v[a + 1] + v[b + 1]\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC (v, a, b0, b1) {\n  let o0 = v[a] + b0\n  if (b0 < 0) {\n    o0 += 0x100000000\n  }\n  let o1 = v[a + 1] + b1\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// Little-endian byte access\nfunction B2B_GET32 (arr, i) {\n  return arr[i] ^ (arr[i + 1] << 8) ^ (arr[i + 2] << 16) ^ (arr[i + 3] << 24)\n}\n\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G (a, b, c, d, ix, iy) {\n  const x0 = m[ix]\n  const x1 = m[ix + 1]\n  const y0 = m[iy]\n  const y1 = m[iy + 1]\n\n  ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n  ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n  let xor0 = v[d] ^ v[a]\n  let xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = xor1\n  v[d + 1] = xor0\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor0 >>> 24) ^ (xor1 << 8)\n  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)\n\n  ADD64AA(v, a, b)\n  ADD64AC(v, a, y0, y1)\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n  xor0 = v[d] ^ v[a]\n  xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = (xor0 >>> 16) ^ (xor1 << 16)\n  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor1 >>> 31) ^ (xor0 << 1)\n  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)\n}\n\n// Initialization Vector\nconst BLAKE2B_IV32 = new Uint32Array([\n  0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372,\n  0x5f1d36f1, 0xa54ff53a, 0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c,\n  0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19\n])\n\nconst SIGMA8 = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13,\n  6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1,\n  9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4,\n  10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5,\n  15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7,\n  14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2,\n  13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0,\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6,\n  1, 12, 0, 2, 11, 7, 5, 3\n]\n\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nconst SIGMA82 = new Uint8Array(\n  SIGMA8.map(function (x) {\n    return x * 2\n  })\n)\n\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nconst v = new Uint32Array(32)\nconst m = new Uint32Array(32)\nfunction blake2bCompress (ctx, last) {\n  let i = 0\n\n  // init work variables\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i]\n    v[i + 16] = BLAKE2B_IV32[i]\n  }\n\n  // low 64 bits of offset\n  v[24] = v[24] ^ ctx.t\n  v[25] = v[25] ^ (ctx.t / 0x100000000)\n  // high 64 bits not supported, offset may not be higher than 2**53-1\n\n  // last block flag set ?\n  if (last) {\n    v[28] = ~v[28]\n    v[29] = ~v[29]\n  }\n\n  // get little-endian words\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i)\n  }\n\n  // twelve rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 64)\n  for (i = 0; i < 12; i++) {\n    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])\n  }\n  // util.debugPrint('   (i=12) v[16]', v, 64)\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]\n  }\n  // util.debugPrint('h[8]', ctx.h, 64)\n}\n\n// reusable parameterBlock\nconst parameterBlock = new Uint8Array([\n  0,\n  0,\n  0,\n  0, //  0: outlen, keylen, fanout, depth\n  0,\n  0,\n  0,\n  0, //  4: leaf length, sequential mode\n  0,\n  0,\n  0,\n  0, //  8: node offset\n  0,\n  0,\n  0,\n  0, // 12: node offset\n  0,\n  0,\n  0,\n  0, // 16: node depth, inner length, rfu\n  0,\n  0,\n  0,\n  0, // 20: rfu\n  0,\n  0,\n  0,\n  0, // 24: rfu\n  0,\n  0,\n  0,\n  0, // 28: rfu\n  0,\n  0,\n  0,\n  0, // 32: salt\n  0,\n  0,\n  0,\n  0, // 36: salt\n  0,\n  0,\n  0,\n  0, // 40: salt\n  0,\n  0,\n  0,\n  0, // 44: salt\n  0,\n  0,\n  0,\n  0, // 48: personal\n  0,\n  0,\n  0,\n  0, // 52: personal\n  0,\n  0,\n  0,\n  0, // 56: personal\n  0,\n  0,\n  0,\n  0 // 60: personal\n])\n\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\n// Takes an optinal Uint8Array salt\n// Takes an optinal Uint8Array personal\nfunction blake2bInit (outlen, key, salt, personal) {\n  if (outlen === 0 || outlen > 64) {\n    throw new Error('Illegal output length, expected 0 < length <= 64')\n  }\n  if (key && key.length > 64) {\n    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')\n  }\n  if (salt && salt.length !== 16) {\n    throw new Error('Illegal salt, expected Uint8Array with length is 16')\n  }\n  if (personal && personal.length !== 16) {\n    throw new Error('Illegal personal, expected Uint8Array with length is 16')\n  }\n\n  // state, 'param block'\n  const ctx = {\n    b: new Uint8Array(128),\n    h: new Uint32Array(16),\n    t: 0, // input count\n    c: 0, // pointer within buffer\n    outlen: outlen // output length in bytes\n  }\n\n  // initialize parameterBlock before usage\n  parameterBlock.fill(0)\n  parameterBlock[0] = outlen\n  if (key) parameterBlock[1] = key.length\n  parameterBlock[2] = 1 // fanout\n  parameterBlock[3] = 1 // depth\n  if (salt) parameterBlock.set(salt, 32)\n  if (personal) parameterBlock.set(personal, 48)\n\n  // initialize hash state\n  for (let i = 0; i < 16; i++) {\n    ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4)\n  }\n\n  // key the hash, if applicable\n  if (key) {\n    blake2bUpdate(ctx, key)\n    // at the end\n    ctx.c = 128\n  }\n\n  return ctx\n}\n\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate (ctx, input) {\n  for (let i = 0; i < input.length; i++) {\n    if (ctx.c === 128) {\n      // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2bCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal (ctx) {\n  ctx.t += ctx.c // mark last block offset\n\n  while (ctx.c < 128) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2bCompress(ctx, true) // final block flag = 1\n\n  // little endian convert and store\n  const out = new Uint8Array(ctx.outlen)\n  for (let i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> (8 * (i & 3))\n  }\n  return out\n}\n\n// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\nfunction blake2b (input, key, outlen, salt, personal) {\n  // preprocess inputs\n  outlen = outlen || 64\n  input = util.normalizeInput(input)\n  if (salt) {\n    salt = util.normalizeInput(salt)\n  }\n  if (personal) {\n    personal = util.normalizeInput(personal)\n  }\n\n  // do the math\n  const ctx = blake2bInit(outlen, key, salt, personal)\n  blake2bUpdate(ctx, input)\n  return blake2bFinal(ctx)\n}\n\n// Computes the BLAKE2B hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\nfunction blake2bHex (input, key, outlen, salt, personal) {\n  const output = blake2b(input, key, outlen, salt, personal)\n  return util.toHex(output)\n}\n\nmodule.exports = {\n  blake2b: blake2b,\n  blake2bHex: blake2bHex,\n  blake2bInit: blake2bInit,\n  blake2bUpdate: blake2bUpdate,\n  blake2bFinal: blake2bFinal\n}\n", "// BLAKE2s hash function in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nconst util = require('./util')\n\n// Little-endian byte access.\n// Expects a Uint8Array and an index\n// Returns the little-endian uint32 at v[i..i+3]\nfunction B2S_GET32 (v, i) {\n  return v[i] ^ (v[i + 1] << 8) ^ (v[i + 2] << 16) ^ (v[i + 3] << 24)\n}\n\n// Mixing function G.\nfunction B2S_G (a, b, c, d, x, y) {\n  v[a] = v[a] + v[b] + x\n  v[d] = ROTR32(v[d] ^ v[a], 16)\n  v[c] = v[c] + v[d]\n  v[b] = ROTR32(v[b] ^ v[c], 12)\n  v[a] = v[a] + v[b] + y\n  v[d] = ROTR32(v[d] ^ v[a], 8)\n  v[c] = v[c] + v[d]\n  v[b] = ROTR32(v[b] ^ v[c], 7)\n}\n\n// 32-bit right rotation\n// x should be a uint32\n// y must be between 1 and 31, inclusive\nfunction ROTR32 (x, y) {\n  return (x >>> y) ^ (x << (32 - y))\n}\n\n// Initialization Vector.\nconst BLAKE2S_IV = new Uint32Array([\n  0x6a09e667,\n  0xbb67ae85,\n  0x3c6ef372,\n  0xa54ff53a,\n  0x510e527f,\n  0x9b05688c,\n  0x1f83d9ab,\n  0x5be0cd19\n])\n\nconst SIGMA = new Uint8Array([\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  14,\n  10,\n  4,\n  8,\n  9,\n  15,\n  13,\n  6,\n  1,\n  12,\n  0,\n  2,\n  11,\n  7,\n  5,\n  3,\n  11,\n  8,\n  12,\n  0,\n  5,\n  2,\n  15,\n  13,\n  10,\n  14,\n  3,\n  6,\n  7,\n  1,\n  9,\n  4,\n  7,\n  9,\n  3,\n  1,\n  13,\n  12,\n  11,\n  14,\n  2,\n  6,\n  5,\n  10,\n  4,\n  0,\n  15,\n  8,\n  9,\n  0,\n  5,\n  7,\n  2,\n  4,\n  10,\n  15,\n  14,\n  1,\n  11,\n  12,\n  6,\n  8,\n  3,\n  13,\n  2,\n  12,\n  6,\n  10,\n  0,\n  11,\n  8,\n  3,\n  4,\n  13,\n  7,\n  5,\n  15,\n  14,\n  1,\n  9,\n  12,\n  5,\n  1,\n  15,\n  14,\n  13,\n  4,\n  10,\n  0,\n  7,\n  6,\n  3,\n  9,\n  2,\n  8,\n  11,\n  13,\n  11,\n  7,\n  14,\n  12,\n  1,\n  3,\n  9,\n  5,\n  0,\n  15,\n  4,\n  8,\n  6,\n  2,\n  10,\n  6,\n  15,\n  14,\n  9,\n  11,\n  3,\n  0,\n  8,\n  12,\n  2,\n  13,\n  7,\n  1,\n  4,\n  10,\n  5,\n  10,\n  2,\n  8,\n  4,\n  7,\n  6,\n  1,\n  5,\n  15,\n  11,\n  9,\n  14,\n  3,\n  12,\n  13,\n  0\n])\n\n// Compression function. \"last\" flag indicates last block\nconst v = new Uint32Array(16)\nconst m = new Uint32Array(16)\nfunction blake2sCompress (ctx, last) {\n  let i = 0\n  for (i = 0; i < 8; i++) {\n    // init work variables\n    v[i] = ctx.h[i]\n    v[i + 8] = BLAKE2S_IV[i]\n  }\n\n  v[12] ^= ctx.t // low 32 bits of offset\n  v[13] ^= ctx.t / 0x100000000 // high 32 bits\n  if (last) {\n    // last block flag set ?\n    v[14] = ~v[14]\n  }\n\n  for (i = 0; i < 16; i++) {\n    // get little-endian words\n    m[i] = B2S_GET32(ctx.b, 4 * i)\n  }\n\n  // ten rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 32)\n  for (i = 0; i < 10; i++) {\n    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)\n    B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]])\n    B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]])\n    B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]])\n    B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]])\n    B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]])\n    B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]])\n    B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]])\n    B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]])\n  }\n  // util.debugPrint('   (i=10) v[16]', v, 32)\n\n  for (i = 0; i < 8; i++) {\n    ctx.h[i] ^= v[i] ^ v[i + 8]\n  }\n  // util.debugPrint('h[8]', ctx.h, 32)\n}\n\n// Creates a BLAKE2s hashing context\n// Requires an output length between 1 and 32 bytes\n// Takes an optional Uint8Array key\nfunction blake2sInit (outlen, key) {\n  if (!(outlen > 0 && outlen <= 32)) {\n    throw new Error('Incorrect output length, should be in [1, 32]')\n  }\n  const keylen = key ? key.length : 0\n  if (key && !(keylen > 0 && keylen <= 32)) {\n    throw new Error('Incorrect key length, should be in [1, 32]')\n  }\n\n  const ctx = {\n    h: new Uint32Array(BLAKE2S_IV), // hash state\n    b: new Uint8Array(64), // input block\n    c: 0, // pointer within block\n    t: 0, // input count\n    outlen: outlen // output length in bytes\n  }\n  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen\n\n  if (keylen > 0) {\n    blake2sUpdate(ctx, key)\n    ctx.c = 64 // at the end\n  }\n\n  return ctx\n}\n\n// Updates a BLAKE2s streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2sUpdate (ctx, input) {\n  for (let i = 0; i < input.length; i++) {\n    if (ctx.c === 64) {\n      // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2sCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2s streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2sFinal (ctx) {\n  ctx.t += ctx.c // mark last block offset\n  while (ctx.c < 64) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2sCompress(ctx, true) // final block flag = 1\n\n  // little endian convert and store\n  const out = new Uint8Array(ctx.outlen)\n  for (let i = 0; i < ctx.outlen; i++) {\n    out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 0xff\n  }\n  return out\n}\n\n// Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2s (input, key, outlen) {\n  // preprocess inputs\n  outlen = outlen || 32\n  input = util.normalizeInput(input)\n\n  // do the math\n  const ctx = blake2sInit(outlen, key)\n  blake2sUpdate(ctx, input)\n  return blake2sFinal(ctx)\n}\n\n// Computes the BLAKE2S hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2sHex (input, key, outlen) {\n  const output = blake2s(input, key, outlen)\n  return util.toHex(output)\n}\n\nmodule.exports = {\n  blake2s: blake2s,\n  blake2sHex: blake2sHex,\n  blake2sInit: blake2sInit,\n  blake2sUpdate: blake2sUpdate,\n  blake2sFinal: blake2sFinal\n}\n", "const b2b = require('./blake2b')\nconst b2s = require('./blake2s')\n\nmodule.exports = {\n  blake2b: b2b.blake2b,\n  blake2bHex: b2b.blake2bHex,\n  blake2bInit: b2b.blake2bInit,\n  blake2bUpdate: b2b.blake2bUpdate,\n  blake2bFinal: b2b.blake2bFinal,\n  blake2s: b2s.blake2s,\n  blake2sHex: b2s.blake2sHex,\n  blake2sInit: b2s.blake2sInit,\n  blake2sUpdate: b2s.blake2sUpdate,\n  blake2sFinal: b2s.blake2sFinal\n}\n", "'use strict'\n\n// @ts-ignore - no types available\nconst blake = require('blakejs')\n\nconst minB = 0xb201\nconst minS = 0xb241\n\nconst blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n}\n\nconst blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n}\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\n\n/**\n * @param {number} size\n * @param {any} hf\n * @returns {import('./types').Digest}\n */\nconst makeB2Hash = (size, hf) => async (data) => {\n  const ctx = hf.init(size, null)\n  hf.update(ctx, data)\n  return hf.digest(ctx)\n}\n\n/**\n * @param {Record<number, import('./types').Digest>} table\n */\nmodule.exports = (table) => {\n  for (let i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b)\n  }\n  for (let i = 0; i < 32; i++) {\n    table[minS + i] = makeB2Hash(i + 1, blake2s)\n  }\n}\n", "'use strict'\n\nconst sha3 = require('js-sha3')\n// @ts-ignore - no types available\nconst mur = require('murmurhash3js-revisited')\nconst { factory: sha } = require('./sha')\nconst { fromNumberTo32BitBuf } = require('./utils')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\n/**\n * @param {string} algorithm\n * @returns {import('./types').Digest}\n */\nconst hash = (algorithm) => async (data) => {\n  switch (algorithm) {\n    case 'sha3-224':\n      return new Uint8Array(sha3.sha3_224.arrayBuffer(data))\n    case 'sha3-256':\n      return new Uint8Array(sha3.sha3_256.arrayBuffer(data))\n    case 'sha3-384':\n      return new Uint8Array(sha3.sha3_384.arrayBuffer(data))\n    case 'sha3-512':\n      return new Uint8Array(sha3.sha3_512.arrayBuffer(data))\n    case 'shake-128':\n      return new Uint8Array(sha3.shake128.create(128).update(data).arrayBuffer())\n    case 'shake-256':\n      return new Uint8Array(sha3.shake256.create(256).update(data).arrayBuffer())\n    case 'keccak-224':\n      return new Uint8Array(sha3.keccak224.arrayBuffer(data))\n    case 'keccak-256':\n      return new Uint8Array(sha3.keccak256.arrayBuffer(data))\n    case 'keccak-384':\n      return new Uint8Array(sha3.keccak384.arrayBuffer(data))\n    case 'keccak-512':\n      return new Uint8Array(sha3.keccak512.arrayBuffer(data))\n    case 'murmur3-128':\n      return uint8ArrayFromString(mur.x64.hash128(data), 'base16')\n    case 'murmur3-32':\n      return fromNumberTo32BitBuf(mur.x86.hash32(data))\n\n    default:\n      throw new TypeError(`${algorithm} is not a supported algorithm`)\n  }\n}\n\n/** @type {import('./types').Digest} */\nconst identity = data => data\n\nmodule.exports = {\n  identity,\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n}\n", "'use strict'\n\nconst errcode = require('err-code')\nconst multihash = require('multihashes')\nconst crypto = require('./crypto')\nconst { equals } = require('uint8arrays/equals')\n\n/**\n * @typedef {import(\"./types\").Digest} Digest\n * @typedef {import(\"multihashes\").HashName} HashName\n */\n\n/**\n * Hash the given `bytes` using the algorithm specified by `alg`.\n *\n * @param {Uint8Array} bytes - The value to hash.\n * @param {HashName} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Uint8Array>}\n */\nasync function Multihashing (bytes, alg, length) {\n  const digest = await Multihashing.digest(bytes, alg, length)\n  return multihash.encode(digest, alg, length)\n}\n\n/**\n * Expose multihash itself, to avoid silly double requires.\n */\nMultihashing.multihash = multihash\n\n/**\n * @param {Uint8Array} bytes - The value to hash.\n * @param {HashName} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Uint8Array>}\n */\nMultihashing.digest = async (bytes, alg, length) => {\n  const hash = Multihashing.createHash(alg)\n  const digest = await hash(bytes)\n  return length ? digest.slice(0, length) : digest\n}\n\n/**\n * Creates a function that hashes with the given algorithm\n *\n * @param {HashName} alg - The algorithm to use eg 'sha1'\n * @returns {Digest} - The hash function corresponding to `alg`\n */\nMultihashing.createHash = function (alg) {\n  if (!alg) {\n    const e = errcode(new Error('hash algorithm must be specified'), 'ERR_HASH_ALGORITHM_NOT_SPECIFIED')\n    throw e\n  }\n\n  const code = multihash.coerceCode(alg)\n  if (!Multihashing.functions[code]) {\n    throw errcode(new Error(`multihash function '${alg}' not yet supported`), 'ERR_HASH_ALGORITHM_NOT_SUPPORTED')\n  }\n\n  return Multihashing.functions[code]\n}\n\n/**\n * Mapping of multihash codes to their hashing functions.\n *\n * @type {Record<number, Digest>}\n */\n// @ts-ignore - most of those functions aren't typed\nMultihashing.functions = {\n  // identity\n  0x00: crypto.identity,\n  // sha1\n  0x11: crypto.sha1,\n  // sha2-256\n  0x12: crypto.sha2256,\n  // sha2-512\n  0x13: crypto.sha2512,\n  // sha3-512\n  0x14: crypto.sha3512,\n  // sha3-384\n  0x15: crypto.sha3384,\n  // sha3-256\n  0x16: crypto.sha3256,\n  // sha3-224\n  0x17: crypto.sha3224,\n  // shake-128\n  0x18: crypto.shake128,\n  // shake-256\n  0x19: crypto.shake256,\n  // keccak-224\n  0x1A: crypto.keccak224,\n  // keccak-256\n  0x1B: crypto.keccak256,\n  // keccak-384\n  0x1C: crypto.keccak384,\n  // keccak-512\n  0x1D: crypto.keccak512,\n  // murmur3-128\n  0x22: crypto.murmur3128,\n  // murmur3-32\n  0x23: crypto.murmur332,\n  // dbl-sha2-256\n  0x56: crypto.dblSha2256\n}\n\n// add blake functions\ncrypto.addBlake(Multihashing.functions)\n\n/**\n * @param {Uint8Array} bytes\n * @param {Uint8Array} hash\n * @returns {Promise<boolean>}\n */\nMultihashing.validate = async (bytes, hash) => {\n  const newHash = await Multihashing(bytes, multihash.decode(hash).name)\n\n  return equals(hash, newHash)\n}\n\nmodule.exports = Multihashing\n", "module.exports = Node\n\n/**\n * a linked-list node\n * @class\n * @param {any} value - node's value\n * @param {Node} next - next node\n */\nfunction Node (value, next) {\n  this.value = value\n  this.next = next\n}\n\n/**\n * checks if this node or any of its children has the value\n * @param {any} value - value to check if linked-list contains\n * @return {boolean} true if the list contains the value; false if not\n */\nNode.prototype.contains = function (value) {\n  var cursor = this\n\n  while (cursor) {\n    if (cursor.value === value) return true\n    cursor = cursor.next\n  }\n\n  return false\n}\n", "var Node = require('./lib/node')\n\nmodule.exports = isCircular\n\n/**\n * checks whether the object is circular\n * @param  {object}  obj - object to check circularity for\n * @return {Boolean} true if obj is circular, false if it is not\n */\nfunction isCircular (obj) {\n  if (!(obj instanceof Object)) {\n    throw new TypeError('\"obj\" must be an object (or inherit from it)')\n  }\n  return _isCircular(obj)\n}\n\n/**\n * @private\n * checks whether the object is circular\n * @param  {object}  obj - object to check circularity for\n * @param  {Node}    parentList - linked-list that contains all the object's parents\n * @return {Boolean} true if obj is circular, false if it is not\n */\nfunction _isCircular (obj, parentList) {\n  parentList = new Node(obj, parentList)\n\n  // breadth-first search for circular object\n  for (var key in obj) {\n    var val = obj[key]\n    if (val instanceof Object) {\n      if (parentList.contains(val) || _isCircular(val, parentList)) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n", "'use strict'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n *\n * @param {Array<ArrayLike<number>>} arrays\n * @param {number} [length]\n */\nfunction concat (arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = concat\n", "  'use strict'\n\nconst { bases } = require('multiformats/basics')\n\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n/**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */\nfunction createCodec (name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = new Uint8Array(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */\n\n/**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */\nconst BASES = {\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii,\n\n  ...bases\n}\n\nmodule.exports = BASES\n", "'use strict'\n\nconst bases = require('./util/bases')\n\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\nfunction fromString (string, encoding = 'utf8') {\n  const base = bases[encoding]\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`)\n}\n\nmodule.exports = fromString\n", "'use strict'\n\nconst cbor = require('borc')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst isCircular = require('is-circular')\nconst uint8ArrayConcat = require('uint8arrays/concat')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\n// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\nconst CID_CBOR_TAG = 42\n\nfunction tagCID (cid) {\n  if (typeof cid === 'string') {\n    cid = new CID(cid).bytes\n  } else if (CID.isCID(cid)) {\n    cid = cid.bytes\n  }\n\n  return new cbor.Tagged(CID_CBOR_TAG, uint8ArrayConcat([\n    uint8ArrayFromString('00', 'base16'), // thanks jdag\n    cid\n  ], 1 + cid.length))\n}\n\nfunction replaceCIDbyTAG (dagNode) {\n  let circular\n  try {\n    circular = isCircular(dagNode)\n  } catch (e) {\n    circular = false\n  }\n  if (circular) {\n    throw new Error('The object passed has circular references')\n  }\n\n  function transform (obj) {\n    if (!obj || obj instanceof Uint8Array || typeof obj === 'string') {\n      return obj\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(transform)\n    }\n\n    if (CID.isCID(obj)) {\n      return tagCID(obj)\n    }\n\n    const keys = Object.keys(obj)\n\n    if (keys.length > 0) {\n      // Recursive transform\n      const out = {}\n      keys.forEach((key) => {\n        if (typeof obj[key] === 'object') {\n          out[key] = transform(obj[key])\n        } else {\n          out[key] = obj[key]\n        }\n      })\n      return out\n    } else {\n      return obj\n    }\n  }\n\n  return transform(dagNode)\n}\n\nconst codec = multicodec.DAG_CBOR\nconst defaultHashAlg = multicodec.SHA2_256\n\nconst defaultTags = {\n  [CID_CBOR_TAG]: (val) => {\n    // remove that 0\n    val = val.slice(1)\n    return new CID(val)\n  }\n}\nconst defaultSize = 64 * 1024 // current decoder heap size, 64 Kb\nlet currentSize = defaultSize\nconst defaultMaxSize = 64 * 1024 * 1024 // max heap size when auto-growing, 64 Mb\nlet maxSize = defaultMaxSize\nlet decoder = null\n\n/**\n * Configure the underlying CBOR decoder.\n *\n * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.\n * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`\n * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error\n * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`\n */\nfunction configureDecoder (options) {\n  let tags = defaultTags\n\n  if (options) {\n    if (typeof options.size === 'number') {\n      currentSize = options.size\n    }\n    if (typeof options.maxSize === 'number') {\n      maxSize = options.maxSize\n    }\n    if (options.tags) {\n      tags = Object.assign({}, defaultTags, options && options.tags)\n    }\n  } else {\n    // no options, reset to defaults\n    currentSize = defaultSize\n    maxSize = defaultMaxSize\n  }\n\n  const decoderOptions = {\n    tags,\n    size: currentSize\n  }\n\n  decoder = new cbor.Decoder(decoderOptions)\n  // borc edits opts.size in-place so we can capture _actual_ size\n  currentSize = decoderOptions.size\n}\n\nconfigureDecoder() // Setup default cbor.Decoder\n\n/**\n * Serialize internal representation into a binary CBOR block.\n *\n * @param {Object} node - Internal representation of a CBOR block\n * @returns {Uint8Array} - The encoded binary representation\n */\nfunction serialize (node) {\n  const nodeTagged = replaceCIDbyTAG(node)\n  const serialized = cbor.encode(nodeTagged)\n\n  return serialized\n}\n\n/**\n * Deserialize CBOR block into the internal representation.\n *\n * @param {Uint8Array} data - Binary representation of a CBOR block\n * @returns {Object} - An object that conforms to the IPLD Data Model\n */\nfunction deserialize (data) {\n  if (data.length > currentSize && data.length <= maxSize) {\n    configureDecoder({ size: data.length })\n  }\n\n  if (data.length > currentSize) {\n    throw new Error('Data is too large to deserialize with current decoder')\n  }\n\n  // borc will decode back-to-back objects into an implicit top-level array, we\n  // strictly want to only see a single explicit top-level object\n  const all = decoder.decodeAll(data)\n  if (all.length !== 1) {\n    throw new Error('Extraneous CBOR data found beyond initial top-level object')\n  }\n\n  return all[0]\n}\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [userOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\nasync function cid (binaryBlob, userOptions) {\n  const defaultOptions = { cidVersion: 1, hashAlg: defaultHashAlg }\n  const options = Object.assign(defaultOptions, userOptions)\n\n  const multihash = await multihashing(binaryBlob, options.hashAlg)\n  const codecName = multicodec.getNameFromCode(codec)\n  const cid = new CID(options.cidVersion, codecName, multihash)\n\n  return cid\n}\n\nmodule.exports = {\n  codec,\n  defaultHashAlg,\n  configureDecoder,\n  serialize,\n  deserialize,\n  cid\n}\n", "'use strict'\n\nconst CID = require('cids')\nconst util = require('./util')\n\n/**\n * Resolves a path within a CBOR block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block\n * @param {string} [path='/'] - Path that should be resolved\n */\nexports.resolve = (binaryBlob, path) => {\n  let node = util.deserialize(binaryBlob)\n\n  const parts = path.split('/').filter(Boolean)\n  while (parts.length) {\n    const key = parts.shift()\n    if (node[key] === undefined) {\n      throw new Error(`Object has no property '${key}'`)\n    }\n\n    node = node[key]\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      }\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  }\n}\n\nconst traverse = function * (node, path) {\n  // Traverse only objects and arrays\n  if (node instanceof Uint8Array || CID.isCID(node) || typeof node === 'string' ||\n      node === null) {\n    return\n  }\n  for (const item of Object.keys(node)) {\n    const nextpath = path === undefined ? item : path + '/' + item\n    yield nextpath\n    yield * traverse(node[item], nextpath)\n  }\n}\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block\n * @yields {string} - A single path\n */\nexports.tree = function * (binaryBlob) {\n  const node = util.deserialize(binaryBlob)\n\n  yield * traverse(node)\n}\n", "'use strict'\n\nexports.util = require('./util.js')\nexports.resolver = require('./resolver.js')\nexports.codec = exports.util.codec\nexports.defaultHashAlg = exports.util.defaultHashAlg\n", "'use strict'\n\n/**\n * Can be used with Array.sort to sort and array with Uint8Array entries\n *\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n */\nfunction compare (a, b) {\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] < b[i]) {\n      return -1\n    }\n\n    if (a[i] > b[i]) {\n      return 1\n    }\n  }\n\n  if (a.byteLength > b.byteLength) {\n    return 1\n  }\n\n  if (a.byteLength < b.byteLength) {\n    return -1\n  }\n\n  return 0\n}\n\nmodule.exports = compare\n", "'use strict'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n *\n * @param {Array<ArrayLike<number>>} arrays\n * @param {number} [length]\n */\nfunction concat (arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = concat\n", "'use strict'\n\n/**\n * Returns true if the two passed Uint8Arrays have the same content\n *\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n */\nfunction equals (a, b) {\n  if (a === b) {\n    return true\n  }\n\n  if (a.byteLength !== b.byteLength) {\n    return false\n  }\n\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nmodule.exports = equals\n", "  'use strict'\n\nconst { bases } = require('multiformats/basics')\n\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n/**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */\nfunction createCodec (name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = new Uint8Array(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */\n\n/**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */\nconst BASES = {\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii,\n\n  ...bases\n}\n\nmodule.exports = BASES\n", "'use strict'\n\nconst bases = require('./util/bases')\n\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\nfunction fromString (string, encoding = 'utf8') {\n  const base = bases[encoding]\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`)\n}\n\nmodule.exports = fromString\n", "'use strict'\n\nconst bases = require('./util/bases')\n\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\n * @returns {string}\n */\nfunction toString (array, encoding = 'utf8') {\n  const base = bases[encoding]\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n\nmodule.exports = toString\n", "'use strict'\n\n/**\n * Returns the xor distance between two arrays\n *\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n */\nfunction xor (a, b) {\n  if (a.length !== b.length) {\n    throw new Error('Inputs should have the same length')\n  }\n\n  const result = new Uint8Array(a.length)\n\n  for (let i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ b[i]\n  }\n\n  return result\n}\n\nmodule.exports = xor\n", "'use strict'\nconst compare = require('./compare')\nconst concat = require('./concat')\nconst equals = require('./equals')\nconst fromString = require('./from-string')\nconst toString = require('./to-string')\nconst xor = require('./xor')\n\nmodule.exports = {\n  compare,\n  concat,\n  equals,\n  fromString,\n  toString,\n  xor\n}\n", "import dagCBOR from 'ipld-dag-cbor'\nimport CID from 'cids'\nimport multihashes from 'multihashes'\nimport * as u8a from 'uint8arrays'\nimport varint from 'varint'\n\nconst DAG_CBOR_CODE = 113\nconst ID_MULTIHASH = 0\nconst ENC_BLOCK_SIZE = 24\n\nexport interface EncodedPayload {\n  cid: CID\n  linkedBlock: Uint8Array\n}\n\nexport async function encodePayload(payload: Record<string, any>): Promise<EncodedPayload> {\n  const block = new Uint8Array(dagCBOR.util.serialize(payload))\n  return {\n    cid: await dagCBOR.util.cid(block),\n    linkedBlock: block,\n  }\n}\n\nfunction pad(b: Uint8Array, blockSize = ENC_BLOCK_SIZE): Uint8Array {\n  // Pads with 0s.\n  // Since the multihash defines it's length we don't need any special\n  // method of figuring out which bytes are just padding.\n  const padLen = (blockSize - (b.length % blockSize)) % blockSize\n  // final modulus bs, since if b.length % bs == 24 we don't\n  // want to add another 24 bytes.\n  return u8a.concat([b, new Uint8Array(padLen)])\n}\n\nfunction unpadCIDBytes(b: Uint8Array): CID {\n  // Find where multihash starts.\n  // Multihash lenght is the 4th varint.\n  let offset = 0\n  let mhLen\n  for (let i = 0; i < 4; i++) {\n    mhLen = varint.decode(b, offset)\n    offset += varint.decode.bytes\n  }\n  // Slice padding.\n  return new CID(b.slice(0, offset + mhLen))\n}\n\nexport function encodeIdentityCID(obj: Record<string, any>): CID {\n  const block = dagCBOR.util.serialize(obj)\n  const idMultiHash = multihashes.encode(block, ID_MULTIHASH)\n  return new CID(1, DAG_CBOR_CODE, idMultiHash)\n}\n\nexport function decodeIdentityCID(cid: CID): Record<string, any> {\n  CID.validateCID(cid)\n  if (cid.code !== DAG_CBOR_CODE) throw new Error('CID codec must be dag-cbor')\n  const { code, digest } = multihashes.decode(cid.multihash)\n  if (code !== ID_MULTIHASH) throw new Error('CID must use identity multihash')\n  return dagCBOR.util.deserialize(digest)\n}\n\nexport function prepareCleartext(cleartext: Record<string, any>, blockSize?: number): Uint8Array {\n  return pad(encodeIdentityCID(cleartext).bytes, blockSize)\n}\n\nexport function decodeCleartext(b: Uint8Array): Record<string, any> {\n  return decodeIdentityCID(unpadCIDBytes(b))\n}\n", "'use strict'\n\n/**\n * Can be used with Array.sort to sort and array with Uint8Array entries\n *\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n * @returns {Number}\n */\nfunction compare (a, b) {\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] < b[i]) {\n      return -1\n    }\n\n    if (a[i] > b[i]) {\n      return 1\n    }\n  }\n\n  if (a.byteLength > b.byteLength) {\n    return 1\n  }\n\n  if (a.byteLength < b.byteLength) {\n    return -1\n  }\n\n  return 0\n}\n\nmodule.exports = compare\n", "'use strict'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n *\n * @param {Array<ArrayLike<number>>} arrays\n * @param {Number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = concat\n", "'use strict'\n\n/**\n * Returns true if the two passed Uint8Arrays have the same content\n *\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n * @returns {boolean}\n */\nfunction equals (a, b) {\n  if (a === b) {\n    return true\n  }\n\n  if (a.byteLength !== b.byteLength) {\n    return false\n  }\n\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nmodule.exports = equals\n", "\"use strict\"\n\nexports.TextEncoder =\n  typeof TextEncoder !== \"undefined\" ? TextEncoder : require(\"util\").TextEncoder\n\nexports.TextDecoder =\n  typeof TextDecoder !== \"undefined\" ? TextDecoder : require(\"util\").TextDecoder\n", "'use strict'\n\n// @ts-ignore\nconst { TextEncoder, TextDecoder } = require('web-encoding')\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrs, length) {\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrs) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = { decodeText, encodeText, concat }\n", "'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n", "'use strict'\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i])\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */\nconst rfc4648 = (bitsPerChar) => (alphabet) => {\n  return {\n    /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar)\n    }\n  }\n}\n\nmodule.exports = { rfc4648 }\n", "'use strict'\n\nconst baseX = require('@multiformats/base-x')\nconst Base = require('./base.js')\nconst { rfc4648 } = require('./rfc4648')\nconst { decodeText, encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import('./types').Codec} Codec */\n/** @typedef {import('./types').BaseName} BaseName */\n/** @typedef {import('./types').BaseCode} BaseCode */\n\n/** @type {CodecFactory} */\nconst identity = () => {\n  return {\n    encode: decodeText,\n    decode: encodeText\n  }\n}\n\n/**\n *\n * name, code, implementation, alphabet\n *\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\n */\nconst constants = [\n  ['identity', '\\x00', identity, ''],\n  ['base2', '0', rfc4648(1), '01'],\n  ['base8', '7', rfc4648(3), '01234567'],\n  ['base10', '9', baseX, '0123456789'],\n  ['base16', 'f', rfc4648(4), '0123456789abcdef'],\n  ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],\n  ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],\n  ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],\n  ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],\n  ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],\n  ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],\n  ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],\n  ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],\n  ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],\n  ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],\n  ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],\n  ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\n  ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\n  ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\n  ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\n  ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\n]\n\n/** @type {Record<BaseName,Base>} */\nconst names = constants.reduce((prev, tupple) => {\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\n  return prev\n}, /** @type {Record<BaseName,Base>} */({}))\n\n/** @type {Record<BaseCode,Base>} */\nconst codes = constants.reduce((prev, tupple) => {\n  prev[tupple[1]] = names[tupple[0]]\n  return prev\n}, /** @type {Record<BaseCode,Base>} */({}))\n\nmodule.exports = {\n  names,\n  codes\n}\n", "'use strict'\n\nconst { names } = require('multibase/src/constants')\nconst { TextEncoder } = require('web-encoding')\nconst utf8Encoder = new TextEncoder()\n\n/**\n * Interperets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {String} string The string to turn into an array\n * @returns {Uint8Array}\n */\nfunction asciiStringToUint8Array (string) {\n  const array = new Uint8Array(string.length)\n\n  for (let i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i)\n  }\n\n  return array\n}\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {String} string\n * @param {String} [encoding=utf8] utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\nfunction fromString (string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string)\n  }\n\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string)\n  }\n\n  const codec = names[encoding]\n\n  if (!codec) {\n    throw new Error('Unknown base')\n  }\n\n  return codec.decode(string)\n}\n\nmodule.exports = fromString\n", "'use strict'\n\nconst { names } = require('multibase/src/constants')\nconst { TextDecoder } = require('web-encoding')\nconst utf8Decoder = new TextDecoder('utf8')\n\n/**\n * Turns a Uint8Array of bytes into a string with each\n * character being the char code of the corresponding byte\n *\n * @param {Uint8Array} array The array to turn into a string\n * @returns {String}\n */\nfunction uint8ArrayToAsciiString (array) {\n  let string = ''\n\n  for (let i = 0; i < array.length; i++) {\n    string += String.fromCharCode(array[i])\n  }\n  return string\n}\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array The array to turn into a string\n * @param {String} [encoding=utf8] The encoding to use\n * @returns {String}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\nfunction toString (array, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Decoder.decode(array)\n  }\n\n  if (encoding === 'ascii') {\n    return uint8ArrayToAsciiString(array)\n  }\n\n  const codec = names[encoding]\n\n  if (!codec) {\n    throw new Error('Unknown base')\n  }\n\n  return codec.encode(array)\n}\n\nmodule.exports = toString\n", "'use strict'\n\nmodule.exports = {\n  compare: require('./compare'),\n  concat: require('./concat'),\n  equals: require('./equals'),\n  fromString: require('./from-string'),\n  toString: require('./to-string')\n}\n", null, null],
  "mappings": "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ACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,MACF;AAIA,aAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF;AAAA;A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A,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAA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",
  "names": ["inMemoryCache", "cache", "Map", "parsed", "resolve", "cached", "get", "did", "doc", "set", "params", "n", "r", "noCache", "RegExp", "parse", "didUrl", "Error", "sections", "match", "DID_MATCHER", "parts", "method", "id", "slice", "split", "e", "t", "o", "kv", "path", "query", "fragment", "Resolver", "registry", "this", "resolver", "_this2", "isServerError", "code", "getErrorMessage", "ERROR_MESSAGE", "toString", "createErrorFactory", "message", "createError", "data", "RPCError", "e", "parseJSON", "input", "JSON", "parse", "err", "createParseError", "createErrorResponse", "id", "jsonrpc", "error", "fallbackOnHandlerError", "_ctx", "msg", "console", "warn", "fallbackOnInvalidMessage", "fallbackOnNotification", "createHandler", "methods", "options", "onHandlerError", "onInvalidMessage", "onNotification", "handleRequest", "ctx", "method", "ERROR_CODE", "INVALID_REQUEST", "handler", "METHOD_NOT_FOUND", "result", "handled", "params", "then", "toObject", "createInvalidRequest", "createMethodNotFound", "createInvalidParams", "createInternalError", "RPCClient", "PARSE_ERROR", "INVALID_PARAMS", "INTERNAL_ERROR", "Object", "setPrototypeOf", "prototype", "fromObject", "Error", "connection", "createID", "nanoid", "request", "send", "res", "import_dist", "i", "import_dist", "import_dist", "i", "import_dist", "string", "i", "import_dist", "import_dist", "import_dist", "i", "import_dist", "i", "XChaCha20Poly1305", "bytesToBase64url", "b", "u8a", "base64ToBytes", "s", "inputBase64Url", "replace", "base58ToBytes", "hexToBytes", "input", "startsWith", "substring", "toLowerCase", "encodeBase64url", "decodeBase64url", "bytesToHex", "stringToBytes", "toJose", "recoverable", "r", "recoveryParam", "jose", "Uint8Array", "set", "Error", "fromJose", "signature", "signatureBytes", "length", "TypeError", "slice", "undefined", "toSealed", "ciphertext", "tag", "hexMatcher", "base58Matcher", "base64Matcher", "parseKey", "test", "leftpad", "data", "size", "repeat", "sha256", "payload", "hash", "toEthereumAddress", "hexPublicKey", "hashInput", "keccak_256", "arrayBuffer", "writeUint32BE", "value", "array", "encoded", "toString", "lengthAndInput", "concatKDF", "secret", "keyLen", "alg", "secp256k1", "EC", "ES256KSigner", "privateKey", "privateKeyBytes", "keyPair", "keyFromPrivate", "sign", "EdDSASigner", "secretKey", "dataBytes", "sig", "e", "t", "n", "toSignatureObject", "rawsig", "sigObj", "extractPublicKeyBytes", "pk", "publicKeyBase58", "publicKeyBase64", "publicKeyHex", "verifyRecoverableES256K", "authenticators", "signatures", "so", "signer", "map", "recoveredKey", "recoverPubKey", "recoveredPublicKeyHex", "encode", "recoveredCompressedPublicKeyHex", "recoveredAddress", "find", "ethereumAddress", "filter", "key", "verifyEd25519", "clear", "verify", "algorithms", "ES256K", "fullPublicKeys", "ethAddressKeys", "pubBytes", "keyFromPublic", "err", "ES256K-R", "Ed25519", "EdDSA", "VerifierAlgorithm", "impl", "instanceOfEcdsaSignature", "object", "ES256KSignerAlg", "Ed25519SignerAlg", "createJWS", "header", "defaultAlg", "encodedPayload", "encodeSection", "signingInput", "join", "jwtSigner", "SUPPORTED_PUBLIC_KEY_TYPES", "JSON", "stringify", "decodeJWS", "jws", "parts", "match", "parse", "decodeJWT", "jwt", "Object", "assign", "verifyJWSDecoded", "pubkeys", "Array", "isArray", "decryptJWE", "bind", "pact", "_settle", "state", "i", "onFulfilled", "_this", "onRejected", "result", "encodeJWE", "aad", "recipient", "jwe", "protected", "protectedHeader", "iv", "recipients", "xc20pEncrypter", "cipher", "XChaCha20Poly1305", "cleartext", "randomBytes", "nonceLength", "sealed", "seal", "subarray", "tagLength", "xc20pDirEncrypter", "xc20pEncrypt", "enc", "encrypt", "protHeader", "encodedAad", "Buffer", "from", "xc20pDirDecrypter", "decrypt", "open", "x25519Encrypter", "publicKey", "kid", "encryptCek", "cek", "epk", "generateKeyPair", "res", "sharedKey", "encrypted_key", "kty", "crv", "x", "hexPrivateKey", "base64PrivateKey", "encrypters", "encryptionResult", "tmpEnc", "reduce", "acc", "encrypter", "u", "o", "a", "c", "f", "_jwe$recipients2", "push", "_push2", "issuer", "expiresIn", "typ", "timestamps", "iat", "Math", "floor", "Date", "now", "exp", "nbf", "fullPayload", "iss", "decrypter", "rec", "l", "dids", "resolver", "Promise", "all", "did", "resolve", "didDoc", "keyAgreement", "_didDoc$keyAgreement", "id", "type", "Boolean", "options", "auth", "audience", "callbackUrl", "skewTime", "types", "doc", "getPublicKeyById", "pubid", "filtered", "publicKeysToCheck", "authentication", "authEntry", "supported", "nowSkewed", "aud", "item", "kek", "sealedCek", "import_dist", "e", "i", "import_dist", "n", "r", "import_dist", "import_dist", "Buffer", "n", "i", "import_dist", "import_dist", "import_dist", "o", "import_dist", "import_dist", "import_dist", "Buffer", "c", "e", "import_dist", "Buffer", "e", "import_dist", "Buffer", "i", "o", "require_src", "import_dist", "import_dist", "undefined", "i", "n", "o", "import_dist", "import_dist", "require_utils", "import_dist", "i", "require_util", "import_dist", "n", "i", "import_dist", "v", "i", "import_dist", "v", "i", "import_dist", "import_dist", "i", "import_dist", "require_src", "import_dist", "e", "import_dist", "import_dist", "require_concat", "import_dist", "require_bases", "import_dist", "string", "i", "require_from_string", "import_dist", "require_util", "import_dist", "cid", "e", "import_dist", "require_src", "import_dist", "require_compare", "import_dist", "i", "require_concat", "import_dist", "require_equals", "import_dist", "i", "require_bases", "import_dist", "string", "i", "require_from_string", "import_dist", "require_to_string", "import_dist", "require_xor", "import_dist", "i", "require_uint8arrays", "import_dist", "i", "require_compare", "import_dist", "i", "require_concat", "import_dist", "require_equals", "import_dist", "i", "require_lib", "import_dist", "require_util", "import_dist", "TextEncoder", "TextDecoder", "import_dist", "import_dist", "i", "require_constants", "import_dist", "require_from_string", "import_dist", "TextEncoder", "i", "require_to_string", "import_dist", "TextDecoder", "i", "require_uint8arrays", "import_dist"]
}
