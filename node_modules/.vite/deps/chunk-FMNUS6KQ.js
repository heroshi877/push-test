import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/highlight.js/lib/languages/lisp.js
var require_lisp = __commonJS({
  "node_modules/highlight.js/lib/languages/lisp.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    function lisp(hljs) {
      var LISP_IDENT_RE = "[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*";
      var MEC_RE = "\\|[^]*?\\|";
      var LISP_SIMPLE_NUMBER_RE = "(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?";
      var LITERAL = {
        className: "literal",
        begin: "\\b(t{1}|nil)\\b"
      };
      var NUMBER = {
        className: "number",
        variants: [
          { begin: LISP_SIMPLE_NUMBER_RE, relevance: 0 },
          { begin: "#(b|B)[0-1]+(/[0-1]+)?" },
          { begin: "#(o|O)[0-7]+(/[0-7]+)?" },
          { begin: "#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?" },
          { begin: "#(c|C)\\(" + LISP_SIMPLE_NUMBER_RE + " +" + LISP_SIMPLE_NUMBER_RE, end: "\\)" }
        ]
      };
      var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
      var COMMENT = hljs.COMMENT(
        ";",
        "$",
        {
          relevance: 0
        }
      );
      var VARIABLE = {
        begin: "\\*",
        end: "\\*"
      };
      var KEYWORD = {
        className: "symbol",
        begin: "[:&]" + LISP_IDENT_RE
      };
      var IDENT = {
        begin: LISP_IDENT_RE,
        relevance: 0
      };
      var MEC = {
        begin: MEC_RE
      };
      var QUOTED_LIST = {
        begin: "\\(",
        end: "\\)",
        contains: ["self", LITERAL, STRING, NUMBER, IDENT]
      };
      var QUOTED = {
        contains: [NUMBER, STRING, VARIABLE, KEYWORD, QUOTED_LIST, IDENT],
        variants: [
          {
            begin: "['`]\\(",
            end: "\\)"
          },
          {
            begin: "\\(quote ",
            end: "\\)",
            keywords: { name: "quote" }
          },
          {
            begin: "'" + MEC_RE
          }
        ]
      };
      var QUOTED_ATOM = {
        variants: [
          { begin: "'" + LISP_IDENT_RE },
          { begin: "#'" + LISP_IDENT_RE + "(::" + LISP_IDENT_RE + ")*" }
        ]
      };
      var LIST = {
        begin: "\\(\\s*",
        end: "\\)"
      };
      var BODY = {
        endsWithParent: true,
        relevance: 0
      };
      LIST.contains = [
        {
          className: "name",
          variants: [
            {
              begin: LISP_IDENT_RE,
              relevance: 0
            },
            { begin: MEC_RE }
          ]
        },
        BODY
      ];
      BODY.contains = [QUOTED, QUOTED_ATOM, LIST, LITERAL, NUMBER, STRING, COMMENT, VARIABLE, KEYWORD, MEC, IDENT];
      return {
        name: "Lisp",
        illegal: /\S/,
        contains: [
          NUMBER,
          hljs.SHEBANG(),
          LITERAL,
          STRING,
          COMMENT,
          QUOTED,
          QUOTED_ATOM,
          LIST,
          IDENT
        ]
      };
    }
    module.exports = lisp;
  }
});

export {
  require_lisp
};
//# sourceMappingURL=chunk-FMNUS6KQ.js.map
