/// <reference types="node" />
import { EventEmitter } from 'events';
import CID from 'cids';
import type Document from "./document";
import { IPFSAPI as IpfsApi } from 'ipfs-core/dist/src/components';
export declare enum MsgType {
    UPDATE = 0,
    REQUEST = 1,
    RESPONSE = 2
}
interface LogMessage {
    peer: string;
    event: string;
    topic: string;
    from?: string;
    message?: Record<string, unknown>;
}
export default class Dispatcher extends EventEmitter {
    _ipfs: IpfsApi;
    topic: string;
    private _peerId;
    private readonly _documents;
    private logger;
    private _isRunning;
    constructor(_ipfs: IpfsApi, topic?: string);
    init(): Promise<void>;
    register(document: Document): Promise<void>;
    unregister(id: string): void;
    storeRecord(data: any): Promise<CID>;
    retrieveRecord(cid: CID | string): Promise<any>;
    publishHead(id: string, head: CID, doctype?: string): Promise<void>;
    handleMessage(message: any): Promise<void>;
    _log(msg: LogMessage): void;
    close(): Promise<void>;
}
export {};
//# sourceMappingURL=dispatcher.d.ts.map