'use strict';

var create = b64 => {
  const create = alphabet => {
    const padding = alphabet.indexOf('=') > -1;
    const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1;
    return {
      encode(input) {
        let output = b64.encode(input);
        if (url) {
          output = output.replace(/\+/g, '-').replace(/\//g, '_');
        }
        const pad = output.indexOf('=');
        if (pad > 0 && !padding) {
          output = output.substring(0, pad);
        }
        return output;
      },
      decode(input) {
        for (const char of input) {
          if (alphabet.indexOf(char) < 0) {
            throw new Error('invalid base64 character');
          }
        }
        return b64.decode(input);
      }
    };
  };
  const base64 = create('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/');
  const base64pad = create('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=');
  const base64url = create('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_');
  const base64urlpad = create('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=');
  const ex = [{
    prefix: 'm',
    name: 'base64',
    ...base64
  }, {
    prefix: 'M',
    name: 'base64pad',
    ...base64pad
  }, {
    prefix: 'u',
    name: 'base64url',
    ...base64url
  }, {
    prefix: 'U',
    name: 'base64urlpad',
    ...base64urlpad
  }];
  ex.b64 = b64;
  return ex;
};

module.exports = create;
