import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/highlight.js/lib/languages/properties.js
var require_properties = __commonJS({
  "node_modules/highlight.js/lib/languages/properties.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    function properties(hljs) {
      var WS0 = "[ \\t\\f]*";
      var WS1 = "[ \\t\\f]+";
      var EQUAL_DELIM = WS0 + "[:=]" + WS0;
      var WS_DELIM = WS1;
      var DELIM = "(" + EQUAL_DELIM + "|" + WS_DELIM + ")";
      var KEY_ALPHANUM = "([^\\\\\\W:= \\t\\f\\n]|\\\\.)+";
      var KEY_OTHER = "([^\\\\:= \\t\\f\\n]|\\\\.)+";
      var DELIM_AND_VALUE = {
        // skip DELIM
        end: DELIM,
        relevance: 0,
        starts: {
          // value: everything until end of line (again, taking into account backslashes)
          className: "string",
          end: /$/,
          relevance: 0,
          contains: [
            { begin: "\\\\\\\\" },
            { begin: "\\\\\\n" }
          ]
        }
      };
      return {
        name: ".properties",
        case_insensitive: true,
        illegal: /\S/,
        contains: [
          hljs.COMMENT("^\\s*[!#]", "$"),
          // key: everything until whitespace or = or : (taking into account backslashes)
          // case of a "normal" key
          {
            returnBegin: true,
            variants: [
              { begin: KEY_ALPHANUM + EQUAL_DELIM, relevance: 1 },
              { begin: KEY_ALPHANUM + WS_DELIM, relevance: 0 }
            ],
            contains: [
              {
                className: "attr",
                begin: KEY_ALPHANUM,
                endsParent: true,
                relevance: 0
              }
            ],
            starts: DELIM_AND_VALUE
          },
          // case of key containing non-alphanumeric chars => relevance = 0
          {
            begin: KEY_OTHER + DELIM,
            returnBegin: true,
            relevance: 0,
            contains: [
              {
                className: "meta",
                begin: KEY_OTHER,
                endsParent: true,
                relevance: 0
              }
            ],
            starts: DELIM_AND_VALUE
          },
          // case of an empty key
          {
            className: "attr",
            relevance: 0,
            begin: KEY_OTHER + WS0 + "$"
          }
        ]
      };
    }
    module.exports = properties;
  }
});

export {
  require_properties
};
//# sourceMappingURL=chunk-PNA7VPCB.js.map
