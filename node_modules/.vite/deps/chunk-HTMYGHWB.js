import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/highlight.js/lib/languages/smalltalk.js
var require_smalltalk = __commonJS({
  "node_modules/highlight.js/lib/languages/smalltalk.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    function smalltalk(hljs) {
      const VAR_IDENT_RE = "[a-z][a-zA-Z0-9_]*";
      const CHAR = {
        className: "string",
        begin: "\\$.{1}"
      };
      const SYMBOL = {
        className: "symbol",
        begin: "#" + hljs.UNDERSCORE_IDENT_RE
      };
      return {
        name: "Smalltalk",
        aliases: ["st"],
        keywords: "self super nil true false thisContext",
        // only 6
        contains: [
          hljs.COMMENT('"', '"'),
          hljs.APOS_STRING_MODE,
          {
            className: "type",
            begin: "\\b[A-Z][A-Za-z0-9_]*",
            relevance: 0
          },
          {
            begin: VAR_IDENT_RE + ":",
            relevance: 0
          },
          hljs.C_NUMBER_MODE,
          SYMBOL,
          CHAR,
          {
            // This looks more complicated than needed to avoid combinatorial
            // explosion under V8. It effectively means `| var1 var2 ... |` with
            // whitespace adjacent to `|` being optional.
            begin: "\\|[ ]*" + VAR_IDENT_RE + "([ ]+" + VAR_IDENT_RE + ")*[ ]*\\|",
            returnBegin: true,
            end: /\|/,
            illegal: /\S/,
            contains: [{
              begin: "(\\|[ ]*)?" + VAR_IDENT_RE
            }]
          },
          {
            begin: "#\\(",
            end: "\\)",
            contains: [
              hljs.APOS_STRING_MODE,
              CHAR,
              hljs.C_NUMBER_MODE,
              SYMBOL
            ]
          }
        ]
      };
    }
    module.exports = smalltalk;
  }
});

export {
  require_smalltalk
};
//# sourceMappingURL=chunk-HTMYGHWB.js.map
