/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PushCoreV2Interface extends utils.Interface {
  functions: {
    "ADD_CHANNEL_MIN_FEES()": FunctionFragment;
    "CHANNEL_POOL_FUNDS()": FunctionFragment;
    "CREATE_CHANNEL_TYPEHASH()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "FEE_AMOUNT()": FunctionFragment;
    "MIN_POOL_CONTRIBUTION()": FunctionFragment;
    "PROTOCOL_POOL_FEES()": FunctionFragment;
    "PUSH_TOKEN_ADDRESS()": FunctionFragment;
    "REFERRAL_CODE()": FunctionFragment;
    "UNISWAP_V2_ROUTER()": FunctionFragment;
    "WETH_ADDRESS()": FunctionFragment;
    "aDaiAddress()": FunctionFragment;
    "addPoolFees(uint256)": FunctionFragment;
    "addSubGraph(bytes)": FunctionFragment;
    "batchVerification(uint256,uint256,address[])": FunctionFragment;
    "blockChannel(address)": FunctionFragment;
    "bridgeAddress()": FunctionFragment;
    "calculateEpochRewards(address,uint256)": FunctionFragment;
    "celebUserFunds(address)": FunctionFragment;
    "channelById(uint256)": FunctionFragment;
    "channelNotifSettings(address)": FunctionFragment;
    "channelUpdateCounter(address)": FunctionFragment;
    "channels(address)": FunctionFragment;
    "channelsCount()": FunctionFragment;
    "claimChatIncentives(uint256)": FunctionFragment;
    "createChannelSettings(uint256,string,string,uint256)": FunctionFragment;
    "createChannelWithPUSH(uint8,bytes,uint256,uint256)": FunctionFragment;
    "daiAddress()": FunctionFragment;
    "daoHarvestPaginated(uint256)": FunctionFragment;
    "deactivateChannel()": FunctionFragment;
    "destroyTimeBoundChannel(address)": FunctionFragment;
    "epnsCommunicator()": FunctionFragment;
    "epochDuration()": FunctionFragment;
    "epochRewards(uint256)": FunctionFragment;
    "epochToTotalStakedWeight(uint256)": FunctionFragment;
    "genesisEpoch()": FunctionFragment;
    "getChannelVerfication(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "groupFairShareCount()": FunctionFragment;
    "groupHistoricalZ()": FunctionFragment;
    "groupLastUpdate()": FunctionFragment;
    "groupNormalizedWeight()": FunctionFragment;
    "handleChatRequestData(address,address,uint256,bytes)": FunctionFragment;
    "harvestAll()": FunctionFragment;
    "harvestPaginated(uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,uint256)": FunctionFragment;
    "initializeStake()": FunctionFragment;
    "isMigrationComplete()": FunctionFragment;
    "lastEpochRelative(uint256,uint256)": FunctionFragment;
    "lendingPoolProviderAddress()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "pauseContract()": FunctionFragment;
    "paused()": FunctionFragment;
    "previouslySetEpochRewards()": FunctionFragment;
    "pushChannelAdmin()": FunctionFragment;
    "reactivateChannel(uint256)": FunctionFragment;
    "relayerAddress()": FunctionFragment;
    "setBridgeAddress(address)": FunctionFragment;
    "setEpnsCommunicatorAddress(address)": FunctionFragment;
    "setFeeAmount(uint256)": FunctionFragment;
    "setGovernanceAddress(address)": FunctionFragment;
    "setMinChannelCreationFees(uint256)": FunctionFragment;
    "setMinPoolContribution(uint256)": FunctionFragment;
    "setRelayerAddress(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "totalStakedAmount()": FunctionFragment;
    "transferPushChannelAdminControl(address)": FunctionFragment;
    "unPauseContract()": FunctionFragment;
    "unstake()": FunctionFragment;
    "unverifyChannel(address)": FunctionFragment;
    "updateChannelMeta(address,bytes,uint256)": FunctionFragment;
    "userFeesInfo(address)": FunctionFragment;
    "usersRewardsClaimed(address)": FunctionFragment;
    "verifyChannel(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADD_CHANNEL_MIN_FEES"
      | "CHANNEL_POOL_FUNDS"
      | "CREATE_CHANNEL_TYPEHASH"
      | "DOMAIN_TYPEHASH"
      | "FEE_AMOUNT"
      | "MIN_POOL_CONTRIBUTION"
      | "PROTOCOL_POOL_FEES"
      | "PUSH_TOKEN_ADDRESS"
      | "REFERRAL_CODE"
      | "UNISWAP_V2_ROUTER"
      | "WETH_ADDRESS"
      | "aDaiAddress"
      | "addPoolFees"
      | "addSubGraph"
      | "batchVerification"
      | "blockChannel"
      | "bridgeAddress"
      | "calculateEpochRewards"
      | "celebUserFunds"
      | "channelById"
      | "channelNotifSettings"
      | "channelUpdateCounter"
      | "channels"
      | "channelsCount"
      | "claimChatIncentives"
      | "createChannelSettings"
      | "createChannelWithPUSH"
      | "daiAddress"
      | "daoHarvestPaginated"
      | "deactivateChannel"
      | "destroyTimeBoundChannel"
      | "epnsCommunicator"
      | "epochDuration"
      | "epochRewards"
      | "epochToTotalStakedWeight"
      | "genesisEpoch"
      | "getChannelVerfication"
      | "governance"
      | "groupFairShareCount"
      | "groupHistoricalZ"
      | "groupLastUpdate"
      | "groupNormalizedWeight"
      | "handleChatRequestData"
      | "harvestAll"
      | "harvestPaginated"
      | "initialize"
      | "initializeStake"
      | "isMigrationComplete"
      | "lastEpochRelative"
      | "lendingPoolProviderAddress"
      | "name"
      | "nonces"
      | "pauseContract"
      | "paused"
      | "previouslySetEpochRewards"
      | "pushChannelAdmin"
      | "reactivateChannel"
      | "relayerAddress"
      | "setBridgeAddress"
      | "setEpnsCommunicatorAddress"
      | "setFeeAmount"
      | "setGovernanceAddress"
      | "setMinChannelCreationFees"
      | "setMinPoolContribution"
      | "setRelayerAddress"
      | "stake"
      | "totalStakedAmount"
      | "transferPushChannelAdminControl"
      | "unPauseContract"
      | "unstake"
      | "unverifyChannel"
      | "updateChannelMeta"
      | "userFeesInfo"
      | "usersRewardsClaimed"
      | "verifyChannel"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADD_CHANNEL_MIN_FEES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHANNEL_POOL_FUNDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_CHANNEL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_POOL_CONTRIBUTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_POOL_FEES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUSH_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_CODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_V2_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aDaiAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSubGraph",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchVerification",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blockChannel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateEpochRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "celebUserFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "channelById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "channelNotifSettings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "channelUpdateCounter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "channels",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "channelsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimChatIncentives",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createChannelSettings",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createChannelWithPUSH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "daiAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoHarvestPaginated",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateChannel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destroyTimeBoundChannel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "epnsCommunicator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "epochToTotalStakedWeight",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "genesisEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChannelVerfication",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "groupFairShareCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "groupHistoricalZ",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "groupLastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "groupNormalizedWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleChatRequestData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestPaginated",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMigrationComplete",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpochRelative",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingPoolProviderAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previouslySetEpochRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushChannelAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reactivateChannel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpnsCommunicatorAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinChannelCreationFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPoolContribution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferPushChannelAdminControl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unPauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unverifyChannel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChannelMeta",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userFeesInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usersRewardsClaimed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyChannel",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADD_CHANNEL_MIN_FEES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHANNEL_POOL_FUNDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_CHANNEL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE_AMOUNT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_POOL_CONTRIBUTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_POOL_FEES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUSH_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_CODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_V2_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aDaiAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSubGraph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateEpochRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "celebUserFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "channelById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "channelNotifSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "channelUpdateCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "channels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "channelsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimChatIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChannelSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChannelWithPUSH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daiAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoHarvestPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyTimeBoundChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epnsCommunicator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochToTotalStakedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChannelVerfication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "groupFairShareCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "groupHistoricalZ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "groupLastUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "groupNormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleChatRequestData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvestAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMigrationComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEpochRelative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingPoolProviderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previouslySetEpochRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushChannelAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reactivateChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpnsCommunicatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinChannelCreationFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPoolContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPushChannelAdminControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unPauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unverifyChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChannelMeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userFeesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usersRewardsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyChannel",
    data: BytesLike
  ): Result;

  events: {
    "AddChannel(address,uint8,bytes)": EventFragment;
    "AddSubGraph(address,bytes)": EventFragment;
    "BridgeAddressUpdated(address,address)": EventFragment;
    "ChannelBlocked(address)": EventFragment;
    "ChannelNotifcationSettingsAdded(address,uint256,string,string)": EventFragment;
    "ChannelOwnershipTransfer(address,address)": EventFragment;
    "ChannelVerificationRevoked(address,address)": EventFragment;
    "ChannelVerified(address,address)": EventFragment;
    "ChatIncentiveClaimed(address,uint256)": EventFragment;
    "DeactivateChannel(address,uint256)": EventFragment;
    "IncentivizeChatReqReceived(address,address,uint256,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "ReactivateChannel(address,uint256)": EventFragment;
    "RelayerAddressUpdated(address,address)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "RewardsHarvested(address,uint256,uint256,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "TimeBoundChannelDestroyed(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Unstaked(address,uint256)": EventFragment;
    "UpdateChannel(address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddChannel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddSubGraph"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChannelBlocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChannelNotifcationSettingsAdded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChannelOwnershipTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChannelVerificationRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChannelVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChatIncentiveClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeactivateChannel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentivizeChatReqReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReactivateChannel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsHarvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeBoundChannelDestroyed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateChannel"): EventFragment;
}

export interface AddChannelEventObject {
  channel: string;
  channelType: number;
  identity: string;
}
export type AddChannelEvent = TypedEvent<
  [string, number, string],
  AddChannelEventObject
>;

export type AddChannelEventFilter = TypedEventFilter<AddChannelEvent>;

export interface AddSubGraphEventObject {
  channel: string;
  _subGraphData: string;
}
export type AddSubGraphEvent = TypedEvent<
  [string, string],
  AddSubGraphEventObject
>;

export type AddSubGraphEventFilter = TypedEventFilter<AddSubGraphEvent>;

export interface BridgeAddressUpdatedEventObject {
  oldBridge: string;
  newBridge: string;
}
export type BridgeAddressUpdatedEvent = TypedEvent<
  [string, string],
  BridgeAddressUpdatedEventObject
>;

export type BridgeAddressUpdatedEventFilter =
  TypedEventFilter<BridgeAddressUpdatedEvent>;

export interface ChannelBlockedEventObject {
  channel: string;
}
export type ChannelBlockedEvent = TypedEvent<
  [string],
  ChannelBlockedEventObject
>;

export type ChannelBlockedEventFilter = TypedEventFilter<ChannelBlockedEvent>;

export interface ChannelNotifcationSettingsAddedEventObject {
  _channel: string;
  totalNotifOptions: BigNumber;
  _notifSettings: string;
  _notifDescription: string;
}
export type ChannelNotifcationSettingsAddedEvent = TypedEvent<
  [string, BigNumber, string, string],
  ChannelNotifcationSettingsAddedEventObject
>;

export type ChannelNotifcationSettingsAddedEventFilter =
  TypedEventFilter<ChannelNotifcationSettingsAddedEvent>;

export interface ChannelOwnershipTransferEventObject {
  channel: string;
  newOwner: string;
}
export type ChannelOwnershipTransferEvent = TypedEvent<
  [string, string],
  ChannelOwnershipTransferEventObject
>;

export type ChannelOwnershipTransferEventFilter =
  TypedEventFilter<ChannelOwnershipTransferEvent>;

export interface ChannelVerificationRevokedEventObject {
  channel: string;
  revoker: string;
}
export type ChannelVerificationRevokedEvent = TypedEvent<
  [string, string],
  ChannelVerificationRevokedEventObject
>;

export type ChannelVerificationRevokedEventFilter =
  TypedEventFilter<ChannelVerificationRevokedEvent>;

export interface ChannelVerifiedEventObject {
  channel: string;
  verifier: string;
}
export type ChannelVerifiedEvent = TypedEvent<
  [string, string],
  ChannelVerifiedEventObject
>;

export type ChannelVerifiedEventFilter = TypedEventFilter<ChannelVerifiedEvent>;

export interface ChatIncentiveClaimedEventObject {
  user: string;
  amountClaimed: BigNumber;
}
export type ChatIncentiveClaimedEvent = TypedEvent<
  [string, BigNumber],
  ChatIncentiveClaimedEventObject
>;

export type ChatIncentiveClaimedEventFilter =
  TypedEventFilter<ChatIncentiveClaimedEvent>;

export interface DeactivateChannelEventObject {
  channel: string;
  amountRefunded: BigNumber;
}
export type DeactivateChannelEvent = TypedEvent<
  [string, BigNumber],
  DeactivateChannelEventObject
>;

export type DeactivateChannelEventFilter =
  TypedEventFilter<DeactivateChannelEvent>;

export interface IncentivizeChatReqReceivedEventObject {
  requestSender: string;
  requestReceiver: string;
  amountForReqReceiver: BigNumber;
  feePoolAmount: BigNumber;
  timestamp: BigNumber;
}
export type IncentivizeChatReqReceivedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  IncentivizeChatReqReceivedEventObject
>;

export type IncentivizeChatReqReceivedEventFilter =
  TypedEventFilter<IncentivizeChatReqReceivedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReactivateChannelEventObject {
  channel: string;
  amountDeposited: BigNumber;
}
export type ReactivateChannelEvent = TypedEvent<
  [string, BigNumber],
  ReactivateChannelEventObject
>;

export type ReactivateChannelEventFilter =
  TypedEventFilter<ReactivateChannelEvent>;

export interface RelayerAddressUpdatedEventObject {
  oldRelayer: string;
  newRelayer: string;
}
export type RelayerAddressUpdatedEvent = TypedEvent<
  [string, string],
  RelayerAddressUpdatedEventObject
>;

export type RelayerAddressUpdatedEventFilter =
  TypedEventFilter<RelayerAddressUpdatedEvent>;

export interface RewardsClaimedEventObject {
  user: string;
  rewardAmount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface RewardsHarvestedEventObject {
  user: string;
  rewardAmount: BigNumber;
  fromEpoch: BigNumber;
  tillEpoch: BigNumber;
}
export type RewardsHarvestedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RewardsHarvestedEventObject
>;

export type RewardsHarvestedEventFilter =
  TypedEventFilter<RewardsHarvestedEvent>;

export interface StakedEventObject {
  user: string;
  amountStaked: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface TimeBoundChannelDestroyedEventObject {
  channel: string;
  amountRefunded: BigNumber;
}
export type TimeBoundChannelDestroyedEvent = TypedEvent<
  [string, BigNumber],
  TimeBoundChannelDestroyedEventObject
>;

export type TimeBoundChannelDestroyedEventFilter =
  TypedEventFilter<TimeBoundChannelDestroyedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnstakedEventObject {
  user: string;
  amountUnstaked: BigNumber;
}
export type UnstakedEvent = TypedEvent<
  [string, BigNumber],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface UpdateChannelEventObject {
  channel: string;
  identity: string;
}
export type UpdateChannelEvent = TypedEvent<
  [string, string],
  UpdateChannelEventObject
>;

export type UpdateChannelEventFilter = TypedEventFilter<UpdateChannelEvent>;

export interface PushCoreV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PushCoreV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADD_CHANNEL_MIN_FEES(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHANNEL_POOL_FUNDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    CREATE_CHANNEL_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    FEE_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_POOL_CONTRIBUTION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROTOCOL_POOL_FEES(overrides?: CallOverrides): Promise<[BigNumber]>;

    PUSH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    REFERRAL_CODE(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNISWAP_V2_ROUTER(overrides?: CallOverrides): Promise<[string]>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    aDaiAddress(overrides?: CallOverrides): Promise<[string]>;

    addPoolFees(
      _rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSubGraph(
      _subGraphData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchVerification(
      _startIndex: PromiseOrValue<BigNumberish>,
      _endIndex: PromiseOrValue<BigNumberish>,
      _channelList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blockChannel(
      _channelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    calculateEpochRewards(
      _user: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    celebUserFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    channelById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    channelNotifSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    channelUpdateCounter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    channels(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        channelType: number;
        channelState: number;
        verifiedBy: string;
        poolContribution: BigNumber;
        channelHistoricalZ: BigNumber;
        channelFairShareCount: BigNumber;
        channelLastUpdate: BigNumber;
        channelStartBlock: BigNumber;
        channelUpdateBlock: BigNumber;
        channelWeight: BigNumber;
        expiryTime: BigNumber;
      }
    >;

    channelsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimChatIncentives(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createChannelSettings(
      _notifOptions: PromiseOrValue<BigNumberish>,
      _notifSettings: PromiseOrValue<string>,
      _notifDescription: PromiseOrValue<string>,
      _amountDeposited: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createChannelWithPUSH(
      _channelType: PromiseOrValue<BigNumberish>,
      _identity: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _channelExpiryTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daiAddress(overrides?: CallOverrides): Promise<[string]>;

    daoHarvestPaginated(
      _tillEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivateChannel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    destroyTimeBoundChannel(
      _channelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    epnsCommunicator(overrides?: CallOverrides): Promise<[string]>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochToTotalStakedWeight(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    genesisEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getChannelVerfication(
      _channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { verificationStatus: number }>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    groupFairShareCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    groupHistoricalZ(overrides?: CallOverrides): Promise<[BigNumber]>;

    groupLastUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    groupNormalizedWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    handleChatRequestData(
      requestSender: PromiseOrValue<string>,
      requestReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      vaa: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harvestAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harvestPaginated(
      _tillEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _pushChannelAdmin: PromiseOrValue<string>,
      _pushTokenAddress: PromiseOrValue<string>,
      _wethAddress: PromiseOrValue<string>,
      _uniswapRouterAddress: PromiseOrValue<string>,
      _lendingPoolProviderAddress: PromiseOrValue<string>,
      _daiAddress: PromiseOrValue<string>,
      _aDaiAddress: PromiseOrValue<string>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isMigrationComplete(overrides?: CallOverrides): Promise<[boolean]>;

    lastEpochRelative(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lendingPoolProviderAddress(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    previouslySetEpochRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    pushChannelAdmin(overrides?: CallOverrides): Promise<[string]>;

    reactivateChannel(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    relayerAddress(overrides?: CallOverrides): Promise<[string]>;

    setBridgeAddress(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEpnsCommunicatorAddress(
      _commAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeAmount(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernanceAddress(
      _governanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinChannelCreationFees(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinPoolContribution(
      _newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRelayerAddress(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalStakedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferPushChannelAdminControl(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unPauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unverifyChannel(
      _channel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateChannelMeta(
      _channel: PromiseOrValue<string>,
      _newIdentity: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userFeesInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakedAmount: BigNumber;
        stakedWeight: BigNumber;
        lastStakedBlock: BigNumber;
        lastClaimedBlock: BigNumber;
      }
    >;

    usersRewardsClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifyChannel(
      _channel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ADD_CHANNEL_MIN_FEES(overrides?: CallOverrides): Promise<BigNumber>;

  CHANNEL_POOL_FUNDS(overrides?: CallOverrides): Promise<BigNumber>;

  CREATE_CHANNEL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  FEE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_POOL_CONTRIBUTION(overrides?: CallOverrides): Promise<BigNumber>;

  PROTOCOL_POOL_FEES(overrides?: CallOverrides): Promise<BigNumber>;

  PUSH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  REFERRAL_CODE(overrides?: CallOverrides): Promise<BigNumber>;

  UNISWAP_V2_ROUTER(overrides?: CallOverrides): Promise<string>;

  WETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  aDaiAddress(overrides?: CallOverrides): Promise<string>;

  addPoolFees(
    _rewardAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSubGraph(
    _subGraphData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchVerification(
    _startIndex: PromiseOrValue<BigNumberish>,
    _endIndex: PromiseOrValue<BigNumberish>,
    _channelList: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blockChannel(
    _channelAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeAddress(overrides?: CallOverrides): Promise<string>;

  calculateEpochRewards(
    _user: PromiseOrValue<string>,
    _epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  celebUserFunds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  channelById(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  channelNotifSettings(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  channelUpdateCounter(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  channels(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      channelType: number;
      channelState: number;
      verifiedBy: string;
      poolContribution: BigNumber;
      channelHistoricalZ: BigNumber;
      channelFairShareCount: BigNumber;
      channelLastUpdate: BigNumber;
      channelStartBlock: BigNumber;
      channelUpdateBlock: BigNumber;
      channelWeight: BigNumber;
      expiryTime: BigNumber;
    }
  >;

  channelsCount(overrides?: CallOverrides): Promise<BigNumber>;

  claimChatIncentives(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createChannelSettings(
    _notifOptions: PromiseOrValue<BigNumberish>,
    _notifSettings: PromiseOrValue<string>,
    _notifDescription: PromiseOrValue<string>,
    _amountDeposited: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createChannelWithPUSH(
    _channelType: PromiseOrValue<BigNumberish>,
    _identity: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    _channelExpiryTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daiAddress(overrides?: CallOverrides): Promise<string>;

  daoHarvestPaginated(
    _tillEpoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivateChannel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  destroyTimeBoundChannel(
    _channelAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  epnsCommunicator(overrides?: CallOverrides): Promise<string>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  epochRewards(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochToTotalStakedWeight(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getChannelVerfication(
    _channel: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  governance(overrides?: CallOverrides): Promise<string>;

  groupFairShareCount(overrides?: CallOverrides): Promise<BigNumber>;

  groupHistoricalZ(overrides?: CallOverrides): Promise<BigNumber>;

  groupLastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  groupNormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  handleChatRequestData(
    requestSender: PromiseOrValue<string>,
    requestReceiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    vaa: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harvestAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harvestPaginated(
    _tillEpoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _pushChannelAdmin: PromiseOrValue<string>,
    _pushTokenAddress: PromiseOrValue<string>,
    _wethAddress: PromiseOrValue<string>,
    _uniswapRouterAddress: PromiseOrValue<string>,
    _lendingPoolProviderAddress: PromiseOrValue<string>,
    _daiAddress: PromiseOrValue<string>,
    _aDaiAddress: PromiseOrValue<string>,
    _referralCode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeStake(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isMigrationComplete(overrides?: CallOverrides): Promise<boolean>;

  lastEpochRelative(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lendingPoolProviderAddress(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pauseContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  previouslySetEpochRewards(overrides?: CallOverrides): Promise<BigNumber>;

  pushChannelAdmin(overrides?: CallOverrides): Promise<string>;

  reactivateChannel(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  relayerAddress(overrides?: CallOverrides): Promise<string>;

  setBridgeAddress(
    _bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEpnsCommunicatorAddress(
    _commAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeAmount(
    _newFees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernanceAddress(
    _governanceAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinChannelCreationFees(
    _newFees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinPoolContribution(
    _newAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRelayerAddress(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferPushChannelAdminControl(
    _newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unPauseContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unverifyChannel(
    _channel: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateChannelMeta(
    _channel: PromiseOrValue<string>,
    _newIdentity: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userFeesInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      stakedAmount: BigNumber;
      stakedWeight: BigNumber;
      lastStakedBlock: BigNumber;
      lastClaimedBlock: BigNumber;
    }
  >;

  usersRewardsClaimed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyChannel(
    _channel: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADD_CHANNEL_MIN_FEES(overrides?: CallOverrides): Promise<BigNumber>;

    CHANNEL_POOL_FUNDS(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_CHANNEL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    FEE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_POOL_CONTRIBUTION(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_POOL_FEES(overrides?: CallOverrides): Promise<BigNumber>;

    PUSH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    REFERRAL_CODE(overrides?: CallOverrides): Promise<BigNumber>;

    UNISWAP_V2_ROUTER(overrides?: CallOverrides): Promise<string>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    aDaiAddress(overrides?: CallOverrides): Promise<string>;

    addPoolFees(
      _rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSubGraph(
      _subGraphData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchVerification(
      _startIndex: PromiseOrValue<BigNumberish>,
      _endIndex: PromiseOrValue<BigNumberish>,
      _channelList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    blockChannel(
      _channelAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeAddress(overrides?: CallOverrides): Promise<string>;

    calculateEpochRewards(
      _user: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    celebUserFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    channelById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    channelNotifSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    channelUpdateCounter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    channels(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        channelType: number;
        channelState: number;
        verifiedBy: string;
        poolContribution: BigNumber;
        channelHistoricalZ: BigNumber;
        channelFairShareCount: BigNumber;
        channelLastUpdate: BigNumber;
        channelStartBlock: BigNumber;
        channelUpdateBlock: BigNumber;
        channelWeight: BigNumber;
        expiryTime: BigNumber;
      }
    >;

    channelsCount(overrides?: CallOverrides): Promise<BigNumber>;

    claimChatIncentives(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createChannelSettings(
      _notifOptions: PromiseOrValue<BigNumberish>,
      _notifSettings: PromiseOrValue<string>,
      _notifDescription: PromiseOrValue<string>,
      _amountDeposited: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createChannelWithPUSH(
      _channelType: PromiseOrValue<BigNumberish>,
      _identity: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _channelExpiryTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    daiAddress(overrides?: CallOverrides): Promise<string>;

    daoHarvestPaginated(
      _tillEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateChannel(overrides?: CallOverrides): Promise<void>;

    destroyTimeBoundChannel(
      _channelAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    epnsCommunicator(overrides?: CallOverrides): Promise<string>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochToTotalStakedWeight(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getChannelVerfication(
      _channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    governance(overrides?: CallOverrides): Promise<string>;

    groupFairShareCount(overrides?: CallOverrides): Promise<BigNumber>;

    groupHistoricalZ(overrides?: CallOverrides): Promise<BigNumber>;

    groupLastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    groupNormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    handleChatRequestData(
      requestSender: PromiseOrValue<string>,
      requestReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      vaa: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    harvestAll(overrides?: CallOverrides): Promise<void>;

    harvestPaginated(
      _tillEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _pushChannelAdmin: PromiseOrValue<string>,
      _pushTokenAddress: PromiseOrValue<string>,
      _wethAddress: PromiseOrValue<string>,
      _uniswapRouterAddress: PromiseOrValue<string>,
      _lendingPoolProviderAddress: PromiseOrValue<string>,
      _daiAddress: PromiseOrValue<string>,
      _aDaiAddress: PromiseOrValue<string>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializeStake(overrides?: CallOverrides): Promise<void>;

    isMigrationComplete(overrides?: CallOverrides): Promise<boolean>;

    lastEpochRelative(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendingPoolProviderAddress(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseContract(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    previouslySetEpochRewards(overrides?: CallOverrides): Promise<BigNumber>;

    pushChannelAdmin(overrides?: CallOverrides): Promise<string>;

    reactivateChannel(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    relayerAddress(overrides?: CallOverrides): Promise<string>;

    setBridgeAddress(
      _bridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEpnsCommunicatorAddress(
      _commAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeAmount(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernanceAddress(
      _governanceAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinChannelCreationFees(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPoolContribution(
      _newAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayerAddress(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferPushChannelAdminControl(
      _newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unPauseContract(overrides?: CallOverrides): Promise<void>;

    unstake(overrides?: CallOverrides): Promise<void>;

    unverifyChannel(
      _channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateChannelMeta(
      _channel: PromiseOrValue<string>,
      _newIdentity: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userFeesInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakedAmount: BigNumber;
        stakedWeight: BigNumber;
        lastStakedBlock: BigNumber;
        lastClaimedBlock: BigNumber;
      }
    >;

    usersRewardsClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyChannel(
      _channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddChannel(address,uint8,bytes)"(
      channel?: PromiseOrValue<string> | null,
      channelType?: PromiseOrValue<BigNumberish> | null,
      identity?: null
    ): AddChannelEventFilter;
    AddChannel(
      channel?: PromiseOrValue<string> | null,
      channelType?: PromiseOrValue<BigNumberish> | null,
      identity?: null
    ): AddChannelEventFilter;

    "AddSubGraph(address,bytes)"(
      channel?: PromiseOrValue<string> | null,
      _subGraphData?: null
    ): AddSubGraphEventFilter;
    AddSubGraph(
      channel?: PromiseOrValue<string> | null,
      _subGraphData?: null
    ): AddSubGraphEventFilter;

    "BridgeAddressUpdated(address,address)"(
      oldBridge?: PromiseOrValue<string> | null,
      newBridge?: PromiseOrValue<string> | null
    ): BridgeAddressUpdatedEventFilter;
    BridgeAddressUpdated(
      oldBridge?: PromiseOrValue<string> | null,
      newBridge?: PromiseOrValue<string> | null
    ): BridgeAddressUpdatedEventFilter;

    "ChannelBlocked(address)"(
      channel?: PromiseOrValue<string> | null
    ): ChannelBlockedEventFilter;
    ChannelBlocked(
      channel?: PromiseOrValue<string> | null
    ): ChannelBlockedEventFilter;

    "ChannelNotifcationSettingsAdded(address,uint256,string,string)"(
      _channel?: null,
      totalNotifOptions?: null,
      _notifSettings?: null,
      _notifDescription?: null
    ): ChannelNotifcationSettingsAddedEventFilter;
    ChannelNotifcationSettingsAdded(
      _channel?: null,
      totalNotifOptions?: null,
      _notifSettings?: null,
      _notifDescription?: null
    ): ChannelNotifcationSettingsAddedEventFilter;

    "ChannelOwnershipTransfer(address,address)"(
      channel?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): ChannelOwnershipTransferEventFilter;
    ChannelOwnershipTransfer(
      channel?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): ChannelOwnershipTransferEventFilter;

    "ChannelVerificationRevoked(address,address)"(
      channel?: PromiseOrValue<string> | null,
      revoker?: PromiseOrValue<string> | null
    ): ChannelVerificationRevokedEventFilter;
    ChannelVerificationRevoked(
      channel?: PromiseOrValue<string> | null,
      revoker?: PromiseOrValue<string> | null
    ): ChannelVerificationRevokedEventFilter;

    "ChannelVerified(address,address)"(
      channel?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null
    ): ChannelVerifiedEventFilter;
    ChannelVerified(
      channel?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null
    ): ChannelVerifiedEventFilter;

    "ChatIncentiveClaimed(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountClaimed?: PromiseOrValue<BigNumberish> | null
    ): ChatIncentiveClaimedEventFilter;
    ChatIncentiveClaimed(
      user?: PromiseOrValue<string> | null,
      amountClaimed?: PromiseOrValue<BigNumberish> | null
    ): ChatIncentiveClaimedEventFilter;

    "DeactivateChannel(address,uint256)"(
      channel?: PromiseOrValue<string> | null,
      amountRefunded?: PromiseOrValue<BigNumberish> | null
    ): DeactivateChannelEventFilter;
    DeactivateChannel(
      channel?: PromiseOrValue<string> | null,
      amountRefunded?: PromiseOrValue<BigNumberish> | null
    ): DeactivateChannelEventFilter;

    "IncentivizeChatReqReceived(address,address,uint256,uint256,uint256)"(
      requestSender?: null,
      requestReceiver?: null,
      amountForReqReceiver?: null,
      feePoolAmount?: null,
      timestamp?: null
    ): IncentivizeChatReqReceivedEventFilter;
    IncentivizeChatReqReceived(
      requestSender?: null,
      requestReceiver?: null,
      amountForReqReceiver?: null,
      feePoolAmount?: null,
      timestamp?: null
    ): IncentivizeChatReqReceivedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ReactivateChannel(address,uint256)"(
      channel?: PromiseOrValue<string> | null,
      amountDeposited?: PromiseOrValue<BigNumberish> | null
    ): ReactivateChannelEventFilter;
    ReactivateChannel(
      channel?: PromiseOrValue<string> | null,
      amountDeposited?: PromiseOrValue<BigNumberish> | null
    ): ReactivateChannelEventFilter;

    "RelayerAddressUpdated(address,address)"(
      oldRelayer?: PromiseOrValue<string> | null,
      newRelayer?: PromiseOrValue<string> | null
    ): RelayerAddressUpdatedEventFilter;
    RelayerAddressUpdated(
      oldRelayer?: PromiseOrValue<string> | null,
      newRelayer?: PromiseOrValue<string> | null
    ): RelayerAddressUpdatedEventFilter;

    "RewardsClaimed(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      user?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;

    "RewardsHarvested(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      rewardAmount?: PromiseOrValue<BigNumberish> | null,
      fromEpoch?: null,
      tillEpoch?: null
    ): RewardsHarvestedEventFilter;
    RewardsHarvested(
      user?: PromiseOrValue<string> | null,
      rewardAmount?: PromiseOrValue<BigNumberish> | null,
      fromEpoch?: null,
      tillEpoch?: null
    ): RewardsHarvestedEventFilter;

    "Staked(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountStaked?: PromiseOrValue<BigNumberish> | null
    ): StakedEventFilter;
    Staked(
      user?: PromiseOrValue<string> | null,
      amountStaked?: PromiseOrValue<BigNumberish> | null
    ): StakedEventFilter;

    "TimeBoundChannelDestroyed(address,uint256)"(
      channel?: PromiseOrValue<string> | null,
      amountRefunded?: PromiseOrValue<BigNumberish> | null
    ): TimeBoundChannelDestroyedEventFilter;
    TimeBoundChannelDestroyed(
      channel?: PromiseOrValue<string> | null,
      amountRefunded?: PromiseOrValue<BigNumberish> | null
    ): TimeBoundChannelDestroyedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Unstaked(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountUnstaked?: PromiseOrValue<BigNumberish> | null
    ): UnstakedEventFilter;
    Unstaked(
      user?: PromiseOrValue<string> | null,
      amountUnstaked?: PromiseOrValue<BigNumberish> | null
    ): UnstakedEventFilter;

    "UpdateChannel(address,bytes)"(
      channel?: PromiseOrValue<string> | null,
      identity?: null
    ): UpdateChannelEventFilter;
    UpdateChannel(
      channel?: PromiseOrValue<string> | null,
      identity?: null
    ): UpdateChannelEventFilter;
  };

  estimateGas: {
    ADD_CHANNEL_MIN_FEES(overrides?: CallOverrides): Promise<BigNumber>;

    CHANNEL_POOL_FUNDS(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_CHANNEL_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_POOL_CONTRIBUTION(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_POOL_FEES(overrides?: CallOverrides): Promise<BigNumber>;

    PUSH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    REFERRAL_CODE(overrides?: CallOverrides): Promise<BigNumber>;

    UNISWAP_V2_ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    aDaiAddress(overrides?: CallOverrides): Promise<BigNumber>;

    addPoolFees(
      _rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSubGraph(
      _subGraphData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchVerification(
      _startIndex: PromiseOrValue<BigNumberish>,
      _endIndex: PromiseOrValue<BigNumberish>,
      _channelList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blockChannel(
      _channelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    calculateEpochRewards(
      _user: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    celebUserFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    channelById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    channelNotifSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    channelUpdateCounter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    channels(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    channelsCount(overrides?: CallOverrides): Promise<BigNumber>;

    claimChatIncentives(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createChannelSettings(
      _notifOptions: PromiseOrValue<BigNumberish>,
      _notifSettings: PromiseOrValue<string>,
      _notifDescription: PromiseOrValue<string>,
      _amountDeposited: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createChannelWithPUSH(
      _channelType: PromiseOrValue<BigNumberish>,
      _identity: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _channelExpiryTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daiAddress(overrides?: CallOverrides): Promise<BigNumber>;

    daoHarvestPaginated(
      _tillEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivateChannel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    destroyTimeBoundChannel(
      _channelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    epnsCommunicator(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochToTotalStakedWeight(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getChannelVerfication(
      _channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    groupFairShareCount(overrides?: CallOverrides): Promise<BigNumber>;

    groupHistoricalZ(overrides?: CallOverrides): Promise<BigNumber>;

    groupLastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    groupNormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    handleChatRequestData(
      requestSender: PromiseOrValue<string>,
      requestReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      vaa: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harvestAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harvestPaginated(
      _tillEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _pushChannelAdmin: PromiseOrValue<string>,
      _pushTokenAddress: PromiseOrValue<string>,
      _wethAddress: PromiseOrValue<string>,
      _uniswapRouterAddress: PromiseOrValue<string>,
      _lendingPoolProviderAddress: PromiseOrValue<string>,
      _daiAddress: PromiseOrValue<string>,
      _aDaiAddress: PromiseOrValue<string>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isMigrationComplete(overrides?: CallOverrides): Promise<BigNumber>;

    lastEpochRelative(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendingPoolProviderAddress(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    previouslySetEpochRewards(overrides?: CallOverrides): Promise<BigNumber>;

    pushChannelAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    reactivateChannel(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    relayerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setBridgeAddress(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEpnsCommunicatorAddress(
      _commAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeAmount(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernanceAddress(
      _governanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinChannelCreationFees(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinPoolContribution(
      _newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRelayerAddress(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferPushChannelAdminControl(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unPauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unverifyChannel(
      _channel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateChannelMeta(
      _channel: PromiseOrValue<string>,
      _newIdentity: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userFeesInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usersRewardsClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyChannel(
      _channel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADD_CHANNEL_MIN_FEES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHANNEL_POOL_FUNDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_CHANNEL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_POOL_CONTRIBUTION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROTOCOL_POOL_FEES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PUSH_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REFERRAL_CODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNISWAP_V2_ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aDaiAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPoolFees(
      _rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSubGraph(
      _subGraphData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchVerification(
      _startIndex: PromiseOrValue<BigNumberish>,
      _endIndex: PromiseOrValue<BigNumberish>,
      _channelList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blockChannel(
      _channelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateEpochRewards(
      _user: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    celebUserFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    channelById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    channelNotifSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    channelUpdateCounter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    channels(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    channelsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimChatIncentives(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createChannelSettings(
      _notifOptions: PromiseOrValue<BigNumberish>,
      _notifSettings: PromiseOrValue<string>,
      _notifDescription: PromiseOrValue<string>,
      _amountDeposited: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createChannelWithPUSH(
      _channelType: PromiseOrValue<BigNumberish>,
      _identity: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _channelExpiryTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daiAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoHarvestPaginated(
      _tillEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivateChannel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    destroyTimeBoundChannel(
      _channelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    epnsCommunicator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochToTotalStakedWeight(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesisEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChannelVerfication(
      _channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    groupFairShareCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    groupHistoricalZ(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    groupLastUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    groupNormalizedWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleChatRequestData(
      requestSender: PromiseOrValue<string>,
      requestReceiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      vaa: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harvestAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harvestPaginated(
      _tillEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _pushChannelAdmin: PromiseOrValue<string>,
      _pushTokenAddress: PromiseOrValue<string>,
      _wethAddress: PromiseOrValue<string>,
      _uniswapRouterAddress: PromiseOrValue<string>,
      _lendingPoolProviderAddress: PromiseOrValue<string>,
      _daiAddress: PromiseOrValue<string>,
      _aDaiAddress: PromiseOrValue<string>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isMigrationComplete(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastEpochRelative(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingPoolProviderAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previouslySetEpochRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pushChannelAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reactivateChannel(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    relayerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBridgeAddress(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEpnsCommunicatorAddress(
      _commAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAmount(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernanceAddress(
      _governanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinChannelCreationFees(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinPoolContribution(
      _newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRelayerAddress(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalStakedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferPushChannelAdminControl(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unPauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unverifyChannel(
      _channel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateChannelMeta(
      _channel: PromiseOrValue<string>,
      _newIdentity: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userFeesInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usersRewardsClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyChannel(
      _channel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
