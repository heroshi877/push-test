"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authenticate = exports.validateLink = exports.createLink = void 0;
const caip_1 = require("caip");
const ethereum_1 = __importDefault(require("./blockchains/ethereum"));
const polkadot_1 = __importDefault(require("./blockchains/polkadot"));
const eosio_1 = __importDefault(require("./blockchains/eosio"));
const findDID = (did) => { var _a; return (_a = did.match(/(did:(3|muport):[a-zA-Z0-9])\w+/)) === null || _a === void 0 ? void 0 : _a[0]; };
const handlers = {
    [ethereum_1.default.namespace]: ethereum_1.default,
    [polkadot_1.default.namespace]: polkadot_1.default,
    [eosio_1.default.namespace]: eosio_1.default
};
function createLink(did, account, provider, opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        if (typeof account === 'string')
            account = new caip_1.AccountID(account);
        const handler = handlers[account.chainId.namespace];
        if (!handler)
            throw new Error(`creating link with namespace '${account.chainId.namespace}' is not supported`);
        const proof = yield handler.createLink(did, account, provider, opts);
        if (proof) {
            return proof;
        }
        else {
            throw new Error(`Unable to create proof with namespace '${account.chainId.namespace}'`);
        }
    });
}
exports.createLink = createLink;
function validateLink(proof) {
    return __awaiter(this, void 0, void 0, function* () {
        let namespace = ethereum_1.default.namespace;
        if (proof.version >= 2) {
            namespace = (new caip_1.AccountID(proof.account)).chainId.namespace;
        }
        const handler = handlers[namespace];
        if (!handler)
            throw new Error(`proof with namespace '${namespace}' not supported`);
        const validProof = yield handler.validateLink(proof);
        if (validProof) {
            validProof.did = findDID(validProof.message);
            return validProof;
        }
        else {
            return null;
        }
    });
}
exports.validateLink = validateLink;
function authenticate(message, account, provider) {
    return __awaiter(this, void 0, void 0, function* () {
        if (typeof account === 'string')
            account = new caip_1.AccountID(account);
        const handler = handlers[account.chainId.namespace];
        if (!handler)
            throw new Error(`authenticate with namespace '${account.chainId.namespace}' not supported`);
        return handler.authenticate(message, account, provider);
    });
}
exports.authenticate = authenticate;
//# sourceMappingURL=index.js.map