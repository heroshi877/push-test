import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  require_cjs
} from "./chunk-5DEZFOZQ.js";
import {
  init_lib17 as init_lib,
  lib_exports17 as lib_exports
} from "./chunk-53TYC67H.js";
import {
  init_tslib_es6,
  tslib_es6_exports
} from "./chunk-FOVVVYF4.js";
import {
  __commonJS,
  __toCommonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/@pushprotocol/socket/src/lib/constants.js
var require_constants = __commonJS({
  "node_modules/@pushprotocol/socket/src/lib/constants.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EVENTS = exports.DEFAULT_CHAINS = exports.ENV = void 0;
    var ENV;
    (function(ENV2) {
      ENV2["PROD"] = "prod";
      ENV2["STAGING"] = "staging";
      ENV2["DEV"] = "dev";
      ENV2["LOCAL"] = "local";
    })(ENV = exports.ENV || (exports.ENV = {}));
    var DEFAULT_CHAINS;
    (function(DEFAULT_CHAINS2) {
      DEFAULT_CHAINS2[DEFAULT_CHAINS2["PROD"] = 1] = "PROD";
      DEFAULT_CHAINS2[DEFAULT_CHAINS2["STAGING"] = 11155111] = "STAGING";
      DEFAULT_CHAINS2[DEFAULT_CHAINS2["DEV"] = 11155111] = "DEV";
      DEFAULT_CHAINS2[DEFAULT_CHAINS2["LOCAL"] = 11155111] = "LOCAL";
    })(DEFAULT_CHAINS = exports.DEFAULT_CHAINS || (exports.DEFAULT_CHAINS = {}));
    exports.EVENTS = {
      // Websocket
      CONNECT: "connect",
      DISCONNECT: "disconnect",
      // Notification
      USER_FEEDS: "userFeeds",
      USER_SPAM_FEEDS: "userSpamFeeds",
      // Chat
      CHAT_RECEIVED_MESSAGE: "CHATS",
      CHAT_GROUPS: "CHAT_GROUPS"
    };
  }
});

// node_modules/@pushprotocol/socket/src/lib/config.js
var require_config = __commonJS({
  "node_modules/@pushprotocol/socket/src/lib/config.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.API_URLS = void 0;
    var constants_1 = require_constants();
    exports.API_URLS = {
      [constants_1.ENV.PROD]: "https://backend.epns.io",
      [constants_1.ENV.STAGING]: "https://backend-staging.epns.io",
      [constants_1.ENV.DEV]: "https://backend-dev.epns.io",
      /**
       * **This is for local development only**
       */
      [constants_1.ENV.LOCAL]: "http://localhost:4000"
    };
  }
});

// node_modules/@pushprotocol/socket/src/lib/helpers.js
var require_helpers = __commonJS({
  "node_modules/@pushprotocol/socket/src/lib/helpers.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.walletToPCAIP10 = exports.getCAIPAddress = exports.getFallbackETHCAIPAddress = exports.validateCAIP = exports.isValidCAIP10NFTAddress = exports.isValidETHAddress = void 0;
    var ethers_1 = (init_lib(), __toCommonJS(lib_exports));
    var constants_1 = require_constants();
    function isValidETHAddress(address) {
      return ethers_1.ethers.utils.isAddress(address);
    }
    exports.isValidETHAddress = isValidETHAddress;
    var AddressValidators = {
      // Ethereum
      eip155: ({ address }) => {
        return isValidETHAddress(address);
      }
      // Add other chains here
    };
    var isValidCAIP10NFTAddress = (wallet) => {
      try {
        const walletComponent = wallet.split(":");
        return (walletComponent.length === 5 || walletComponent.length === 6) && walletComponent[0].toLowerCase() === "nft" && !isNaN(Number(walletComponent[4])) && Number(walletComponent[4]) > 0 && !isNaN(Number(walletComponent[2])) && Number(walletComponent[2]) > 0 && ethers_1.ethers.utils.isAddress(walletComponent[3]) && walletComponent[1] === "eip155";
      } catch (err) {
        return false;
      }
    };
    exports.isValidCAIP10NFTAddress = isValidCAIP10NFTAddress;
    function validateCAIP(addressInCAIP) {
      const [blockchain, networkId, address] = addressInCAIP.split(":");
      if (!blockchain)
        return false;
      if (!networkId)
        return false;
      if (!address)
        return false;
      if ((0, exports.isValidCAIP10NFTAddress)(addressInCAIP))
        return true;
      const validatorFn = AddressValidators[blockchain];
      return validatorFn({ address });
    }
    exports.validateCAIP = validateCAIP;
    function getFallbackETHCAIPAddress(env, address) {
      let chainId;
      switch (env) {
        case constants_1.ENV.PROD:
          chainId = constants_1.DEFAULT_CHAINS.PROD;
          break;
        case constants_1.ENV.STAGING:
          chainId = constants_1.DEFAULT_CHAINS.STAGING;
          break;
        case constants_1.ENV.DEV:
          chainId = constants_1.DEFAULT_CHAINS.DEV;
          break;
        case constants_1.ENV.LOCAL:
          chainId = constants_1.DEFAULT_CHAINS.LOCAL;
          break;
        default:
          chainId = constants_1.DEFAULT_CHAINS.PROD;
      }
      return `eip155:${chainId}:${address}`;
    }
    exports.getFallbackETHCAIPAddress = getFallbackETHCAIPAddress;
    function getCAIPAddress(env, address, msg) {
      if (validateCAIP(address)) {
        return address;
      } else {
        if (isValidETHAddress(address)) {
          return getFallbackETHCAIPAddress(env, address);
        } else {
          throw Error(`Invalid Address! ${msg}`);
        }
      }
    }
    exports.getCAIPAddress = getCAIPAddress;
    var walletToPCAIP10 = (account) => {
      if (account.includes("eip155:")) {
        return account;
      }
      return "eip155:" + account;
    };
    exports.walletToPCAIP10 = walletToPCAIP10;
  }
});

// node_modules/@pushprotocol/socket/src/lib/client/socketClient.js
var require_socketClient = __commonJS({
  "node_modules/@pushprotocol/socket/src/lib/client/socketClient.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSocketConnection = void 0;
    var socket_io_client_1 = require_cjs();
    var config_1 = require_config();
    var helpers_1 = require_helpers();
    function createSocketConnection({ user, env, socketType = "notification", apiKey, socketOptions }) {
      const { autoConnect = true, reconnectionAttempts = 5, reconnectionDelay, reconnectionDelayMax } = socketOptions || {};
      const pushWSUrl = config_1.API_URLS[env];
      const transports = ["websocket"];
      let pushSocket = null;
      try {
        const userAddressInCAIP = socketType === "chat" ? (0, helpers_1.walletToPCAIP10)(user) : (0, helpers_1.getCAIPAddress)(env, user, "User");
        let query;
        if (socketType === "notification")
          query = { address: userAddressInCAIP };
        else
          query = { mode: "chat", did: userAddressInCAIP };
        const options = Object.assign(Object.assign({
          transports,
          query,
          autoConnect,
          reconnectionAttempts
        }, reconnectionDelay !== void 0 && { reconnectionDelay }), reconnectionDelayMax !== void 0 && { reconnectionDelayMax });
        pushSocket = (0, socket_io_client_1.io)(pushWSUrl, options);
      } catch (e) {
        console.error("[PUSH-SDK] - Socket connection error: ");
        console.error(e);
      } finally {
        return pushSocket;
      }
    }
    exports.createSocketConnection = createSocketConnection;
  }
});

// node_modules/@pushprotocol/socket/src/lib/client/index.js
var require_client = __commonJS({
  "node_modules/@pushprotocol/socket/src/lib/client/index.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_socketClient(), exports);
  }
});

// node_modules/@pushprotocol/socket/src/lib/index.js
var require_lib = __commonJS({
  "node_modules/@pushprotocol/socket/src/lib/index.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EVENTS = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var constants_1 = require_constants();
    Object.defineProperty(exports, "EVENTS", { enumerable: true, get: function() {
      return constants_1.EVENTS;
    } });
    tslib_1.__exportStar(require_client(), exports);
  }
});

// node_modules/@pushprotocol/socket/src/index.js
var require_src = __commonJS({
  "node_modules/@pushprotocol/socket/src/index.js"(exports) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_lib(), exports);
  }
});

export {
  require_src
};
//# sourceMappingURL=chunk-BAPROTAH.js.map
