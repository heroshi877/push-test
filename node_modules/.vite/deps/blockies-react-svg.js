import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  require_jsx_runtime
} from "./chunk-EBWXMJHO.js";
import {
  require_react
} from "./chunk-DTW63AUM.js";
import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/blockies-react-svg/dist/es/BlockiesSvg.mjs
var import_dist7 = __toESM(require_dist(), 1);
var import_dist8 = __toESM(require_dist2(), 1);
var import_dist9 = __toESM(require_dist3(), 1);

// node_modules/blockies-react-svg/dist/es/_tslib-5dd6082a.mjs
var import_dist = __toESM(require_dist(), 1);
var import_dist2 = __toESM(require_dist2(), 1);
var import_dist3 = __toESM(require_dist3(), 1);
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}

// node_modules/blockies-react-svg/dist/es/BlockiesSvg.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);

// node_modules/blockies-react-svg/dist/es/blockies-a884f18e.mjs
var import_dist4 = __toESM(require_dist(), 1);
var import_dist5 = __toESM(require_dist2(), 1);
var import_dist6 = __toESM(require_dist3(), 1);
var randseed = new Array(4);
function seedrand(seed) {
  randseed.fill(0);
  for (let i = 0; i < seed.length; i++) {
    randseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);
  }
}
function rand() {
  const t = randseed[0] ^ randseed[0] << 11;
  randseed[0] = randseed[1];
  randseed[1] = randseed[2];
  randseed[2] = randseed[3];
  randseed[3] = randseed[3] ^ randseed[3] >> 19 ^ t ^ t >> 8;
  return (randseed[3] >>> 0) / (1 << 31 >>> 0);
}
function createColor() {
  const h = Math.floor(rand() * 360);
  const s = (rand() * 60 + 40).toFixed(1) + "%";
  const l = ((rand() + rand() + rand() + rand()) * 25).toFixed(1) + "%";
  return "hsl(" + h + "," + s + "," + l + ")";
}
function createImageData(size) {
  const width = size;
  const height = size;
  const dataWidth = Math.ceil(width / 2);
  const mirrorWidth = width - dataWidth;
  const data = [];
  for (let y = 0; y < height; y++) {
    let row = [];
    for (let x = 0; x < dataWidth; x++) {
      row[x] = Math.floor(rand() * 2.3);
    }
    const r = row.slice(0, mirrorWidth);
    r.reverse();
    row = row.concat(r);
    for (let i = 0; i < row.length; i++) {
      data.push(row[i]);
    }
  }
  return data;
}
function buildOpts(opts) {
  seedrand(opts.seed);
  const newOpts = {
    seed: opts.seed,
    size: opts.size || 8,
    scale: opts.scale || 10,
    color: createColor(),
    bgcolor: createColor(),
    spotcolor: createColor()
  };
  return newOpts;
}

// node_modules/blockies-react-svg/dist/es/BlockiesSvg.mjs
var store = /* @__PURE__ */ Object.create(null);
function BlockiesSvg(props) {
  let { address, size = 8, scale = 10, caseSensitive = false, defaultBackgroundColor = "black" } = props, rest = __rest(props, ["address", "size", "scale", "caseSensitive", "defaultBackgroundColor"]);
  const width = size * scale;
  const [opts, setOpts] = (0, import_react.useState)(null);
  const [imageData, setImageData] = (0, import_react.useState)(null);
  if (!caseSensitive && address)
    address = address.toLowerCase();
  (0, import_react.useEffect)(() => {
    if (address) {
      if (store[address] && store[address].opts.size === size) {
        setOpts(store[address].opts);
        setImageData(store[address].imageData);
      } else {
        const newOpts = buildOpts({ seed: address, size, scale });
        const newImageData = createImageData(newOpts.size);
        setOpts(newOpts);
        setImageData(newImageData);
        store[address] = { opts: newOpts, imageData: newImageData };
      }
    }
  }, [address]);
  if (!address)
    return (0, import_jsx_runtime.jsx)("svg", Object.assign({}, rest, { width, height: width, viewBox: `0 0 ${width} ${width}`, xmlns: "http://www.w3.org/2000/svg" }, { children: (0, import_jsx_runtime.jsx)("rect", { width, height: width, fill: defaultBackgroundColor }) }));
  if (opts && imageData) {
    return (0, import_jsx_runtime.jsxs)("svg", Object.assign({}, rest, { width, height: width, viewBox: `0 0 ${width} ${width}`, xmlns: "http://www.w3.org/2000/svg" }, { children: [(0, import_jsx_runtime.jsx)("rect", { width, height: width, fill: opts.bgcolor }), (0, import_jsx_runtime.jsx)("g", Object.assign({ fill: opts.color }, { children: imageData === null || imageData === void 0 ? void 0 : imageData.map((value, i) => {
      if (value === 1) {
        const row = i % size * scale;
        const col = Math.floor(i / size) * scale;
        return (0, import_jsx_runtime.jsx)("rect", { width: scale, height: scale, x: row, y: col }, `${address}-${i}`);
      }
    }) })), (0, import_jsx_runtime.jsx)("g", Object.assign({ fill: opts.spotcolor }, { children: imageData === null || imageData === void 0 ? void 0 : imageData.map((value, i) => {
      if (value === 2) {
        const row = i % size * scale;
        const col = Math.floor(i / size) * scale;
        return (0, import_jsx_runtime.jsx)("rect", { width: scale, height: scale, x: row, y: col }, `${address}-${i}`);
      }
    }) }))] }));
  } else
    return (0, import_jsx_runtime.jsx)("svg", Object.assign({}, rest, { width, height: width, viewBox: `0 0 ${width} ${width}`, xmlns: "http://www.w3.org/2000/svg" }, { children: (0, import_jsx_runtime.jsx)("rect", { width, height: width, fill: "black" }) }));
}
export {
  BlockiesSvg as default
};
//# sourceMappingURL=blockies-react-svg.js.map
