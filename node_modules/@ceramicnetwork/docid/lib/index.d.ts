import CID from 'cids';
declare class DocID {
    private _doctype;
    private _cid;
    private _multibaseName;
    private _bytes;
    private _version;
    constructor(doctype: string | number, cid: CID | string, version?: CID | string | number, multibaseName?: string);
    static fromBytes(bytes: Uint8Array, version?: CID | string, multibaseName?: string): DocID;
    static _genesisCIDLength(bytes: Uint8Array): number;
    static fromString(docId: string, version?: CID | string): DocID;
    get baseID(): DocID;
    get type(): number;
    get typeName(): string;
    get cid(): CID;
    get version(): CID | undefined;
    get multibaseName(): string;
    get multihash(): Uint8Array;
    get codec(): string;
    get bytes(): Uint8Array;
    equals(other: DocID | Uint8Array | string): boolean;
    toBaseEncodedString(base?: string): string;
    toString(base?: string): string;
    toUrl(base: string): string;
    [Symbol.toPrimitive](): string | Uint8Array;
    static isDocID(other: any): boolean;
}
export default DocID;
