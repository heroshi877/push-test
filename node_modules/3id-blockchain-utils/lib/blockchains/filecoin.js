"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateLink = exports.authenticate = exports.createLink = void 0;
const caip_1 = require("caip");
const utils_1 = require("../utils");
const uint8arrays = __importStar(require("uint8arrays"));
const namespace = 'fil';
function asTransaction(address, message) {
    const messageParams = uint8arrays.toString(uint8arrays.fromString(message), 'base64');
    return {
        From: address,
        To: address,
        Value: "0",
        Method: 0,
        GasPrice: "1",
        GasLimit: 1000,
        Nonce: 0,
        Params: messageParams,
        GasFeeCap: "1",
        GasPremium: "1"
    };
}
function createLink(did, account, provider, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { message, timestamp } = utils_1.getConsentMessage(did, !(opts === null || opts === void 0 ? void 0 : opts.skipTimestamp));
        const addresses = yield provider.getAccounts();
        const payload = asTransaction(addresses[0], message);
        const signatureResponse = yield provider.sign(account.address, payload);
        const proof = {
            version: 2,
            type: 'eoa-tx',
            message: message,
            signature: signatureResponse.Signature.Data,
            account: account.toString()
        };
        if (!(opts === null || opts === void 0 ? void 0 : opts.skipTimestamp))
            proof.timestamp = timestamp;
        return proof;
    });
}
exports.createLink = createLink;
function authenticate(message, account, provider) {
    return __awaiter(this, void 0, void 0, function* () {
        const addresses = yield provider.getAccounts();
        const payload = asTransaction(addresses[0], JSON.stringify(message));
        const signatureResponse = yield provider.sign(account.address, payload);
        return signatureResponse.Signature.Data;
    });
}
exports.authenticate = authenticate;
function validateLink(proof) {
    return __awaiter(this, void 0, void 0, function* () {
        const signingTools = yield Promise.resolve().then(() => __importStar(require("@zondax/filecoin-signing-tools")));
        const account = new caip_1.AccountID(proof.account);
        const payload = asTransaction(account.address, proof.message);
        const transaction = signingTools.transactionSerialize(payload);
        try {
            const recover = signingTools.verifySignature(proof.signature, transaction);
            if (recover) {
                return proof;
            }
            else {
                return null;
            }
        }
        catch (_a) {
            return null;
        }
    });
}
exports.validateLink = validateLink;
const Handler = {
    namespace,
    authenticate,
    validateLink,
    createLink
};
exports.default = Handler;
//# sourceMappingURL=filecoin.js.map