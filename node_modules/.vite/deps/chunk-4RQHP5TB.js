import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  CID,
  base32_exports,
  base58_exports,
  baseX,
  bytes_exports,
  coerce,
  create,
  digest_exports,
  from,
  fromString,
  init_base,
  init_base32,
  init_base58,
  init_bytes,
  init_cid,
  init_digest,
  init_varint,
  rfc4648,
  toString,
  varint_exports
} from "./chunk-55VHLUOO.js";
import {
  __esm,
  __export,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});
var import_dist, import_dist2, import_dist3, code, name, encode, digest, identity;
var init_identity = __esm({
  "node_modules/multiformats/esm/src/hashes/identity.js"() {
    import_dist = __toESM(require_dist(), 1);
    import_dist2 = __toESM(require_dist2(), 1);
    import_dist3 = __toESM(require_dist3(), 1);
    init_bytes();
    init_digest();
    code = 0;
    name = "identity";
    encode = coerce;
    digest = (input) => create(code, encode(input));
    identity = {
      code,
      name,
      encode,
      digest
    };
  }
});

// node_modules/multiformats/esm/src/bases/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var import_dist4, import_dist5, import_dist6, identity2;
var init_identity2 = __esm({
  "node_modules/multiformats/esm/src/bases/identity.js"() {
    import_dist4 = __toESM(require_dist(), 1);
    import_dist5 = __toESM(require_dist2(), 1);
    import_dist6 = __toESM(require_dist3(), 1);
    init_base();
    init_bytes();
    identity2 = from({
      prefix: "\0",
      name: "identity",
      encode: (buf) => toString(buf),
      decode: (str) => fromString(str)
    });
  }
});

// node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base2
});
var import_dist7, import_dist8, import_dist9, base2;
var init_base2 = __esm({
  "node_modules/multiformats/esm/src/bases/base2.js"() {
    import_dist7 = __toESM(require_dist(), 1);
    import_dist8 = __toESM(require_dist2(), 1);
    import_dist9 = __toESM(require_dist3(), 1);
    init_base();
    base2 = rfc4648({
      prefix: "0",
      name: "base2",
      alphabet: "01",
      bitsPerChar: 1
    });
  }
});

// node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var import_dist10, import_dist11, import_dist12, base8;
var init_base8 = __esm({
  "node_modules/multiformats/esm/src/bases/base8.js"() {
    import_dist10 = __toESM(require_dist(), 1);
    import_dist11 = __toESM(require_dist2(), 1);
    import_dist12 = __toESM(require_dist3(), 1);
    init_base();
    base8 = rfc4648({
      prefix: "7",
      name: "base8",
      alphabet: "01234567",
      bitsPerChar: 3
    });
  }
});

// node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var import_dist13, import_dist14, import_dist15, base10;
var init_base10 = __esm({
  "node_modules/multiformats/esm/src/bases/base10.js"() {
    import_dist13 = __toESM(require_dist(), 1);
    import_dist14 = __toESM(require_dist2(), 1);
    import_dist15 = __toESM(require_dist3(), 1);
    init_base();
    base10 = baseX({
      prefix: "9",
      name: "base10",
      alphabet: "0123456789"
    });
  }
});

// node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base16,
  base16upper: () => base16upper
});
var import_dist16, import_dist17, import_dist18, base16, base16upper;
var init_base16 = __esm({
  "node_modules/multiformats/esm/src/bases/base16.js"() {
    import_dist16 = __toESM(require_dist(), 1);
    import_dist17 = __toESM(require_dist2(), 1);
    import_dist18 = __toESM(require_dist3(), 1);
    init_base();
    base16 = rfc4648({
      prefix: "f",
      name: "base16",
      alphabet: "0123456789abcdef",
      bitsPerChar: 4
    });
    base16upper = rfc4648({
      prefix: "F",
      name: "base16upper",
      alphabet: "0123456789ABCDEF",
      bitsPerChar: 4
    });
  }
});

// node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var import_dist19, import_dist20, import_dist21, base36, base36upper;
var init_base36 = __esm({
  "node_modules/multiformats/esm/src/bases/base36.js"() {
    import_dist19 = __toESM(require_dist(), 1);
    import_dist20 = __toESM(require_dist2(), 1);
    import_dist21 = __toESM(require_dist3(), 1);
    init_base();
    base36 = baseX({
      prefix: "k",
      name: "base36",
      alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
    });
    base36upper = baseX({
      prefix: "K",
      name: "base36upper",
      alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    });
  }
});

// node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base64,
  base64pad: () => base64pad,
  base64url: () => base64url,
  base64urlpad: () => base64urlpad
});
var import_dist22, import_dist23, import_dist24, base64, base64pad, base64url, base64urlpad;
var init_base64 = __esm({
  "node_modules/multiformats/esm/src/bases/base64.js"() {
    import_dist22 = __toESM(require_dist(), 1);
    import_dist23 = __toESM(require_dist2(), 1);
    import_dist24 = __toESM(require_dist3(), 1);
    init_base();
    base64 = rfc4648({
      prefix: "m",
      name: "base64",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
      bitsPerChar: 6
    });
    base64pad = rfc4648({
      prefix: "M",
      name: "base64pad",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
      bitsPerChar: 6
    });
    base64url = rfc4648({
      prefix: "u",
      name: "base64url",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
      bitsPerChar: 6
    });
    base64urlpad = rfc4648({
      prefix: "U",
      name: "base64urlpad",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
      bitsPerChar: 6
    });
  }
});

// node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
function encode2(data) {
  return data.reduce((p, c) => {
    p += alphabetBytesToChars[c];
    return p;
  }, "");
}
function decode(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var import_dist25, import_dist26, import_dist27, alphabet, alphabetBytesToChars, alphabetCharsToBytes, base256emoji;
var init_base256emoji = __esm({
  "node_modules/multiformats/esm/src/bases/base256emoji.js"() {
    import_dist25 = __toESM(require_dist(), 1);
    import_dist26 = __toESM(require_dist2(), 1);
    import_dist27 = __toESM(require_dist3(), 1);
    init_base();
    alphabet = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
    alphabetBytesToChars = alphabet.reduce((p, c, i) => {
      p[i] = c;
      return p;
    }, []);
    alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
      p[c.codePointAt(0)] = i;
      return p;
    }, []);
    base256emoji = from({
      prefix: "🚀",
      name: "base256emoji",
      encode: encode2,
      decode
    });
  }
});

// node_modules/multiformats/esm/src/hashes/hasher.js
var hasher_exports = {};
__export(hasher_exports, {
  Hasher: () => Hasher,
  from: () => from2
});
var import_dist28, import_dist29, import_dist30, from2, Hasher;
var init_hasher = __esm({
  "node_modules/multiformats/esm/src/hashes/hasher.js"() {
    import_dist28 = __toESM(require_dist(), 1);
    import_dist29 = __toESM(require_dist2(), 1);
    import_dist30 = __toESM(require_dist3(), 1);
    init_digest();
    from2 = ({ name: name4, code: code4, encode: encode5 }) => new Hasher(name4, code4, encode5);
    Hasher = class {
      constructor(name4, code4, encode5) {
        this.name = name4;
        this.code = code4;
        this.encode = encode5;
      }
      digest(input) {
        if (input instanceof Uint8Array) {
          const result = this.encode(input);
          return result instanceof Uint8Array ? create(this.code, result) : result.then((digest2) => create(this.code, digest2));
        } else {
          throw Error("Unknown type, must be binary type");
        }
      }
    };
  }
});

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha256,
  sha512: () => sha512
});
var import_dist31, import_dist32, import_dist33, sha, sha256, sha512;
var init_sha2_browser = __esm({
  "node_modules/multiformats/esm/src/hashes/sha2-browser.js"() {
    import_dist31 = __toESM(require_dist(), 1);
    import_dist32 = __toESM(require_dist2(), 1);
    import_dist33 = __toESM(require_dist3(), 1);
    init_hasher();
    sha = (name4) => async (data) => new Uint8Array(await crypto.subtle.digest(name4, data));
    sha256 = from2({
      name: "sha2-256",
      code: 18,
      encode: sha("SHA-256")
    });
    sha512 = from2({
      name: "sha2-512",
      code: 19,
      encode: sha("SHA-512")
    });
  }
});

// node_modules/multiformats/esm/src/codecs/raw.js
var raw_exports = {};
__export(raw_exports, {
  code: () => code2,
  decode: () => decode2,
  encode: () => encode3,
  name: () => name2
});
var import_dist34, import_dist35, import_dist36, name2, code2, encode3, decode2;
var init_raw = __esm({
  "node_modules/multiformats/esm/src/codecs/raw.js"() {
    import_dist34 = __toESM(require_dist(), 1);
    import_dist35 = __toESM(require_dist2(), 1);
    import_dist36 = __toESM(require_dist3(), 1);
    init_bytes();
    name2 = "raw";
    code2 = 85;
    encode3 = (node) => coerce(node);
    decode2 = (data) => coerce(data);
  }
});

// node_modules/multiformats/esm/src/codecs/json.js
var json_exports = {};
__export(json_exports, {
  code: () => code3,
  decode: () => decode3,
  encode: () => encode4,
  name: () => name3
});
var import_dist37, import_dist38, import_dist39, textEncoder, textDecoder, name3, code3, encode4, decode3;
var init_json = __esm({
  "node_modules/multiformats/esm/src/codecs/json.js"() {
    import_dist37 = __toESM(require_dist(), 1);
    import_dist38 = __toESM(require_dist2(), 1);
    import_dist39 = __toESM(require_dist3(), 1);
    textEncoder = new TextEncoder();
    textDecoder = new TextDecoder();
    name3 = "json";
    code3 = 512;
    encode4 = (node) => textEncoder.encode(JSON.stringify(node));
    decode3 = (data) => JSON.parse(textDecoder.decode(data));
  }
});

// node_modules/multiformats/esm/src/index.js
var import_dist40, import_dist41, import_dist42;
var init_src = __esm({
  "node_modules/multiformats/esm/src/index.js"() {
    import_dist40 = __toESM(require_dist(), 1);
    import_dist41 = __toESM(require_dist2(), 1);
    import_dist42 = __toESM(require_dist3(), 1);
    init_cid();
    init_varint();
    init_bytes();
    init_hasher();
    init_digest();
  }
});

// node_modules/multiformats/esm/src/basics.js
var basics_exports = {};
__export(basics_exports, {
  CID: () => CID,
  bases: () => bases,
  bytes: () => bytes_exports,
  codecs: () => codecs,
  digest: () => digest_exports,
  hasher: () => hasher_exports,
  hashes: () => hashes,
  varint: () => varint_exports
});
var import_dist43, import_dist44, import_dist45, bases, hashes, codecs;
var init_basics = __esm({
  "node_modules/multiformats/esm/src/basics.js"() {
    import_dist43 = __toESM(require_dist());
    import_dist44 = __toESM(require_dist2());
    import_dist45 = __toESM(require_dist3());
    init_identity2();
    init_base2();
    init_base8();
    init_base10();
    init_base16();
    init_base32();
    init_base36();
    init_base58();
    init_base64();
    init_base256emoji();
    init_sha2_browser();
    init_identity();
    init_raw();
    init_json();
    init_src();
    bases = {
      ...identity_exports2,
      ...base2_exports,
      ...base8_exports,
      ...base10_exports,
      ...base16_exports,
      ...base32_exports,
      ...base36_exports,
      ...base58_exports,
      ...base64_exports,
      ...base256emoji_exports
    };
    hashes = {
      ...sha2_browser_exports,
      ...identity_exports
    };
    codecs = {
      raw: raw_exports,
      json: json_exports
    };
  }
});

// node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}
var import_dist46, import_dist47, import_dist48;
var init_as_uint8array = __esm({
  "node_modules/uint8arrays/esm/src/util/as-uint8array.js"() {
    import_dist46 = __toESM(require_dist(), 1);
    import_dist47 = __toESM(require_dist2(), 1);
    import_dist48 = __toESM(require_dist3(), 1);
  }
});

// node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size));
  }
  return new Uint8Array(size);
}
var import_dist49, import_dist50, import_dist51;
var init_alloc = __esm({
  "node_modules/uint8arrays/esm/src/alloc.js"() {
    import_dist49 = __toESM(require_dist(), 1);
    import_dist50 = __toESM(require_dist2(), 1);
    import_dist51 = __toESM(require_dist3(), 1);
    init_as_uint8array();
  }
});

// node_modules/uint8arrays/esm/src/concat.js
var concat_exports = {};
__export(concat_exports, {
  concat: () => concat
});
function concat(arrays, length) {
  if (!length) {
    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}
var import_dist52, import_dist53, import_dist54;
var init_concat = __esm({
  "node_modules/uint8arrays/esm/src/concat.js"() {
    import_dist52 = __toESM(require_dist());
    import_dist53 = __toESM(require_dist2());
    import_dist54 = __toESM(require_dist3());
    init_alloc();
    init_as_uint8array();
  }
});

// node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name4, prefix, encode5, decode4) {
  return {
    name: name4,
    prefix,
    encoder: {
      name: name4,
      prefix,
      encode: encode5
    },
    decoder: { decode: decode4 }
  };
}
var import_dist55, import_dist56, import_dist57, string, ascii, BASES, bases_default;
var init_bases = __esm({
  "node_modules/uint8arrays/esm/src/util/bases.js"() {
    import_dist55 = __toESM(require_dist(), 1);
    import_dist56 = __toESM(require_dist2(), 1);
    import_dist57 = __toESM(require_dist3(), 1);
    init_basics();
    init_alloc();
    string = createCodec("utf8", "u", (buf) => {
      const decoder = new TextDecoder("utf8");
      return "u" + decoder.decode(buf);
    }, (str) => {
      const encoder = new TextEncoder();
      return encoder.encode(str.substring(1));
    });
    ascii = createCodec("ascii", "a", (buf) => {
      let string2 = "a";
      for (let i = 0; i < buf.length; i++) {
        string2 += String.fromCharCode(buf[i]);
      }
      return string2;
    }, (str) => {
      str = str.substring(1);
      const buf = allocUnsafe(str.length);
      for (let i = 0; i < str.length; i++) {
        buf[i] = str.charCodeAt(i);
      }
      return buf;
    });
    BASES = {
      utf8: string,
      "utf-8": string,
      hex: bases.base16,
      latin1: ascii,
      ascii,
      binary: ascii,
      ...bases
    };
    bases_default = BASES;
  }
});

// node_modules/uint8arrays/esm/src/to-string.js
var to_string_exports = {};
__export(to_string_exports, {
  toString: () => toString2
});
function toString2(array, encoding = "utf8") {
  const base = bases_default[encoding];
  if (!base) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base.encoder.encode(array).substring(1);
}
var import_dist58, import_dist59, import_dist60;
var init_to_string = __esm({
  "node_modules/uint8arrays/esm/src/to-string.js"() {
    import_dist58 = __toESM(require_dist());
    import_dist59 = __toESM(require_dist2());
    import_dist60 = __toESM(require_dist3());
    init_bases();
  }
});

// node_modules/uint8arrays/esm/src/from-string.js
var from_string_exports = {};
__export(from_string_exports, {
  fromString: () => fromString2
});
function fromString2(string2, encoding = "utf8") {
  const base = bases_default[encoding];
  if (!base) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string2, "utf-8"));
  }
  return base.decoder.decode(`${base.prefix}${string2}`);
}
var import_dist61, import_dist62, import_dist63;
var init_from_string = __esm({
  "node_modules/uint8arrays/esm/src/from-string.js"() {
    import_dist61 = __toESM(require_dist());
    import_dist62 = __toESM(require_dist2());
    import_dist63 = __toESM(require_dist3());
    init_bases();
    init_as_uint8array();
  }
});

export {
  base64,
  base64url,
  base64_exports,
  init_base64,
  identity,
  init_identity,
  init_src,
  bases,
  hashes,
  codecs,
  basics_exports,
  init_basics,
  concat,
  concat_exports,
  init_concat,
  toString2 as toString,
  to_string_exports,
  init_to_string,
  fromString2 as fromString,
  from_string_exports,
  init_from_string
};
//# sourceMappingURL=chunk-4RQHP5TB.js.map
