"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinStoreFactory = void 0;
const level_state_store_1 = require("./level-state-store");
const pinning_aggregation_1 = require("../pinning/pinning-aggregation");
const ipfs_pinning_1 = require("../pinning/ipfs-pinning");
const powergate_pinning_1 = require("../pinning/powergate-pinning");
const pin_store_1 = require("./pin-store");
const path_1 = __importDefault(require("path"));
class PinStoreFactory {
    constructor(context, stateStorePath, pinnings) {
        this.context = context;
        this.stateStorePath = stateStorePath || path_1.default.join(process.cwd(), '.pinning.store');
        this.pinnings = pinnings && pinnings.length > 0 ? pinnings : ['ipfs+context'];
    }
    async open() {
        const stateStore = new level_state_store_1.LevelStateStore(this.stateStorePath);
        const pinning = new pinning_aggregation_1.PinningAggregation(this.context, this.pinnings, [ipfs_pinning_1.IpfsPinning, powergate_pinning_1.PowergatePinning]);
        const ipfs = this.context.ipfs;
        const retrieve = async (cid) => {
            const blob = await ipfs.dag.get(cid);
            return blob === null || blob === void 0 ? void 0 : blob.value;
        };
        const resolve = async (path) => {
            return (await ipfs.dag.resolve(path)).cid;
        };
        const pinStore = new pin_store_1.PinStore(stateStore, pinning, retrieve, resolve);
        await pinStore.open();
        return pinStore;
    }
}
exports.PinStoreFactory = PinStoreFactory;
//# sourceMappingURL=pin-store-factory.js.map