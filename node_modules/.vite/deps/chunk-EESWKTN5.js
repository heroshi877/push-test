import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/refractor/lang/nevod.js
var require_nevod = __commonJS({
  "node_modules/refractor/lang/nevod.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    module.exports = nevod;
    nevod.displayName = "nevod";
    nevod.aliases = [];
    function nevod(Prism) {
      Prism.languages.nevod = {
        comment: /\/\/.*|(?:\/\*[\s\S]*?(?:\*\/|$))/,
        string: {
          pattern: /(?:"(?:""|[^"])*"(?!")|'(?:''|[^'])*'(?!'))!?\*?/,
          greedy: true,
          inside: {
            "string-attrs": /!$|!\*$|\*$/
          }
        },
        namespace: {
          pattern: /(@namespace\s+)[a-zA-Z0-9\-.]+(?=\s*\{)/,
          lookbehind: true
        },
        pattern: {
          pattern: /(@pattern\s+)?#?[a-zA-Z0-9\-.]+(?:\s*\(\s*(?:~\s*)?[a-zA-Z0-9\-.]+\s*(?:,\s*(?:~\s*)?[a-zA-Z0-9\-.]*)*\))?(?=\s*=)/,
          lookbehind: true,
          inside: {
            "pattern-name": {
              pattern: /^#?[a-zA-Z0-9\-.]+/,
              alias: "class-name"
            },
            fields: {
              pattern: /\(.*\)/,
              inside: {
                "field-name": {
                  pattern: /[a-zA-Z0-9\-.]+/,
                  alias: "variable"
                },
                punctuation: /[,()]/,
                operator: {
                  pattern: /~/,
                  alias: "field-hidden-mark"
                }
              }
            }
          }
        },
        search: {
          pattern: /(@search\s+|#)[a-zA-Z0-9\-.]+(?:\.\*)?(?=\s*;)/,
          alias: "function",
          lookbehind: true
        },
        keyword: /@(?:having|inside|namespace|outside|pattern|require|search|where)\b/,
        "standard-pattern": {
          pattern: /\b(?:Alpha|AlphaNum|Any|Blank|End|LineBreak|Num|NumAlpha|Punct|Space|Start|Symbol|Word|WordBreak)\b(?:\([a-zA-Z0-9\-.,\s+]*\))?/,
          inside: {
            "standard-pattern-name": {
              pattern: /^[a-zA-Z0-9\-.]+/,
              alias: "builtin"
            },
            quantifier: {
              pattern: /\b\d+(?:\s*\+|\s*-\s*\d+)?(?!\w)/,
              alias: "number"
            },
            "standard-pattern-attr": {
              pattern: /[a-zA-Z0-9\-.]+/,
              alias: "builtin"
            },
            punctuation: /[,()]/
          }
        },
        quantifier: {
          pattern: /\b\d+(?:\s*\+|\s*-\s*\d+)?(?!\w)/,
          alias: "number"
        },
        operator: [
          {
            pattern: /=/,
            alias: "pattern-def"
          },
          {
            pattern: /&/,
            alias: "conjunction"
          },
          {
            pattern: /~/,
            alias: "exception"
          },
          {
            pattern: /\?/,
            alias: "optionality"
          },
          {
            pattern: /[[\]]/,
            alias: "repetition"
          },
          {
            pattern: /[{}]/,
            alias: "variation"
          },
          {
            pattern: /[+_]/,
            alias: "sequence"
          },
          {
            pattern: /\.{2,3}/,
            alias: "span"
          }
        ],
        "field-capture": [
          {
            pattern: /([a-zA-Z0-9\-.]+\s*\()\s*[a-zA-Z0-9\-.]+\s*:\s*[a-zA-Z0-9\-.]+(?:\s*,\s*[a-zA-Z0-9\-.]+\s*:\s*[a-zA-Z0-9\-.]+)*(?=\s*\))/,
            lookbehind: true,
            inside: {
              "field-name": {
                pattern: /[a-zA-Z0-9\-.]+/,
                alias: "variable"
              },
              colon: /:/
            }
          },
          {
            pattern: /[a-zA-Z0-9\-.]+\s*:/,
            inside: {
              "field-name": {
                pattern: /[a-zA-Z0-9\-.]+/,
                alias: "variable"
              },
              colon: /:/
            }
          }
        ],
        punctuation: /[:;,()]/,
        name: /[a-zA-Z0-9\-.]+/
      };
    }
  }
});

export {
  require_nevod
};
//# sourceMappingURL=chunk-EESWKTN5.js.map
