import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  require_joi_browser_min
} from "./chunk-JOA72Z5J.js";
import {
  parseEther
} from "./chunk-SJ43HXI4.js";
import {
  formatEther,
  fromHex,
  hexToBigInt,
  numberToHex
} from "./chunk-JXDAAIAP.js";
import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/@web3-onboard/common/dist/index.js
var import_dist19 = __toESM(require_dist());
var import_dist20 = __toESM(require_dist2());
var import_dist21 = __toESM(require_dist3());

// node_modules/@web3-onboard/common/dist/errors.js
var import_dist = __toESM(require_dist(), 1);
var import_dist2 = __toESM(require_dist2(), 1);
var import_dist3 = __toESM(require_dist3(), 1);
var ProviderRpcError = class extends Error {
  constructor(error) {
    super(error.message);
    this.message = error.message;
    this.code = error.code;
    this.data = error.data;
  }
};

// node_modules/@web3-onboard/common/dist/eip-1193.js
var import_dist4 = __toESM(require_dist(), 1);
var import_dist5 = __toESM(require_dist2(), 1);
var import_dist6 = __toESM(require_dist3(), 1);
var createEIP1193Provider = (provider, requestPatch) => {
  let baseRequest;
  if (provider.request) {
    baseRequest = provider.request.bind(provider);
  } else if (provider.sendAsync) {
    baseRequest = createRequest(provider);
  }
  const request = async ({ method, params }) => {
    const key = method;
    if (requestPatch && requestPatch[key] === null) {
      throw new ProviderRpcError({
        code: 4200,
        message: `The Provider does not support the requested method: ${method}`
      });
    }
    if (requestPatch && requestPatch[key]) {
      return requestPatch[key]({ baseRequest, params });
    } else if (baseRequest) {
      return baseRequest({ method, params });
    } else {
      throw new ProviderRpcError({
        code: 4200,
        message: `The Provider does not support the requested method: ${method}`
      });
    }
  };
  provider.request = request;
  return provider;
};
var createRequest = (provider) => ({ method, params }) => new Promise((resolve, reject) => {
  provider.sendAsync({
    id: 0,
    jsonrpc: "2.0",
    method,
    params
  }, (error, { result }) => {
    if (error) {
      reject(JSON.parse(error));
    } else {
      resolve(result == void 0 ? null : result);
    }
  });
});

// node_modules/@web3-onboard/common/dist/fonts.js
var import_dist7 = __toESM(require_dist(), 1);
var import_dist8 = __toESM(require_dist2(), 1);
var import_dist9 = __toESM(require_dist3(), 1);
var InterVar = `
@font-face {
  font-family: 'Inter';
  font-style:  normal;
  font-weight: 300 600;
  font-display: swap;
  src: url("https://rsms.me/inter/font-files/InterVariable.woff2") format("woff2-variations");
}
`;

// node_modules/@web3-onboard/common/dist/utils.js
var import_dist10 = __toESM(require_dist(), 1);
var import_dist11 = __toESM(require_dist2(), 1);
var import_dist12 = __toESM(require_dist3(), 1);
var isAddress = (address) => {
  return isAddress(address);
};
var weiHexToEth = (wei) => {
  const weiBigInt = hexToBigInt(wei);
  return formatEther(weiBigInt);
};
var weiToEth = (wei) => {
  if (!wei)
    return wei;
  const weiBigInt = fromHex(wei, "bigint");
  return formatEther(weiBigInt);
};
var ethToWeiBigInt = (eth) => {
  if (typeof eth !== "string" && typeof eth !== "number") {
    throw new Error("eth must be a string or number value");
  }
  const ethString = typeof eth === "number" ? eth.toString() : eth;
  return parseEther(ethString);
};
var bigIntToHex = (value) => {
  return numberToHex(value);
};
var createDownloadMessage = (walletLabel, download) => {
  if (!download)
    return `Please switch to ${walletLabel} to continue`;
  if (typeof download === "function") {
    return `Please <a href="#" onclick="${() => download()}">install</a> or enable to ${walletLabel} to continue`;
  } else {
    return `Please <a href="${download}" target="_blank">install</a> or enable to ${walletLabel} to continue`;
  }
};
var chainIdToViemImport = async (w3oChain) => {
  const viemChains = await import("./chains-ZBG7PWJV.js");
  const { id, label, token, publicRpcUrl, blockExplorerUrl, rpcUrl } = w3oChain;
  switch (id) {
    case "0x89": {
      const { polygon } = viemChains;
      return polygon;
    }
    case "0xa": {
      const { optimism } = viemChains;
      return optimism;
    }
    case "0xa4b1": {
      const { arbitrum } = viemChains;
      return arbitrum;
    }
    case "0x144": {
      const { zkSync } = viemChains;
      return zkSync;
    }
    case "0x38": {
      const { bsc } = viemChains;
      return bsc;
    }
    case "0x1": {
      const { mainnet } = viemChains;
      return mainnet;
    }
    case "0xaa36a7": {
      const { sepolia } = viemChains;
      return sepolia;
    }
    case "0xfa": {
      const { fantom } = viemChains;
      return fantom;
    }
    case "0xa86a": {
      const { avalanche } = viemChains;
      return avalanche;
    }
    case "0xa4ec": {
      const { celo } = viemChains;
      return celo;
    }
    case "0x2105": {
      const { base } = viemChains;
      return base;
    }
    case "0x14a33": {
      const { baseGoerli } = viemChains;
      return baseGoerli;
    }
    case "0x64": {
      const { gnosis } = viemChains;
      return gnosis;
    }
    case "0x63564C40": {
      const { harmonyOne } = viemChains;
      return harmonyOne;
    }
    case "0x27bc86aa": {
      const { degen } = viemChains;
      return degen;
    }
    default: {
      const { extractChain, defineChain } = await import("./_esm-AC4J447M.js");
      const nonNativeChain = extractChain({
        chains: Object.values(viemChains),
        id: fromHex(id, "number")
      });
      if (nonNativeChain)
        return nonNativeChain;
      return defineChain({
        id: fromHex(id, "number"),
        name: label !== null && label !== void 0 ? label : "",
        nativeCurrency: {
          decimals: 18,
          name: token !== null && token !== void 0 ? token : "",
          symbol: token !== null && token !== void 0 ? token : ""
        },
        rpcUrls: {
          default: {
            http: [rpcUrl !== null && rpcUrl !== void 0 ? rpcUrl : "", publicRpcUrl !== null && publicRpcUrl !== void 0 ? publicRpcUrl : ""]
          }
        },
        blockExplorers: {
          default: { name: "Explorer", url: blockExplorerUrl !== null && blockExplorerUrl !== void 0 ? blockExplorerUrl : "" }
        }
      });
    }
  }
};

// node_modules/@web3-onboard/common/dist/types.js
var import_dist13 = __toESM(require_dist(), 1);
var import_dist14 = __toESM(require_dist2(), 1);
var import_dist15 = __toESM(require_dist3(), 1);
var ProviderRpcErrorCode;
(function(ProviderRpcErrorCode2) {
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["ACCOUNT_ACCESS_REJECTED"] = 4001] = "ACCOUNT_ACCESS_REJECTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["ACCOUNT_ACCESS_ALREADY_REQUESTED"] = -32002] = "ACCOUNT_ACCESS_ALREADY_REQUESTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["UNAUTHORIZED"] = 4100] = "UNAUTHORIZED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["UNSUPPORTED_METHOD"] = 4200] = "UNSUPPORTED_METHOD";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["DISCONNECTED"] = 4900] = "DISCONNECTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["CHAIN_DISCONNECTED"] = 4901] = "CHAIN_DISCONNECTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["CHAIN_NOT_ADDED"] = 4902] = "CHAIN_NOT_ADDED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["DOES_NOT_EXIST"] = -32601] = "DOES_NOT_EXIST";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["UNRECOGNIZED_CHAIN_ID"] = -32603] = "UNRECOGNIZED_CHAIN_ID";
})(ProviderRpcErrorCode || (ProviderRpcErrorCode = {}));

// node_modules/@web3-onboard/common/dist/validation.js
var import_dist16 = __toESM(require_dist(), 1);
var import_dist17 = __toESM(require_dist2(), 1);
var import_dist18 = __toESM(require_dist3(), 1);
var import_joi = __toESM(require_joi_browser_min(), 1);
function validate(validator, data) {
  const result = validator.validate(data);
  return result.error ? result : null;
}
var chainIdValidation = import_joi.default.alternatives().try(import_joi.default.string().pattern(/^0x[0-9a-fA-F]+$/), import_joi.default.number().positive());
var chainNamespaceValidation = import_joi.default.string().valid("evm");
var secondaryTokenValidation = import_joi.default.object({
  address: import_joi.default.string().required(),
  icon: import_joi.default.string().optional()
});
var chainValidation = import_joi.default.object({
  namespace: chainNamespaceValidation,
  id: chainIdValidation.required(),
  rpcUrl: import_joi.default.string(),
  label: import_joi.default.string(),
  token: import_joi.default.string(),
  secondaryTokens: import_joi.default.array().max(5).items(secondaryTokenValidation).optional(),
  icon: import_joi.default.string(),
  color: import_joi.default.string(),
  publicRpcUrl: import_joi.default.string(),
  protectedRpcUrl: import_joi.default.string(),
  blockExplorerUrl: import_joi.default.string()
});

export {
  ProviderRpcError,
  createEIP1193Provider,
  InterVar,
  isAddress,
  weiHexToEth,
  weiToEth,
  ethToWeiBigInt,
  bigIntToHex,
  createDownloadMessage,
  chainIdToViemImport,
  ProviderRpcErrorCode,
  validate,
  chainIdValidation,
  chainNamespaceValidation,
  chainValidation
};
//# sourceMappingURL=chunk-FPCYIZOV.js.map
