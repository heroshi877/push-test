"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapDocument = void 0;
const bs58_1 = __importDefault(require("bs58"));
function wrapDocument(content, did) {
    const startDoc = {
        '@context': 'https://w3id.org/did/v1',
        id: did,
        publicKey: [],
        authentication: [],
        keyAgreement: []
    };
    const doc = Object.entries(content.publicKeys).reduce((diddoc, [keyName, keyValue]) => {
        if (keyValue.startsWith('z')) {
            const keyBuf = bs58_1.default.decode(keyValue.slice(1));
            if (keyBuf[0] === 0xe7) {
                diddoc.publicKey.push({
                    id: `${did}#${keyName}`,
                    type: 'Secp256k1VerificationKey2018',
                    controller: did,
                    publicKeyHex: keyBuf.slice(2).toString('hex')
                });
                diddoc.authentication.push({
                    type: 'Secp256k1SignatureAuthentication2018',
                    publicKey: `${did}#${keyName}`,
                });
            }
            else if (keyBuf[0] === 0xec) {
                diddoc.publicKey.push({
                    id: `${did}#${keyName}`,
                    type: 'Curve25519EncryptionPublicKey',
                    controller: did,
                    publicKeyBase64: keyBuf.slice(2).toString('base64')
                });
                diddoc.keyAgreement.push({
                    id: `${did}#${keyName}`,
                    type: 'X25519KeyAgreementKey2019',
                    controller: did,
                    publicKeyBase58: bs58_1.default.encode(keyBuf.slice(2))
                });
            }
        }
        else {
            if (keyName === 'signing') {
                diddoc.publicKey.push({
                    id: `${did}#${keyName}`,
                    type: 'Secp256k1VerificationKey2018',
                    controller: did,
                    publicKeyHex: keyValue
                });
                diddoc.authentication.push({
                    type: 'Secp256k1SignatureAuthentication2018',
                    publicKey: `${did}#${keyName}`,
                });
            }
            else if (keyName === 'encryption') {
                diddoc.publicKey.push({
                    id: `${did}#${keyName}`,
                    type: 'Curve25519EncryptionPublicKey',
                    controller: did,
                    publicKeyBase64: keyValue
                });
            }
        }
        return diddoc;
    }, startDoc);
    if (content.idx != null) {
        doc.service = [
            {
                id: `${did}#idx`,
                type: 'IdentityIndexRoot',
                serviceEndpoint: content.idx,
            },
        ];
    }
    return doc;
}
exports.wrapDocument = wrapDocument;
exports.default = {
    getResolver: (ceramic) => ({
        '3': async (did, parsed) => {
            const version = (parsed.query || '').replace('version-id', '?version');
            const doctype = await ceramic.loadDocument(`/ceramic/${parsed.id}${version}`);
            return wrapDocument(doctype.content, did);
        }
    })
};
//# sourceMappingURL=index.js.map