import CID from 'cids';
import { AnchorProof, AnchorService, CeramicApi } from "@ceramicnetwork/ceramic-common";
import { CeramicConfig } from "../../ceramic";
declare class Candidate {
    cid: CID;
    docId: string;
    did?: string;
    constructor(cid: CID, docId?: string, did?: string);
    get key(): string;
}
declare class InMemoryAnchorService extends AnchorService {
    private _config;
    private _ceramic;
    private _dispatcher;
    private readonly _anchorDelay;
    private readonly _anchorOnRequest;
    private _queue;
    private SAMPLE_ETH_TX_HASH;
    constructor(_config: CeramicConfig);
    anchor(): Promise<void>;
    _filter(): Promise<Candidate[]>;
    set ceramic(ceramic: CeramicApi);
    requestAnchor(docId: string, cid: CID): Promise<void>;
    _process(leaf: Candidate): Promise<void>;
    verifySignedRecord(record: any): Promise<string>;
    validateChainInclusion(proof: AnchorProof): Promise<void>;
}
export default InMemoryAnchorService;
//# sourceMappingURL=in-memory-anchor-service.d.ts.map