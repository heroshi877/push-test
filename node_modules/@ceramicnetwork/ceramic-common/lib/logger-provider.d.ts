import log, { Logger, MethodFactory } from 'loglevel';
interface Options {
    level?: string;
    format?: string;
    stacktrace?: {
        levels: ['trace', 'warn', 'error'];
        depth: 3;
        excess: 0;
    };
    component?: string;
}
interface PluginOptions {
    [index: string]: any;
}
declare type Plugin = (rootLogger: log.RootLogger, loggerOptions: Options, pluginOptions?: PluginOptions) => void;
declare class LoggerProvider {
    private static options;
    static init(opts?: Options): Options;
    static addPlugin(plugin: Plugin, loggerOptions: Options, pluginOptions?: PluginOptions): void;
    static _applyPrefix(): void;
    static _includeJsonPlugin(): void;
    static _toText(timestamp: any, level: any, name: any): string;
    static _stacktrace(): any[string];
    static _interpolate(array: any[]): string;
    static _constructorName(obj: any): string;
    static _safeStringify(obj: any, indent?: number): string;
}
export { LoggerProvider, Logger, log as RootLogger, MethodFactory as LoggerMethodFactory, Options as LoggerOptions, Plugin as LoggerPlugin, PluginOptions as LoggerPluginOptions, };
//# sourceMappingURL=logger-provider.d.ts.map