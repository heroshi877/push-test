import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/refractor/lang/brightscript.js
var require_brightscript = __commonJS({
  "node_modules/refractor/lang/brightscript.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    module.exports = brightscript;
    brightscript.displayName = "brightscript";
    brightscript.aliases = [];
    function brightscript(Prism) {
      Prism.languages.brightscript = {
        comment: /(?:\brem|').*/i,
        "directive-statement": {
          pattern: /(^[\t ]*)#(?:const|else(?:[\t ]+if)?|end[\t ]+if|error|if).*/im,
          lookbehind: true,
          alias: "property",
          inside: {
            "error-message": {
              pattern: /(^#error).+/,
              lookbehind: true
            },
            directive: {
              pattern: /^#(?:const|else(?:[\t ]+if)?|end[\t ]+if|error|if)/,
              alias: "keyword"
            },
            expression: {
              pattern: /[\s\S]+/,
              inside: null
              // see below
            }
          }
        },
        property: {
          pattern: /([\r\n{,][\t ]*)(?:(?!\d)\w+|"(?:[^"\r\n]|"")*"(?!"))(?=[ \t]*:)/,
          lookbehind: true,
          greedy: true
        },
        string: {
          pattern: /"(?:[^"\r\n]|"")*"(?!")/,
          greedy: true
        },
        "class-name": {
          pattern: /(\bAs[\t ]+)\w+/i,
          lookbehind: true
        },
        keyword: /\b(?:As|Dim|Each|Else|Elseif|End|Exit|For|Function|Goto|If|In|Print|Return|Step|Stop|Sub|Then|To|While)\b/i,
        boolean: /\b(?:false|true)\b/i,
        function: /\b(?!\d)\w+(?=[\t ]*\()/,
        number: /(?:\b\d+(?:\.\d+)?(?:[ed][+-]\d+)?|&h[a-f\d]+)\b[%&!#]?/i,
        operator: /--|\+\+|>>=?|<<=?|<>|[-+*/\\<>]=?|[:^=?]|\b(?:and|mod|not|or)\b/i,
        punctuation: /[.,;()[\]{}]/,
        constant: /\b(?:LINE_NUM)\b/i
      };
      Prism.languages.brightscript["directive-statement"].inside.expression.inside = Prism.languages.brightscript;
    }
  }
});

export {
  require_brightscript
};
//# sourceMappingURL=chunk-PZ2CPTYQ.js.map
