import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/refractor/lang/v.js
var require_v = __commonJS({
  "node_modules/refractor/lang/v.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    module.exports = v;
    v.displayName = "v";
    v.aliases = [];
    function v(Prism) {
      ;
      (function(Prism2) {
        var interpolationExpr = {
          pattern: /[\s\S]+/,
          inside: null
        };
        Prism2.languages.v = Prism2.languages.extend("clike", {
          string: {
            pattern: /r?(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
            alias: "quoted-string",
            greedy: true,
            inside: {
              interpolation: {
                pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:\{[^{}]*\}|\w+(?:\.\w+(?:\([^\(\)]*\))?|\[[^\[\]]+\])*)/,
                lookbehind: true,
                inside: {
                  "interpolation-variable": {
                    pattern: /^\$\w[\s\S]*$/,
                    alias: "variable"
                  },
                  "interpolation-punctuation": {
                    pattern: /^\$\{|\}$/,
                    alias: "punctuation"
                  },
                  "interpolation-expression": interpolationExpr
                }
              }
            }
          },
          "class-name": {
            pattern: /(\b(?:enum|interface|struct|type)\s+)(?:C\.)?\w+/,
            lookbehind: true
          },
          keyword: /(?:\b(?:__global|as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\$(?:else|for|if)|#(?:flag|include))\b/,
          number: /\b(?:0x[a-f\d]+(?:_[a-f\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?)\b/i,
          operator: /~|\?|[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\.?/,
          builtin: /\b(?:any(?:_float|_int)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|64|128|nt)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\b/
        });
        interpolationExpr.inside = Prism2.languages.v;
        Prism2.languages.insertBefore("v", "string", {
          char: {
            pattern: /`(?:\\`|\\?[^`]{1,2})`/,
            // using {1,2} instead of `u` flag for compatibility
            alias: "rune"
          }
        });
        Prism2.languages.insertBefore("v", "operator", {
          attribute: {
            pattern: /(^[\t ]*)\[(?:deprecated|direct_array_access|flag|inline|live|ref_only|typedef|unsafe_fn|windows_stdcall)\]/m,
            lookbehind: true,
            alias: "annotation",
            inside: {
              punctuation: /[\[\]]/,
              keyword: /\w+/
            }
          },
          generic: {
            pattern: /<\w+>(?=\s*[\)\{])/,
            inside: {
              punctuation: /[<>]/,
              "class-name": /\w+/
            }
          }
        });
        Prism2.languages.insertBefore("v", "function", {
          "generic-function": {
            // e.g. foo<T>( ...
            pattern: /\b\w+\s*<\w+>(?=\()/,
            inside: {
              function: /^\w+/,
              generic: {
                pattern: /<\w+>/,
                inside: Prism2.languages.v.generic.inside
              }
            }
          }
        });
      })(Prism);
    }
  }
});

export {
  require_v
};
//# sourceMappingURL=chunk-PRIR2PBY.js.map
