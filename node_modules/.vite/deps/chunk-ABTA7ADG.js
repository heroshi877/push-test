import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/@web3-onboard/coinbase/dist/index.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
function coinbaseWallet({ supportedWalletType = "all", darkMode = false, enableMobileWalletLink = false, reloadOnDisconnect = true } = {}) {
  return () => {
    return {
      label: "Coinbase Wallet",
      getIcon: async () => (await import("./icon-4KVYQA7B.js")).default,
      getInterface: async ({ chains, appMetadata }) => {
        if (enableMobileWalletLink || reloadOnDisconnect || darkMode) {
          console.warn("darkMode, enableMobileWalletLink and reloadOnDisconnect init props are deprecated after version 2.2.7 of @web3-onboard/coinbase");
        }
        const { name, icon } = appMetadata || {};
        const { default: CoinbaseWalletSDK } = await import("./dist-OCZZK3ZM.js");
        const CoinbaseWalletSDKConstructor = CoinbaseWalletSDK.default ? CoinbaseWalletSDK.default : CoinbaseWalletSDK;
        const { isHex, toHex, createEIP1193Provider, fromHex } = await import("./dist-NN3PWSNU.js");
        const base64 = window.btoa(icon || "");
        const appLogoUrl = `data:image/svg+xml;base64,${base64}`;
        const appChainIds = chains.map(({ id }) => fromHex(id, "number"));
        const instance = new CoinbaseWalletSDKConstructor({
          appName: name || "",
          appLogoUrl,
          appChainIds
        });
        const coinbaseWalletProvider = instance.makeWeb3Provider({
          options: supportedWalletType
        });
        const on = coinbaseWalletProvider.on.bind(coinbaseWalletProvider);
        coinbaseWalletProvider.on = (event, listener) => {
          on(event, (val) => {
            if (event === "chainChanged") {
              let hexVal;
              if (isHex(val)) {
                hexVal = val;
              } else {
                hexVal = toHex(val);
              }
              listener(hexVal);
              return;
            }
            listener(val);
          });
          return coinbaseWalletProvider;
        };
        const provider = createEIP1193Provider(coinbaseWalletProvider);
        provider.removeListener = (event, func) => {
        };
        return {
          provider,
          instance
        };
      }
    };
  };
}
var dist_default = coinbaseWallet;

export {
  dist_default
};
//# sourceMappingURL=chunk-ABTA7ADG.js.map
