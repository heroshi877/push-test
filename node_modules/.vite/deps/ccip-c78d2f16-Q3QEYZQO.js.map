{
  "version": 3,
  "sources": ["../../@pushprotocol/uiweb/node_modules/@web3-onboard/core/node_modules/viem/_esm/errors/ccip.js", "../../@pushprotocol/uiweb/node_modules/@web3-onboard/core/node_modules/viem/_esm/utils/address/isAddressEqual.js", "../../@pushprotocol/uiweb/node_modules/@web3-onboard/core/node_modules/viem/_esm/utils/ccip.js"],
  "sourcesContent": ["import { stringify } from '../utils/stringify.js';\nimport { BaseError } from './base.js';\nimport { getUrl } from './utils.js';\nexport class OffchainLookupError extends BaseError {\n    constructor({ callbackSelector, cause, data, extraData, sender, urls, }) {\n        super(cause.shortMessage ||\n            'An error occurred while fetching for an offchain result.', {\n            cause,\n            metaMessages: [\n                ...(cause.metaMessages || []),\n                cause.metaMessages?.length ? '' : [],\n                'Offchain Gateway Call:',\n                urls && [\n                    '  Gateway URL(s):',\n                    ...urls.map((url) => `    ${getUrl(url)}`),\n                ],\n                `  Sender: ${sender}`,\n                `  Data: ${data}`,\n                `  Callback selector: ${callbackSelector}`,\n                `  Extra data: ${extraData}`,\n            ].flat(),\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'OffchainLookupError'\n        });\n    }\n}\nexport class OffchainLookupResponseMalformedError extends BaseError {\n    constructor({ result, url }) {\n        super('Offchain gateway response is malformed. Response data must be a hex value.', {\n            metaMessages: [\n                `Gateway URL: ${getUrl(url)}`,\n                `Response: ${stringify(result)}`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'OffchainLookupResponseMalformedError'\n        });\n    }\n}\nexport class OffchainLookupSenderMismatchError extends BaseError {\n    constructor({ sender, to }) {\n        super('Reverted sender address does not match target contract address (`to`).', {\n            metaMessages: [\n                `Contract address: ${to}`,\n                `OffchainLookup sender address: ${sender}`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'OffchainLookupSenderMismatchError'\n        });\n    }\n}\n//# sourceMappingURL=ccip.js.map", "import { InvalidAddressError, } from '../../errors/address.js';\nimport { isAddress } from './isAddress.js';\nexport function isAddressEqual(a, b) {\n    if (!isAddress(a, { strict: false }))\n        throw new InvalidAddressError({ address: a });\n    if (!isAddress(b, { strict: false }))\n        throw new InvalidAddressError({ address: b });\n    return a.toLowerCase() === b.toLowerCase();\n}\n//# sourceMappingURL=isAddressEqual.js.map", "import { call } from '../actions/public/call.js';\nimport { OffchainLookupError, OffchainLookupResponseMalformedError, OffchainLookupSenderMismatchError, } from '../errors/ccip.js';\nimport { HttpRequestError } from '../errors/request.js';\nimport { decodeErrorResult } from './abi/decodeErrorResult.js';\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js';\nimport { isAddressEqual } from './address/isAddressEqual.js';\nimport { concat } from './data/concat.js';\nimport { isHex } from './data/isHex.js';\nimport { stringify } from './stringify.js';\nexport const offchainLookupSignature = '0x556f1830';\nexport const offchainLookupAbiItem = {\n    name: 'OffchainLookup',\n    type: 'error',\n    inputs: [\n        {\n            name: 'sender',\n            type: 'address',\n        },\n        {\n            name: 'urls',\n            type: 'string[]',\n        },\n        {\n            name: 'callData',\n            type: 'bytes',\n        },\n        {\n            name: 'callbackFunction',\n            type: 'bytes4',\n        },\n        {\n            name: 'extraData',\n            type: 'bytes',\n        },\n    ],\n};\nexport async function offchainLookup(client, { blockNumber, blockTag, data, to, }) {\n    const { args } = decodeErrorResult({\n        data,\n        abi: [offchainLookupAbiItem],\n    });\n    const [sender, urls, callData, callbackSelector, extraData] = args;\n    const { ccipRead } = client;\n    const ccipRequest_ = ccipRead && typeof ccipRead?.request === 'function'\n        ? ccipRead.request\n        : ccipRequest;\n    try {\n        if (!isAddressEqual(to, sender))\n            throw new OffchainLookupSenderMismatchError({ sender, to });\n        const result = await ccipRequest_({ data: callData, sender, urls });\n        const { data: data_ } = await call(client, {\n            blockNumber,\n            blockTag,\n            data: concat([\n                callbackSelector,\n                encodeAbiParameters([{ type: 'bytes' }, { type: 'bytes' }], [result, extraData]),\n            ]),\n            to,\n        });\n        return data_;\n    }\n    catch (err) {\n        throw new OffchainLookupError({\n            callbackSelector,\n            cause: err,\n            data,\n            extraData,\n            sender,\n            urls,\n        });\n    }\n}\nexport async function ccipRequest({ data, sender, urls, }) {\n    let error = new Error('An unknown error occurred.');\n    for (let i = 0; i < urls.length; i++) {\n        const url = urls[i];\n        const method = url.includes('{data}') ? 'GET' : 'POST';\n        const body = method === 'POST' ? { data, sender } : undefined;\n        try {\n            const response = await fetch(url.replace('{sender}', sender).replace('{data}', data), {\n                body: JSON.stringify(body),\n                method,\n            });\n            let result;\n            if (response.headers.get('Content-Type')?.startsWith('application/json')) {\n                result = (await response.json()).data;\n            }\n            else {\n                result = (await response.text());\n            }\n            if (!response.ok) {\n                error = new HttpRequestError({\n                    body,\n                    details: result?.error\n                        ? stringify(result.error)\n                        : response.statusText,\n                    headers: response.headers,\n                    status: response.status,\n                    url,\n                });\n                continue;\n            }\n            if (!isHex(result)) {\n                error = new OffchainLookupResponseMalformedError({\n                    result,\n                    url,\n                });\n                continue;\n            }\n            return result;\n        }\n        catch (err) {\n            error = new HttpRequestError({\n                body,\n                details: err.message,\n                url,\n            });\n        }\n    }\n    throw error;\n}\n//# sourceMappingURL=ccip.js.map"],
  "mappings": "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",
  "names": []
}
