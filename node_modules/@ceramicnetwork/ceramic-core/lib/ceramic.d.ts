import Dispatcher from './dispatcher';
import Document from './document';
import DocID from '@ceramicnetwork/docid';
import { CeramicApi, DIDProvider, PinApi } from "@ceramicnetwork/ceramic-common";
import { Doctype, DoctypeHandler, DocOpts, Context, DocParams, LoggerPlugin, LoggerPluginOptions } from "@ceramicnetwork/ceramic-common";
import { Resolver } from "did-resolver";
import { DID } from 'dids';
import { PinStore } from "./store/pin-store";
import { IPFSAPI as IpfsApi } from 'ipfs-core/dist/src/components';
export interface CeramicConfig {
    ethereumRpcUrl?: string;
    anchorServiceUrl?: string;
    stateStorePath?: string;
    didResolver?: Resolver;
    didProvider?: DIDProvider;
    validateDocs?: boolean;
    pinning?: string[];
    logLevel?: string;
    logToFiles?: boolean;
    logToFilesPlugin?: {
        plugin: LoggerPlugin;
        options: LoggerPluginOptions;
    };
    gateway?: boolean;
    topic?: string;
    [index: string]: any;
}
declare class Ceramic implements CeramicApi {
    dispatcher: Dispatcher;
    pinStore: PinStore;
    private _validateDocs;
    private readonly _docmap;
    private readonly _doctypeHandlers;
    readonly pin: PinApi;
    readonly context: Context;
    constructor(dispatcher: Dispatcher, pinStore: PinStore, context: Context, _validateDocs?: boolean);
    get ipfs(): IpfsApi;
    get did(): DID | undefined;
    _initPinApi(): PinApi;
    static create(ipfs: IpfsApi, config?: CeramicConfig): Promise<Ceramic>;
    findHandler<T extends DoctypeHandler<Doctype>>(genesisRecord: any): T;
    setDIDProvider(provider: DIDProvider): Promise<void>;
    addDoctypeHandler<T extends Doctype>(doctypeHandler: DoctypeHandler<T>): void;
    findDoctypeHandler<T extends Doctype>(doctype: string): DoctypeHandler<T>;
    applyRecord<T extends Doctype>(docId: DocID | string, record: Record<string, unknown>, opts?: DocOpts): Promise<T>;
    getDocFromMap(docId: DocID): Document;
    createDocument<T extends Doctype>(doctype: string, params: DocParams, opts?: DocOpts): Promise<T>;
    _createDoc(doctype: string, params: DocParams, opts?: DocOpts): Promise<Document>;
    createDocumentFromGenesis<T extends Doctype>(genesis: any, opts?: DocOpts): Promise<T>;
    _createDocFromGenesis(genesis: any, opts?: DocOpts): Promise<Document>;
    loadDocument<T extends Doctype>(docId: DocID | string, opts?: DocOpts): Promise<T>;
    loadDocumentRecords(docId: DocID | string): Promise<Array<Record<string, any>>>;
    _loadDoc(docId: DocID | string, opts?: DocOpts): Promise<Document>;
    listVersions(docId: DocID | string): Promise<string[]>;
    close(): Promise<void>;
}
export default Ceramic;
//# sourceMappingURL=ceramic.d.ts.map