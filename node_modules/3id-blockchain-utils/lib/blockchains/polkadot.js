"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const caip_1 = require("caip");
const utils_1 = require("../utils");
const util_crypto_1 = require("@polkadot/util-crypto");
const uint8arrays = __importStar(require("uint8arrays"));
const namespace = 'polkadot';
const stringHex = (str) => `0x${uint8arrays.toString(uint8arrays.fromString(str), 'base16')}`;
function createLink(did, account, signer, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { message, timestamp } = utils_1.getConsentMessage(did, !(opts === null || opts === void 0 ? void 0 : opts.skipTimestamp));
        const linkMessageHex = stringHex(message);
        const res = yield signer.signRaw({ address: account.address, data: linkMessageHex });
        const proof = {
            version: 2,
            type: 'eoa',
            message: linkMessageHex,
            signature: res.signature,
            account: account.toString()
        };
        if (!(opts === null || opts === void 0 ? void 0 : opts.skipTimestamp))
            proof.timestamp = timestamp;
        return proof;
    });
}
function authenticate(message, account, signer) {
    return __awaiter(this, void 0, void 0, function* () {
        throw new Error('authenticate: polkadot authentication not yet supported');
    });
}
function validateLink(proof) {
    return __awaiter(this, void 0, void 0, function* () {
        const address = new caip_1.AccountID(proof.account).address;
        const res = yield util_crypto_1.signatureVerify(proof.message, proof.signature, address);
        return res.isValid ? proof : null;
    });
}
const Handler = {
    namespace,
    authenticate,
    validateLink,
    createLink
};
exports.default = Handler;
//# sourceMappingURL=polkadot.js.map