import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/refractor/lang/pascal.js
var require_pascal = __commonJS({
  "node_modules/refractor/lang/pascal.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    module.exports = pascal;
    pascal.displayName = "pascal";
    pascal.aliases = ["objectpascal"];
    function pascal(Prism) {
      Prism.languages.pascal = {
        directive: {
          pattern: /\{\$[\s\S]*?\}/,
          greedy: true,
          alias: ["marco", "property"]
        },
        comment: {
          pattern: /\(\*[\s\S]*?\*\)|\{[\s\S]*?\}|\/\/.*/,
          greedy: true
        },
        string: {
          pattern: /(?:'(?:''|[^'\r\n])*'(?!')|#[&$%]?[a-f\d]+)+|\^[a-z]/i,
          greedy: true
        },
        asm: {
          pattern: /(\basm\b)[\s\S]+?(?=\bend\s*[;[])/i,
          lookbehind: true,
          greedy: true,
          inside: null
          // see below
        },
        keyword: [
          {
            // Turbo Pascal
            pattern: /(^|[^&])\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\b/i,
            lookbehind: true
          },
          {
            // Free Pascal
            pattern: /(^|[^&])\b(?:dispose|exit|false|new|true)\b/i,
            lookbehind: true
          },
          {
            // Object Pascal
            pattern: /(^|[^&])\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\b/i,
            lookbehind: true
          },
          {
            // Modifiers
            pattern: /(^|[^&])\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\b/i,
            lookbehind: true
          }
        ],
        number: [
          // Hexadecimal, octal and binary
          /(?:[&%]\d+|\$[a-f\d]+)/i,
          // Decimal
          /\b\d+(?:\.\d+)?(?:e[+-]?\d+)?/i
        ],
        operator: [
          /\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=]/,
          {
            pattern: /(^|[^&])\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\b/,
            lookbehind: true
          }
        ],
        punctuation: /\(\.|\.\)|[()\[\]:;,.]/
      };
      Prism.languages.pascal.asm.inside = Prism.languages.extend("pascal", {
        asm: void 0,
        keyword: void 0,
        operator: void 0
      });
      Prism.languages.objectpascal = Prism.languages.pascal;
    }
  }
});

export {
  require_pascal
};
//# sourceMappingURL=chunk-32TBVIMU.js.map
