"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateLink = exports.createLink = exports.authenticate = void 0;
const caip_1 = require("caip");
const eosio_signing_tools_1 = require("@smontero/eosio-signing-tools");
const utils_1 = require("../utils");
const js_sha256_1 = require("js-sha256");
const maxWordLength = 12;
const namespace = 'eosio';
function normalizeAccountId(account) {
    account.address = account.address.toLowerCase();
    return account;
}
function toCAIPChainId(chainId) {
    return chainId.substr(0, 32);
}
function sanitize(str, size) {
    return str.replace(/\s/g, ' ').replace(new RegExp(`(\\S{${size}})`, 'g'), '$1 ');
}
function toPayload(message, accountID) {
    const { address, chainId } = accountID;
    const payload = `${message} [For: ${address} on chain: ${chainId}]`;
    return sanitize(payload, maxWordLength);
}
function toSignedPayload(message, accountID, provider) {
    return __awaiter(this, void 0, void 0, function* () {
        accountID = normalizeAccountId(accountID);
        const { chainId: { reference: requestedChainId }, address } = accountID;
        const accountName = yield provider.getAccountName();
        const chainId = toCAIPChainId(yield provider.getChainId());
        if (chainId !== requestedChainId) {
            throw new Error(`Provider returned a different chainId than requested [returned: ${chainId}, requested: ${requestedChainId}]`);
        }
        if (accountName !== address) {
            throw new Error(`Provider returned a different account than requested [returned: ${accountName}, requested: ${address}]`);
        }
        const payload = toPayload(message, accountID);
        const [key] = yield provider.getKeys();
        return provider.signArbitrary(key, payload);
    });
}
function authenticate(message, accountID, provider) {
    return __awaiter(this, void 0, void 0, function* () {
        const signedPayload = yield toSignedPayload(message, accountID, provider);
        return `0x${js_sha256_1.sha256(signedPayload)}`;
    });
}
exports.authenticate = authenticate;
function createLink(did, accountID, provider, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const consentMessage = utils_1.getConsentMessage(did, !opts.skipTimestamp);
        const signedPayload = yield toSignedPayload(consentMessage.message, accountID, provider);
        const proof = {
            version: 1,
            type: 'eosio',
            message: consentMessage.message,
            signature: signedPayload,
            account: accountID.toString()
        };
        if (!opts.skipTimestamp)
            proof.timestamp = consentMessage.timestamp;
        return proof;
    });
}
exports.createLink = createLink;
function validateLink(proof) {
    return __awaiter(this, void 0, void 0, function* () {
        const { message, signature, account } = proof;
        const accountID = new caip_1.AccountID(account);
        const { address, chainId } = accountID;
        try {
            const success = yield eosio_signing_tools_1.SigningTools.verifySignature({
                chainId: chainId.reference,
                account: address,
                signature,
                data: toPayload(message, accountID)
            });
            return success ? proof : null;
        }
        catch (error) {
            console.warn(error);
            return null;
        }
    });
}
exports.validateLink = validateLink;
const Handler = {
    namespace,
    authenticate,
    validateLink,
    createLink
};
exports.default = Handler;
//# sourceMappingURL=eosio.js.map