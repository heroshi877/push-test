import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  DescendantProvider,
  composeEventHandlers,
  createContext2,
  createDescendantContext,
  getComputedStyle,
  getOwnerDocument,
  isBoolean,
  isFunction,
  makeId,
  noop,
  useComposedRefs,
  useControlledState,
  useDescendant,
  useDescendantKeyDown,
  useDescendants,
  useDescendantsInit,
  useId,
  useIsomorphicLayoutEffect,
  useStatefulRefValue
} from "./chunk-DQIKGKRV.js";
import {
  require_react
} from "./chunk-DTW63AUM.js";
import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/@reach/tabs/dist/reach-tabs.mjs
var import_dist = __toESM(require_dist(), 1);
var import_dist2 = __toESM(require_dist2(), 1);
var import_dist3 = __toESM(require_dist3(), 1);
var React = __toESM(require_react(), 1);
var TabsDescendantsContext = createDescendantContext("TabsDescendantsContext");
var TabPanelDescendantsContext = createDescendantContext("TabPanelDescendantsContext");
var [TabsProvider, useTabsCtx] = createContext2("Tabs");
var TabsKeyboardActivation = ((TabsKeyboardActivation2) => {
  TabsKeyboardActivation2["Auto"] = "auto";
  TabsKeyboardActivation2["Manual"] = "manual";
  return TabsKeyboardActivation2;
})(TabsKeyboardActivation || {});
var TabsOrientation = ((TabsOrientation2) => {
  TabsOrientation2["Horizontal"] = "horizontal";
  TabsOrientation2["Vertical"] = "vertical";
  return TabsOrientation2;
})(TabsOrientation || {});
var Tabs = React.forwardRef(({
  as: Comp = "div",
  children,
  defaultIndex,
  orientation = "horizontal",
  index: controlledIndex = void 0,
  keyboardActivation = "auto",
  onChange,
  readOnly = false,
  ...props
}, ref) => {
  let { current: isControlled } = React.useRef(controlledIndex !== void 0);
  let id = useId(props.id || "tabs");
  let selectedPanelRef = React.useRef(null);
  let isRTL = React.useRef(false);
  let [selectedIndex, setSelectedIndex] = useControlledState({
    controlledValue: controlledIndex,
    defaultValue: defaultIndex ?? 0,
    calledFrom: "Tabs"
  });
  let [focusedIndex, setFocusedIndex] = React.useState(-1);
  let [tabs, setTabs] = useDescendantsInit();
  let onFocusPanel = React.useCallback(() => {
    if (selectedPanelRef.current && isFunction(selectedPanelRef.current.focus)) {
      selectedPanelRef.current.focus();
    }
  }, []);
  let onSelectTab = React.useCallback((index) => {
    onChange && onChange(index);
    setSelectedIndex(index);
  }, [onChange, setSelectedIndex]);
  let onSelectTabWithKeyboard = React.useCallback((index) => {
    let tabElement = tabs[index]?.element;
    let doc = getOwnerDocument(tabElement);
    if (keyboardActivation === "auto") {
      onChange && onChange(index);
      setSelectedIndex(index);
    }
    if (tabElement && tabElement !== doc.activeElement && isFunction(tabElement.focus)) {
      tabElement.focus();
    }
  }, [keyboardActivation, onChange, setSelectedIndex, tabs]);
  return React.createElement(DescendantProvider, {
    context: TabsDescendantsContext,
    items: tabs,
    set: setTabs
  }, React.createElement(TabsProvider, {
    focusedIndex,
    id,
    isControlled,
    isRTL,
    keyboardActivation,
    onFocusPanel,
    onSelectTab: readOnly ? noop : onSelectTab,
    onSelectTabWithKeyboard: readOnly ? noop : onSelectTabWithKeyboard,
    orientation,
    selectedIndex,
    selectedPanelRef,
    setFocusedIndex,
    setSelectedIndex
  }, React.createElement(Comp, {
    ...props,
    ref,
    "data-reach-tabs": "",
    "data-orientation": orientation,
    id: props.id
  }, isFunction(children) ? children({ focusedIndex, id, selectedIndex }) : children)));
});
Tabs.displayName = "Tabs";
var TabListImpl = React.forwardRef(({ children, as: Comp = "div", onKeyDown, ...props }, forwardedRef) => {
  let {
    focusedIndex,
    isControlled,
    isRTL,
    keyboardActivation,
    onSelectTabWithKeyboard,
    orientation,
    selectedIndex,
    setSelectedIndex
  } = useTabsCtx("TabList");
  let tabs = useDescendants(TabsDescendantsContext);
  let ownRef = React.useRef(null);
  let ref = useComposedRefs(forwardedRef, ownRef);
  React.useEffect(() => {
    if (ownRef.current && (ownRef.current.ownerDocument && ownRef.current.ownerDocument.dir === "rtl" || getComputedStyle(ownRef.current, "direction") === "rtl")) {
      isRTL.current = true;
    }
  }, [isRTL]);
  let handleKeyDown = composeEventHandlers(onKeyDown, useDescendantKeyDown(TabsDescendantsContext, {
    currentIndex: keyboardActivation === "manual" ? focusedIndex : selectedIndex,
    orientation,
    rotate: true,
    callback: onSelectTabWithKeyboard,
    filter: (tab) => !tab.disabled,
    rtl: isRTL.current
  }));
  useIsomorphicLayoutEffect(() => {
    if (!isControlled && boolOrBoolString(tabs[selectedIndex]?.disabled)) {
      let next = tabs.find((tab) => !tab.disabled);
      if (next) {
        setSelectedIndex(next.index);
      }
    }
  }, [tabs, isControlled, selectedIndex, setSelectedIndex]);
  return React.createElement(Comp, {
    role: "tablist",
    "aria-orientation": orientation,
    ...props,
    "data-reach-tab-list": "",
    ref,
    onKeyDown: handleKeyDown
  }, children);
});
TabListImpl.displayName = "TabList";
var TabList = React.memo(TabListImpl);
TabList.displayName = "TabList";
var Tab = React.forwardRef(({
  isSelected: _,
  children,
  as: Comp = "button",
  index: indexProp,
  disabled,
  onBlur,
  onFocus,
  ...props
}, forwardedRef) => {
  let {
    id: tabsId,
    onSelectTab,
    orientation,
    selectedIndex,
    setFocusedIndex
  } = useTabsCtx("Tab");
  let ownRef = React.useRef(null);
  let [element, handleRefSet] = useStatefulRefValue(ownRef, null);
  let ref = useComposedRefs(forwardedRef, handleRefSet);
  let descendant = React.useMemo(() => {
    return {
      element,
      disabled: !!disabled
    };
  }, [disabled, element]);
  let index = useDescendant(descendant, TabsDescendantsContext, indexProp);
  let htmlType = Comp === "button" && props.type == null ? "button" : props.type;
  let isSelected = index === selectedIndex;
  function onSelect() {
    onSelectTab(index);
  }
  return React.createElement(Comp, {
    "aria-controls": makeId(tabsId, "panel", index),
    "aria-disabled": disabled,
    "aria-selected": isSelected,
    role: "tab",
    tabIndex: isSelected ? 0 : -1,
    ...props,
    ref,
    "data-reach-tab": "",
    "data-orientation": orientation,
    "data-selected": isSelected ? "" : void 0,
    disabled,
    id: makeId(tabsId, "tab", index),
    onClick: onSelect,
    onFocus: composeEventHandlers(onFocus, () => {
      setFocusedIndex(index);
    }),
    onBlur: composeEventHandlers(onBlur, () => {
      setFocusedIndex(-1);
    }),
    type: htmlType
  }, children);
});
Tab.displayName = "Tab";
var TabPanelsImpl = React.forwardRef(({ children, as: Comp = "div", ...props }, forwardedRef) => {
  let ownRef = React.useRef();
  let ref = useComposedRefs(ownRef, forwardedRef);
  let [tabPanels, setTabPanels] = useDescendantsInit();
  return React.createElement(DescendantProvider, {
    context: TabPanelDescendantsContext,
    items: tabPanels,
    set: setTabPanels
  }, React.createElement(Comp, {
    ...props,
    ref,
    "data-reach-tab-panels": ""
  }, children));
});
TabPanelsImpl.displayName = "TabPanels";
var TabPanels = React.memo(TabPanelsImpl);
TabPanels.displayName = "TabPanels";
var TabPanel = React.forwardRef(({
  children,
  "aria-label": ariaLabel,
  as: Comp = "div",
  index: indexProp,
  ...props
}, forwardedRef) => {
  let {
    selectedPanelRef,
    selectedIndex,
    id: tabsId
  } = useTabsCtx("TabPanel");
  let ownRef = React.useRef(null);
  let [element, handleRefSet] = useStatefulRefValue(ownRef, null);
  let descendant = React.useMemo(() => ({ element }), [element]);
  let index = useDescendant(descendant, TabPanelDescendantsContext, indexProp);
  let id = makeId(tabsId, "panel", index);
  let isSelected = index === selectedIndex;
  let readyToHide = React.useRef(false);
  let hidden = readyToHide.current ? !isSelected : false;
  React.useEffect(() => {
    readyToHide.current = true;
  }, []);
  let ref = useComposedRefs(forwardedRef, handleRefSet, isSelected ? selectedPanelRef : null);
  return React.createElement(Comp, {
    "aria-labelledby": makeId(tabsId, "tab", index),
    hidden,
    role: "tabpanel",
    tabIndex: isSelected ? 0 : -1,
    ...props,
    ref,
    "data-reach-tab-panel": "",
    id
  }, children);
});
TabPanel.displayName = "TabPanel";
function useTabsContext() {
  let { focusedIndex, id, selectedIndex } = useTabsCtx("useTabsContext");
  return React.useMemo(() => ({
    focusedIndex,
    id,
    selectedIndex
  }), [focusedIndex, id, selectedIndex]);
}
function boolOrBoolString(value) {
  return value === "true" ? true : isBoolean(value) ? value : false;
}
export {
  Tab,
  TabList,
  TabPanel,
  TabPanels,
  Tabs,
  TabsKeyboardActivation,
  TabsOrientation,
  useTabsContext
};
/*! Bundled license information:

@reach/tabs/dist/reach-tabs.mjs:
  (**
    * @reach/tabs v0.18.0
    *
    * Copyright (c) 2018-2022, React Training LLC
    *
    * This source code is licensed under the MIT license found in the
    * LICENSE.md file in the root directory of this source tree.
    *
    * @license MIT
    *)
*/
//# sourceMappingURL=@reach_tabs.js.map
