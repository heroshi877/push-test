import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-O6J7OYVY.js";

// node_modules/highlight.js/lib/languages/dts.js
var require_dts = __commonJS({
  "node_modules/highlight.js/lib/languages/dts.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    function dts(hljs) {
      const STRINGS = {
        className: "string",
        variants: [
          hljs.inherit(hljs.QUOTE_STRING_MODE, {
            begin: '((u8?|U)|L)?"'
          }),
          {
            begin: '(u8?|U)?R"',
            end: '"',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: "'\\\\?.",
            end: "'",
            illegal: "."
          }
        ]
      };
      const NUMBERS = {
        className: "number",
        variants: [
          {
            begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)"
          },
          {
            begin: hljs.C_NUMBER_RE
          }
        ],
        relevance: 0
      };
      const PREPROCESSOR = {
        className: "meta",
        begin: "#",
        end: "$",
        keywords: {
          "meta-keyword": "if else elif endif define undef ifdef ifndef"
        },
        contains: [
          {
            begin: /\\\n/,
            relevance: 0
          },
          {
            beginKeywords: "include",
            end: "$",
            keywords: {
              "meta-keyword": "include"
            },
            contains: [
              hljs.inherit(STRINGS, {
                className: "meta-string"
              }),
              {
                className: "meta-string",
                begin: "<",
                end: ">",
                illegal: "\\n"
              }
            ]
          },
          STRINGS,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      };
      const DTS_REFERENCE = {
        className: "variable",
        begin: /&[a-z\d_]*\b/
      };
      const DTS_KEYWORD = {
        className: "meta-keyword",
        begin: "/[a-z][a-z\\d-]*/"
      };
      const DTS_LABEL = {
        className: "symbol",
        begin: "^\\s*[a-zA-Z_][a-zA-Z\\d_]*:"
      };
      const DTS_CELL_PROPERTY = {
        className: "params",
        begin: "<",
        end: ">",
        contains: [
          NUMBERS,
          DTS_REFERENCE
        ]
      };
      const DTS_NODE = {
        className: "class",
        begin: /[a-zA-Z_][a-zA-Z\d_@]*\s\{/,
        end: /[{;=]/,
        returnBegin: true,
        excludeEnd: true
      };
      const DTS_ROOT_NODE = {
        className: "class",
        begin: "/\\s*\\{",
        end: /\};/,
        relevance: 10,
        contains: [
          DTS_REFERENCE,
          DTS_KEYWORD,
          DTS_LABEL,
          DTS_NODE,
          DTS_CELL_PROPERTY,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          NUMBERS,
          STRINGS
        ]
      };
      return {
        name: "Device Tree",
        keywords: "",
        contains: [
          DTS_ROOT_NODE,
          DTS_REFERENCE,
          DTS_KEYWORD,
          DTS_LABEL,
          DTS_NODE,
          DTS_CELL_PROPERTY,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          NUMBERS,
          STRINGS,
          PREPROCESSOR,
          {
            begin: hljs.IDENT_RE + "::",
            keywords: ""
          }
        ]
      };
    }
    module.exports = dts;
  }
});

export {
  require_dts
};
//# sourceMappingURL=chunk-DKDGB7X4.js.map
